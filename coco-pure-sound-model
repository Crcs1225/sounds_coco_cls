{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "604c0961",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-24T06:45:07.660261Z",
     "iopub.status.busy": "2025-09-24T06:45:07.660047Z",
     "iopub.status.idle": "2025-09-24T06:45:12.105967Z",
     "shell.execute_reply": "2025-09-24T06:45:12.105096Z"
    },
    "papermill": {
     "duration": 4.452328,
     "end_time": "2025-09-24T06:45:12.107244",
     "exception": false,
     "start_time": "2025-09-24T06:45:07.654916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog57.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog60.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog43.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog64.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog41.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog151(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog80.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog85.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog71.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog40.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog56.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog150(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog66.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog73.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog86.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog38.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog79.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog146(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog149(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog143(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog44.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog75.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog55.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog152(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog83.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog76.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog61.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog69.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog148(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog53.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog39.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog145(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog68.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog59.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog70.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog62.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog82.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog67.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog147(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog58.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog54.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog63.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog52.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog45.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog16.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog144(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog65.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog78.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog77.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog74.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog42.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog81.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog84.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog72.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog87.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin51.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin38.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin58.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin65.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin62.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin50.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin41.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin83.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin86.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin44.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin69.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin75.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin39.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin61.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin80.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin81.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin85.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin42.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin40.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin52.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin84.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin70.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin46.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin55.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin78.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin66.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin72.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin56.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin60.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin57.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin48.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin79.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin54.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin68.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin49.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin71.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin59.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin87.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin74.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin43.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin16.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin45.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin67.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin64.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin73.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin53.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin77.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin63.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin76.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin47.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin82.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad16.wav\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog22.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/6.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog15.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/76.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog27.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/5.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/79678.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/8.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/sads.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/534.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog1.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog20.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/ghh.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/gfhgf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/vv.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/09f0c820-ede2-479b-b1bc-0238ac8f84ff.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/898ab476-784a-4bbe-9c32-fda35d598ccf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog6.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog14.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/9.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog29.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/aw.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/1.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/asd.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/saw.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog30.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog12.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/7.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog3.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog8.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog18.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/7685678.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog24.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog28.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog16.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog7.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/hdh.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/12312.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/6233ed92-50ea-4950-83b6-63352061fa42.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/fgf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog11.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog13.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog17.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog4.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog10.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/Coconut.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/8721a724-fea1-4caf-bdf0-dcfe884b726a.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/qe.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog2.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog5.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/4.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog23.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog19.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog9.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/3.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog21.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog25.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/34625.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog26.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/2.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin21.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/6.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (2).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin29.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin16.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin11.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin1.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin10.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/5676.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (9).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin27.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin3.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/1312.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin15.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/ghdg.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (6).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin26.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin25.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (7).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/98667.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/23432.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin14.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (8).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin22.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (6).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin17.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin9.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin19.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin12.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin20.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin24.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin18.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin5.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/12.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin2.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin28.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/4234.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/4.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (7).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin4.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/sdfdsf.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin8.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin30.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (2).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin13.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/gfhfh.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin7.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin6.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/2.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin23.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad18.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/images (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad1.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/fresh-young-coconut-fruits-on-260nw-2556716423.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad19.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad24.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/images (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad23.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad13.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad8.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad20.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad12.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/istockphoto-1016116102-612x612.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad21.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad25.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad7.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad16.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad14.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad25.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad19.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad20.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad11.jpeg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad2.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad3.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad11.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/channels4_profile.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad26.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad5.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad17.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad23.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad28.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/images (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/light-green-coconut-water-587.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/green-coconut-kefir-812x609.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/young-coconuts-softer-water-flesh-260nw-2634943223.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad13.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad10.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad22.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad29.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad27.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad30.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad4.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad17.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/istockphoto-481670054-612x612.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/dsf.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/closeup-pile-fresh-green-yellow-260nw-2607704223.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad14.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad27.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/images (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/5gxmcuydcyd.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad15.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad22.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/s-l1200.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/coconut-tropical-fruit-hard-shell-260nw-2623243531.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad9.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad28.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad16.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad6.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad26.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/young-coconut-2.jpg\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d29148d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:45:12.125081Z",
     "iopub.status.busy": "2025-09-24T06:45:12.124448Z",
     "iopub.status.idle": "2025-09-24T06:54:22.454333Z",
     "shell.execute_reply": "2025-09-24T06:54:22.453386Z"
    },
    "papermill": {
     "duration": 550.337023,
     "end_time": "2025-09-24T06:54:22.455945",
     "exception": false,
     "start_time": "2025-09-24T06:45:12.118922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.1/40.1 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.9/60.9 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.9/89.9 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m55.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m75.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m60.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m76.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m89.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m76.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m78.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m79.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "  \r\n",
      "  \u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\r\n",
      "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "  \u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "  \r\n",
      "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n",
      "  Installing build dependencies ... \u001b[?25l\u001b[?25herror\r\n",
      "\u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "\r\n",
      "\u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\r\n",
      "\u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "\u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "\r\n",
      "\u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n"
     ]
    }
   ],
   "source": [
    "!pip -q install torch torchaudio transformers datasets accelerate soundfile librosa audiomentations --upgrade\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "480cd7f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:54:22.470864Z",
     "iopub.status.busy": "2025-09-24T06:54:22.470100Z",
     "iopub.status.idle": "2025-09-24T06:55:36.709440Z",
     "shell.execute_reply": "2025-09-24T06:55:36.708483Z"
    },
    "papermill": {
     "duration": 74.248129,
     "end_time": "2025-09-24T06:55:36.710910",
     "exception": false,
     "start_time": "2025-09-24T06:54:22.462781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/bin/bash: line 1: conda: command not found\r\n",
      "/bin/bash: line 1: conda: command not found\r\n",
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.52.4)\r\n",
      "Collecting transformers\r\n",
      "  Using cached transformers-4.56.2-py3-none-any.whl.metadata (40 kB)\r\n",
      "Requirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (3.6.0)\r\n",
      "Collecting datasets\r\n",
      "  Using cached datasets-4.1.1-py3-none-any.whl.metadata (18 kB)\r\n",
      "Requirement already satisfied: accelerate in /usr/local/lib/python3.11/dist-packages (1.8.1)\r\n",
      "Collecting accelerate\r\n",
      "  Using cached accelerate-1.10.1-py3-none-any.whl.metadata (19 kB)\r\n",
      "Requirement already satisfied: soundfile in /usr/local/lib/python3.11/dist-packages (0.13.1)\r\n",
      "Collecting audiomentations\r\n",
      "  Using cached audiomentations-0.43.1-py3-none-any.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\r\n",
      "Collecting huggingface-hub<1.0,>=0.34.0 (from transformers)\r\n",
      "  Using cached huggingface_hub-0.35.1-py3-none-any.whl.metadata (14 kB)\r\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (25.0)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\r\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\r\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.4)\r\n",
      "Collecting tokenizers<=0.23.0,>=0.22.0 (from transformers)\r\n",
      "  Using cached tokenizers-0.22.1-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)\r\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\r\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\r\n",
      "Collecting pyarrow>=21.0.0 (from datasets)\r\n",
      "  Using cached pyarrow-21.0.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (3.3 kB)\r\n",
      "Requirement already satisfied: dill<0.4.1,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.3.8)\r\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.3)\r\n",
      "Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets) (3.5.0)\r\n",
      "Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.70.16)\r\n",
      "Requirement already satisfied: fsspec<=2025.9.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (2025.5.1)\r\n",
      "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from accelerate) (7.0.0)\r\n",
      "Requirement already satisfied: torch>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from accelerate) (2.6.0+cu124)\r\n",
      "Requirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.11/dist-packages (from soundfile) (1.17.1)\r\n",
      "Collecting numpy-minmax<1,>=0.3.0 (from audiomentations)\r\n",
      "  Using cached numpy_minmax-0.5.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.0 kB)\r\n",
      "Collecting numpy-rms<1,>=0.4.2 (from audiomentations)\r\n",
      "  Using cached numpy_rms-0.6.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.5 kB)\r\n",
      "Requirement already satisfied: librosa!=0.10.0,<0.12.0,>=0.8.0 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (0.11.0)\r\n",
      "Collecting python-stretch<1,>=0.3.1 (from audiomentations)\r\n",
      "  Using cached python_stretch-0.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.7 kB)\r\n",
      "Requirement already satisfied: scipy<2,>=1.4 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (1.15.3)\r\n",
      "Requirement already satisfied: soxr<1.0.0,>=0.3.2 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (0.5.0.post1)\r\n",
      "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.0->soundfile) (2.22)\r\n",
      "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (3.12.13)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (4.14.0)\r\n",
      "Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (1.1.5)\r\n",
      "Requirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (3.0.1)\r\n",
      "Requirement already satisfied: numba>=0.51.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.60.0)\r\n",
      "Requirement already satisfied: scikit-learn>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.2.2)\r\n",
      "Requirement already satisfied: joblib>=1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.5.1)\r\n",
      "Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (4.4.2)\r\n",
      "Requirement already satisfied: pooch>=1.1 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.8.2)\r\n",
      "Requirement already satisfied: lazy_loader>=0.1 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.4)\r\n",
      "Requirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.1.1)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2025.2.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2022.2.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2.4.1)\r\n",
      "Collecting numpy>=1.17 (from transformers)\r\n",
      "  Downloading numpy-2.3.3-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (62 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.1/62.1 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hRequirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.5.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.6.15)\r\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.5)\r\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.1.6)\r\n",
      "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-curand-cu12==10.3.5.147 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (0.6.2)\r\n",
      "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (2.21.5)\r\n",
      "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (12.4.127)\r\n",
      "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.2.0)\r\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (1.13.1)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=2.0.0->accelerate) (1.3.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\r\n",
      "Requirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (2.6.1)\r\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.3.2)\r\n",
      "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (25.3.0)\r\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.7.0)\r\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (6.6.3)\r\n",
      "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (0.3.2)\r\n",
      "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.20.1)\r\n",
      "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.51.0->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.43.0)\r\n",
      "Collecting numpy>=1.17 (from transformers)\r\n",
      "  Using cached numpy-2.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\r\n",
      "Requirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from pooch>=1.1->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (4.3.8)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.1.0->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (3.6.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=2.0.0->accelerate) (3.0.2)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->transformers) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->transformers) (2022.2.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->transformers) (1.4.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->transformers) (2024.2.0)\r\n",
      "INFO: pip is looking at multiple versions of mkl-fft to determine which version is compatible with other requirements. This could take a while.\r\n",
      "Collecting mkl_fft (from numpy>=1.17->transformers)\r\n",
      "  Using cached mkl_fft-2.0.0-22-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (7.1 kB)\r\n",
      "  Using cached mkl_fft-1.3.14-0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.8 kB)\r\n",
      "  Using cached mkl_fft-1.3.13-0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.8 kB)\r\n",
      "  Using cached mkl_fft-1.3.11-81-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.4 kB)\r\n",
      "Collecting scikit-learn>=1.1.0 (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations)\r\n",
      "  Downloading scikit_learn-1.7.2-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is still looking at multiple versions of mkl-fft to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.7.1-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\r\n",
      "  Downloading scikit_learn-1.7.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (17 kB)\r\n",
      "  Downloading scikit_learn-1.6.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "  Downloading scikit_learn-1.6.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "  Downloading scikit_learn-1.5.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\r\n",
      "  Downloading scikit_learn-1.5.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\r\n",
      "  Downloading scikit_learn-1.5.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.4.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.4.1.post1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is looking at multiple versions of scikit-learn to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.4.0-1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is still looking at multiple versions of scikit-learn to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.2.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.2.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\r\n",
      "  Downloading scikit_learn-1.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.1.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (10 kB)\r\n",
      "  Downloading scikit-learn-1.1.2.tar.gz (7.0 MB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.0/7.0 MB\u001b[0m \u001b[31m65.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "  \r\n",
      "  \u001b[31m×\u001b[0m \u001b[32mPreparing metadata \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mpyproject.toml\u001b[0m\u001b[1;32m)\u001b[0m did not run successfully.\r\n",
      "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "  \u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "  \r\n",
      "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25herror\r\n",
      "\u001b[1;31merror\u001b[0m: \u001b[1mmetadata-generation-failed\u001b[0m\r\n",
      "\r\n",
      "\u001b[31m×\u001b[0m Encountered error while generating package metadata.\r\n",
      "\u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "\r\n",
      "\u001b[1;35mnote\u001b[0m: This is an issue with the package mentioned above, not pip.\r\n",
      "\u001b[1;36mhint\u001b[0m: See above for details.\r\n"
     ]
    }
   ],
   "source": [
    "# If you're using conda, try:\n",
    "!conda install -c pytorch torch torchaudio -y\n",
    "!conda install -c conda-forge librosa -y\n",
    "!pip install transformers datasets accelerate soundfile audiomentations --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4cbf984e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:55:36.731124Z",
     "iopub.status.busy": "2025-09-24T06:55:36.730431Z",
     "iopub.status.idle": "2025-09-24T06:56:19.581186Z",
     "shell.execute_reply": "2025-09-24T06:56:19.580577Z"
    },
    "papermill": {
     "duration": 42.862112,
     "end_time": "2025-09-24T06:56:19.582552",
     "exception": false,
     "start_time": "2025-09-24T06:55:36.720440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-24 06:56:02.600102: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1758696962.923031      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1758696963.017368      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import random\n",
    "import math\n",
    "import json\n",
    "from pathlib import Path\n",
    "from typing import List, Tuple, Dict\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import librosa\n",
    "import soundfile as sf\n",
    "import torch\n",
    "import torchaudio\n",
    "from torch import nn\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchaudio.transforms import Resample\n",
    "from transformers import Wav2Vec2FeatureExtractor, Wav2Vec2ForSequenceClassification\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2acbdb96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:56:19.603142Z",
     "iopub.status.busy": "2025-09-24T06:56:19.602704Z",
     "iopub.status.idle": "2025-09-24T06:56:19.615948Z",
     "shell.execute_reply": "2025-09-24T06:56:19.615291Z"
    },
    "papermill": {
     "duration": 0.024341,
     "end_time": "2025-09-24T06:56:19.617059",
     "exception": false,
     "start_time": "2025-09-24T06:56:19.592718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Reproducibility\n",
    "def set_seed(seed=42):\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    torch.cuda.manual_seed_all(seed)\n",
    "\n",
    "set_seed(42)\n",
    "\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "SR = 16000  # Wav2Vec2 expects 16kHz mono\n",
    "TARGET_SECONDS = 1.5\n",
    "TARGET_SAMPLES = int(SR * TARGET_SECONDS)\n",
    "DATA_DIR = Path(\"/kaggle/input/coco-sound/sounds dataset\") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e01b2b49",
   "metadata": {
    "papermill": {
     "duration": 0.00901,
     "end_time": "2025-09-24T06:56:19.635681",
     "exception": false,
     "start_time": "2025-09-24T06:56:19.626671",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data and exploratory analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0016b184",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:56:19.655075Z",
     "iopub.status.busy": "2025-09-24T06:56:19.654842Z",
     "iopub.status.idle": "2025-09-24T06:56:19.708410Z",
     "shell.execute_reply": "2025-09-24T06:56:19.707725Z"
    },
    "papermill": {
     "duration": 0.064669,
     "end_time": "2025-09-24T06:56:19.709423",
     "exception": false,
     "start_time": "2025-09-24T06:56:19.644754",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total files: 554\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>path</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                path      label\n",
       "0  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "1  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "2  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "3  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "4  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dataset structure loading\n",
    "# Expecting: DATA_DIR / class_a / *.wav, DATA_DIR / class_b / *.wav, DATA_DIR / class_c / *.wav\n",
    "def list_audio_files(root: Path) -> pd.DataFrame:\n",
    "    rows = []\n",
    "    for cls in sorted([d for d in root.iterdir() if d.is_dir()]):\n",
    "        for wav in cls.glob(\"*.wav\"):\n",
    "            rows.append({\"path\": str(wav), \"label\": cls.name})\n",
    "    return pd.DataFrame(rows)\n",
    "\n",
    "df = list_audio_files(DATA_DIR)\n",
    "print(\"Total files:\", len(df))\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "362643a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:56:19.729999Z",
     "iopub.status.busy": "2025-09-24T06:56:19.729198Z",
     "iopub.status.idle": "2025-09-24T06:56:20.016300Z",
     "shell.execute_reply": "2025-09-24T06:56:20.015630Z"
    },
    "papermill": {
     "duration": 0.298425,
     "end_time": "2025-09-24T06:56:20.017320",
     "exception": false,
     "start_time": "2025-09-24T06:56:19.718895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Class distribution\n",
    "plt.figure(figsize=(6,4))\n",
    "sns.countplot(y=\"label\", data=df, order=df[\"label\"].value_counts().index)\n",
    "plt.title(\"Class counts\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "df10f75f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:56:20.037818Z",
     "iopub.status.busy": "2025-09-24T06:56:20.037408Z",
     "iopub.status.idle": "2025-09-24T06:56:25.903982Z",
     "shell.execute_reply": "2025-09-24T06:56:25.903186Z"
    },
    "papermill": {
     "duration": 5.877954,
     "end_time": "2025-09-24T06:56:25.905116",
     "exception": false,
     "start_time": "2025-09-24T06:56:20.027162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MALAKANIN</th>\n",
       "      <td>200.0</td>\n",
       "      <td>8.469526</td>\n",
       "      <td>1.209916</td>\n",
       "      <td>6.762667</td>\n",
       "      <td>7.226667</td>\n",
       "      <td>8.074667</td>\n",
       "      <td>9.516000</td>\n",
       "      <td>10.584000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALAKATAD</th>\n",
       "      <td>150.0</td>\n",
       "      <td>7.847422</td>\n",
       "      <td>0.972645</td>\n",
       "      <td>6.243265</td>\n",
       "      <td>7.105306</td>\n",
       "      <td>7.366531</td>\n",
       "      <td>8.736508</td>\n",
       "      <td>10.472200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALAUHOG</th>\n",
       "      <td>204.0</td>\n",
       "      <td>8.789975</td>\n",
       "      <td>0.917593</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>8.165333</td>\n",
       "      <td>9.009342</td>\n",
       "      <td>9.404082</td>\n",
       "      <td>10.611519</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           count      mean       std       min       25%       50%       75%  \\\n",
       "label                                                                          \n",
       "MALAKANIN  200.0  8.469526  1.209916  6.762667  7.226667  8.074667  9.516000   \n",
       "MALAKATAD  150.0  7.847422  0.972645  6.243265  7.105306  7.366531  8.736508   \n",
       "MALAUHOG   204.0  8.789975  0.917593  6.400000  8.165333  9.009342  9.404082   \n",
       "\n",
       "                 max  \n",
       "label                 \n",
       "MALAKANIN  10.584000  \n",
       "MALAKATAD  10.472200  \n",
       "MALAUHOG   10.611519  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Duration statistics\n",
    "def get_duration(path):\n",
    "    info = sf.info(path)\n",
    "    return info.duration\n",
    "\n",
    "df[\"duration_s\"] = df[\"path\"].apply(get_duration)\n",
    "df.groupby(\"label\")[\"duration_s\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d3a3c5da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:56:25.925806Z",
     "iopub.status.busy": "2025-09-24T06:56:25.925372Z",
     "iopub.status.idle": "2025-09-24T06:56:26.155315Z",
     "shell.execute_reply": "2025-09-24T06:56:26.154639Z"
    },
    "papermill": {
     "duration": 0.241208,
     "end_time": "2025-09-24T06:56:26.156374",
     "exception": false,
     "start_time": "2025-09-24T06:56:25.915166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "sns.histplot(df[\"duration_s\"], bins=30, kde=True)\n",
    "plt.title(\"Audio duration distribution (seconds)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "47d10326",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:56:26.177500Z",
     "iopub.status.busy": "2025-09-24T06:56:26.177284Z",
     "iopub.status.idle": "2025-09-24T06:58:04.191196Z",
     "shell.execute_reply": "2025-09-24T06:58:04.190413Z"
    },
    "papermill": {
     "duration": 98.08296,
     "end_time": "2025-09-24T06:58:04.249716",
     "exception": false,
     "start_time": "2025-09-24T06:56:26.166756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Quick waveform visualization - CORRECTED VERSION\n",
    "def plot_waveform(path, sr=SR, title=None):\n",
    "    x, file_sr = sf.read(path, always_2d=False)\n",
    "    if file_sr != sr:\n",
    "        x = librosa.resample(x, orig_sr=file_sr, target_sr=sr)  # Fixed line\n",
    "    plt.figure(figsize=(10,3))\n",
    "    plt.plot(x)\n",
    "    plt.title(title or Path(path).name)\n",
    "    plt.xlabel(\"Samples\")\n",
    "    plt.ylabel(\"Amplitude\")\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "sample_paths = df.sample(3, random_state=42)[\"path\"].tolist()\n",
    "for p in sample_paths:\n",
    "    plot_waveform(p, title=f\"Waveform: {Path(p).name}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a9ed304",
   "metadata": {
    "papermill": {
     "duration": 0.011814,
     "end_time": "2025-09-24T06:58:04.273686",
     "exception": false,
     "start_time": "2025-09-24T06:58:04.261872",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing and augmentation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3194cd8",
   "metadata": {
    "papermill": {
     "duration": 0.011669,
     "end_time": "2025-09-24T06:58:04.297695",
     "exception": false,
     "start_time": "2025-09-24T06:58:04.286026",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Resample: All audio to 16 kHz mono.\n",
    "- Normalize: Per-sample RMS normalization.\n",
    "- Crop/pad: Random 1-second segments for training; center crops for validation/test.\n",
    "- Augmentations (subtle, tap-safe):\n",
    "- Time shift: Small circular shift.\n",
    "- Background noise: Low-level Gaussian or mix-of dataset ambient fragments.\n",
    "- Random gain: Mild amplitude scaling.\n",
    "- Avoid strong pitch-shift/time-stretch; taps are brief transients whose cues can be distorted.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "11a4c2ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:58:04.323063Z",
     "iopub.status.busy": "2025-09-24T06:58:04.322361Z",
     "iopub.status.idle": "2025-09-24T06:58:04.332589Z",
     "shell.execute_reply": "2025-09-24T06:58:04.331873Z"
    },
    "papermill": {
     "duration": 0.024311,
     "end_time": "2025-09-24T06:58:04.333755",
     "exception": false,
     "start_time": "2025-09-24T06:58:04.309444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torchaudio.transforms as T\n",
    "import numpy as np\n",
    "import soundfile as sf\n",
    "import librosa\n",
    "from transformers import Wav2Vec2FeatureExtractor\n",
    "\n",
    "# Define all your functions FIRST\n",
    "def load_audio(path, sr=SR):\n",
    "    x, file_sr = sf.read(path, always_2d=False)\n",
    "    if x.ndim > 1:  # stereo to mono\n",
    "        x = np.mean(x, axis=1)\n",
    "    if file_sr != sr:\n",
    "        x = librosa.resample(x, orig_sr=file_sr, target_sr=sr)\n",
    "    return x.astype(np.float32)\n",
    "\n",
    "def rms_normalize(x, eps=1e-8):\n",
    "    rms = np.sqrt(np.mean(x**2))\n",
    "    if rms < eps:\n",
    "        return x\n",
    "    return x / rms\n",
    "\n",
    "def crop_or_pad(x: np.ndarray, n_samples: int, mode=\"random\"):\n",
    "    if len(x) >= n_samples:\n",
    "        if mode == \"random\":\n",
    "            start = np.random.randint(0, len(x) - n_samples + 1)\n",
    "        else:\n",
    "            start = max(0, (len(x) - n_samples) // 2)\n",
    "        return x[start:start + n_samples]\n",
    "    pad_left = (n_samples - len(x)) // 2\n",
    "    pad_right = n_samples - len(x) - pad_left\n",
    "    return np.pad(x, (pad_left, pad_right), mode='constant')\n",
    "\n",
    "def time_shift(x, max_shift=0.1):\n",
    "    shift = int(max_shift * len(x) * np.random.uniform(-1, 1))\n",
    "    if shift > 0:\n",
    "        return np.concatenate([x[shift:], np.zeros(shift)])\n",
    "    elif shift < 0:\n",
    "        return np.concatenate([np.zeros(-shift), x[:shift]])\n",
    "    return x\n",
    "\n",
    "def add_gaussian_noise(x, min_amplitude=0.001, max_amplitude=0.01):\n",
    "    if np.random.random() < 0.3:\n",
    "        amplitude = np.random.uniform(min_amplitude, max_amplitude)\n",
    "        noise = np.random.normal(0, amplitude, x.shape)\n",
    "        return x + noise\n",
    "    return x\n",
    "\n",
    "def gain_augmentation(x, min_gain_db=-3.0, max_gain_db=3.0):\n",
    "    if np.random.random() < 0.3:\n",
    "        gain_db = np.random.uniform(min_gain_db, max_gain_db)\n",
    "        gain_linear = 10 ** (gain_db / 20.0)\n",
    "        return x * gain_linear\n",
    "    return x\n",
    "\n",
    "def train_augment(x):\n",
    "    x = time_shift(x, max_shift=0.1)\n",
    "    x = add_gaussian_noise(x, 0.001, 0.01)\n",
    "    x = gain_augmentation(x, -3.0, 3.0)\n",
    "    return x\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ef6332af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:58:04.358689Z",
     "iopub.status.busy": "2025-09-24T06:58:04.358033Z",
     "iopub.status.idle": "2025-09-24T06:58:04.400064Z",
     "shell.execute_reply": "2025-09-24T06:58:04.399423Z"
    },
    "papermill": {
     "duration": 0.055563,
     "end_time": "2025-09-24T06:58:04.401290",
     "exception": false,
     "start_time": "2025-09-24T06:58:04.345727",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(387, 83, 84, ['MALAKANIN', 'MALAKATAD', 'MALAUHOG'])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dataset class and split\n",
    "from sklearn.model_selection import StratifiedGroupKFold, train_test_split\n",
    "\n",
    "labels = sorted(df[\"label\"].unique())\n",
    "label2id = {l:i for i,l in enumerate(labels)}\n",
    "id2label = {i:l for l,i in label2id.items()}\n",
    "\n",
    "df[\"label_id\"] = df[\"label\"].map(label2id)\n",
    "\n",
    "train_df, temp_df = train_test_split(df, test_size=0.3, stratify=df[\"label_id\"], random_state=42)\n",
    "val_df, test_df = train_test_split(temp_df, test_size=0.5, stratify=temp_df[\"label_id\"], random_state=42)\n",
    "\n",
    "class AudioDataset(Dataset):\n",
    "    def __init__(self, dataframe, sr=SR, n_samples=TARGET_SAMPLES, mode=\"train\"):\n",
    "        self.df = dataframe.reset_index(drop=True)\n",
    "        self.sr = sr\n",
    "        self.n_samples = n_samples\n",
    "        self.mode = mode\n",
    "        self.feature_extractor = Wav2Vec2FeatureExtractor(\n",
    "            feature_size=1, sampling_rate=sr, padding=True, do_normalize=True, return_attention_mask=True\n",
    "        )\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        row = self.df.iloc[idx]\n",
    "        x = load_audio(row[\"path\"], sr=self.sr)\n",
    "        x = rms_normalize(x)\n",
    "        crop_mode = \"random\" if self.mode == \"train\" else \"center\"\n",
    "        x = crop_or_pad(x, self.n_samples, mode=crop_mode)\n",
    "        if self.mode == \"train\":\n",
    "            x = train_augment(x)  # Fixed: removed sample_rate parameter\n",
    "\n",
    "        inputs = self.feature_extractor(x, sampling_rate=self.sr, padding=\"do_not_pad\")\n",
    "        input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
    "        attention_mask = torch.ones_like(input_values)\n",
    "\n",
    "        return {\n",
    "            \"input_values\": input_values.squeeze(0),\n",
    "            \"attention_mask\": attention_mask.squeeze(0),\n",
    "            \"labels\": torch.tensor(row[\"label_id\"], dtype=torch.long),\n",
    "            \"path\": row[\"path\"]\n",
    "        }\n",
    "\n",
    "train_ds = AudioDataset(train_df, mode=\"train\")\n",
    "val_ds   = AudioDataset(val_df,   mode=\"val\")\n",
    "test_ds  = AudioDataset(test_df,  mode=\"test\")\n",
    "\n",
    "BATCH_SIZE = 32\n",
    "train_loader = DataLoader(train_ds, batch_size=BATCH_SIZE, shuffle=True, num_workers=2)\n",
    "val_loader   = DataLoader(val_ds, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)\n",
    "test_loader  = DataLoader(test_ds, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)\n",
    "\n",
    "len(train_ds), len(val_ds), len(test_ds), labels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "277bf775",
   "metadata": {
    "papermill": {
     "duration": 0.013417,
     "end_time": "2025-09-24T06:58:04.428102",
     "exception": false,
     "start_time": "2025-09-24T06:58:04.414685",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model and training"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fb415e9",
   "metadata": {
    "papermill": {
     "duration": 0.013137,
     "end_time": "2025-09-24T06:58:04.454748",
     "exception": false,
     "start_time": "2025-09-24T06:58:04.441611",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Base: facebook/wav2vec2-base\n",
    "- Head: New classification head with 3 outputs\n",
    "- Optimization: AdamW + linear scheduler\n",
    "- Class imbalance: Optional class weights\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3814d17d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T06:58:04.482663Z",
     "iopub.status.busy": "2025-09-24T06:58:04.482416Z",
     "iopub.status.idle": "2025-09-24T07:00:19.539262Z",
     "shell.execute_reply": "2025-09-24T07:00:19.538069Z"
    },
    "papermill": {
     "duration": 135.072295,
     "end_time": "2025-09-24T07:00:19.540424",
     "exception": false,
     "start_time": "2025-09-24T06:58:04.468129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7d2fd01c292646339055b70bbdef6467",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "preprocessor_config.json:   0%|          | 0.00/159 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5fb049e958f245b082069c30d8bcadef",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/163 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c2837581618a433c8bf00c2c542daa02",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/transformers/configuration_utils.py:312: UserWarning: Passing `gradient_checkpointing` to a config initialization is deprecated and will be removed in v5 Transformers. Using `model.gradient_checkpointing_enable()` instead, or if you are using the `Trainer` API, pass `gradient_checkpointing=True` in your `TrainingArguments`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "91e10221f6e5411a8a404772df689c2b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.json:   0%|          | 0.00/291 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e264ef86b9e542bab7c973a8bc6a622e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/85.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "489b203343394fa89699b30125d37051",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "pytorch_model.bin:   0%|          | 0.00/380M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of Wav2Vec2ForSequenceClassification were not initialized from the model checkpoint at facebook/wav2vec2-base and are newly initialized: ['classifier.bias', 'classifier.weight', 'projector.bias', 'projector.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "47edb36026f7489f8d310ce377055c6d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/380M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 01 | train_loss=1.0641 acc=0.491 | val_loss=1.0071 acc=0.627\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 02 | train_loss=0.8959 acc=0.703 | val_loss=0.7597 acc=0.807\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 03 | train_loss=0.7065 acc=0.801 | val_loss=0.5987 acc=0.855\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 04 | train_loss=0.5641 acc=0.863 | val_loss=0.4915 acc=0.880\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 05 | train_loss=0.4848 acc=0.881 | val_loss=0.4246 acc=0.892\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 06 | train_loss=0.4656 acc=0.884 | val_loss=0.4251 acc=0.867\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 07 | train_loss=0.3767 acc=0.925 | val_loss=0.3509 acc=0.916\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 08 | train_loss=0.3400 acc=0.935 | val_loss=0.3347 acc=0.928\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 09 | train_loss=0.3080 acc=0.948 | val_loss=0.3356 acc=0.928\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 10 | train_loss=0.2935 acc=0.943 | val_loss=0.3232 acc=0.916\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import numpy as np\n",
    "from transformers import Wav2Vec2ForSequenceClassification, Wav2Vec2Processor\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "# Setup\n",
    "MODEL_NAME = \"facebook/wav2vec2-base\"\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# Load processor and model\n",
    "processor = Wav2Vec2Processor.from_pretrained(MODEL_NAME)\n",
    "model = Wav2Vec2ForSequenceClassification.from_pretrained(\n",
    "    MODEL_NAME,\n",
    "    num_labels=len(labels),\n",
    "    label2id=label2id,\n",
    "    id2label=id2label,\n",
    "    problem_type=\"single_label_classification\",\n",
    "    ignore_mismatched_sizes=True  # suppresses classifier/projector warnings\n",
    ")\n",
    "model.gradient_checkpointing_enable()\n",
    "model.to(DEVICE)\n",
    "\n",
    "# Freeze feature extractor for warmup\n",
    "for param in model.wav2vec2.feature_extractor.parameters():\n",
    "    param.requires_grad = False\n",
    "\n",
    "# Optimizer and scheduler\n",
    "# Training schedule\n",
    "WARMUP_EPOCHS = 5   # only train classifier head\n",
    "FT_EPOCHS = 5       # fine-tune encoder + head\n",
    "\n",
    "LR = 2e-5\n",
    "optimizer = torch.optim.AdamW(model.parameters(), lr=LR)\n",
    "num_training_steps = (WARMUP_EPOCHS+FT_EPOCHS) * len(train_loader)\n",
    "scheduler = torch.optim.lr_scheduler.LinearLR(optimizer, start_factor=1.0, end_factor=0.1, total_iters=num_training_steps)\n",
    "\n",
    "# Class weights\n",
    "class_counts = train_df[\"label_id\"].value_counts().sort_index().values\n",
    "class_weights = torch.tensor((class_counts.max() / class_counts), dtype=torch.float32).to(DEVICE)\n",
    "criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "\n",
    "# Training loop\n",
    "def train_one_epoch(epoch):\n",
    "    model.train()\n",
    "    total_loss, correct, total = 0.0, 0, 0\n",
    "    for batch in train_loader:\n",
    "        optimizer.zero_grad()\n",
    "        input_values = torch.tensor(np.array(batch[\"input_values\"]), dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = batch[\"attention_mask\"].to(DEVICE)\n",
    "        labels = batch[\"labels\"].to(DEVICE)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        loss = criterion(outputs.logits, labels)\n",
    "        loss.backward()\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n",
    "        optimizer.step()\n",
    "        scheduler.step()\n",
    "\n",
    "        total_loss += loss.item() * input_values.size(0)\n",
    "        preds = outputs.logits.argmax(dim=1)\n",
    "        correct += (preds == labels).sum().item()\n",
    "        total += input_values.size(0)\n",
    "\n",
    "    return total_loss / total, correct / total\n",
    "\n",
    "# Evaluation loop\n",
    "@torch.no_grad()\n",
    "def eval_one_epoch(loader):\n",
    "    model.eval()\n",
    "    total_loss, correct, total = 0.0, 0, 0\n",
    "    all_labels, all_preds = [], []\n",
    "    for batch in loader:\n",
    "        input_values = torch.tensor(np.array(batch[\"input_values\"]), dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = batch[\"attention_mask\"].to(DEVICE)\n",
    "        labels = batch[\"labels\"].to(DEVICE)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        loss = criterion(outputs.logits, labels)\n",
    "\n",
    "        total_loss += loss.item() * input_values.size(0)\n",
    "        preds = outputs.logits.argmax(dim=1)\n",
    "        correct += (preds == labels).sum().item()\n",
    "        total += input_values.size(0)\n",
    "\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "\n",
    "    return total_loss / total, correct / total, np.array(all_labels), np.array(all_preds)\n",
    "\n",
    "# Training loop\n",
    "train_losses, val_losses, val_accs, train_accs = [], [], [], []\n",
    "\n",
    "\n",
    "for epoch in range(1, WARMUP_EPOCHS + 1):\n",
    "    tr_loss, tr_acc = train_one_epoch(epoch)\n",
    "    val_loss, val_acc, y_true, y_pred = eval_one_epoch(val_loader)\n",
    "\n",
    "    train_losses.append(tr_loss)\n",
    "    val_losses.append(val_loss)\n",
    "    val_accs.append(val_acc)\n",
    "    train_accs.append(tr_acc)\n",
    "    print(f\"[Warmup] Epoch {epoch:02d} | train_loss={tr_loss:.4f} acc={tr_acc:.3f} \"\n",
    "          f\"| val_loss={val_loss:.4f} acc={val_acc:.3f}\")\n",
    "\n",
    "\n",
    "# Unfreeze feature extractor for fine-tuning\n",
    "for param in model.wav2vec2.feature_extractor.parameters():\n",
    "    param.requires_grad = True\n",
    "\n",
    "# Differential learning rates: smaller for encoder, larger for classifier\n",
    "\n",
    "optimizer = torch.optim.AdamW([\n",
    "    {\"params\": model.wav2vec2.parameters(), \"lr\": 1e-5},\n",
    "    {\"params\": model.classifier.parameters(), \"lr\": 2e-5},\n",
    "], weight_decay=0.01)\n",
    "\n",
    "for epoch in range(WARMUP_EPOCHS + 1, WARMUP_EPOCHS + FT_EPOCHS + 1):\n",
    "    tr_loss, tr_acc = train_one_epoch(epoch)\n",
    "    val_loss, val_acc, y_true, y_pred = eval_one_epoch(val_loader)\n",
    "    train_losses.append(tr_loss)\n",
    "    val_losses.append(val_loss)\n",
    "    val_accs.append(val_acc)\n",
    "    train_accs.append(tr_acc)\n",
    "    print(f\"[Warmup] Epoch {epoch:02d} | train_loss={tr_loss:.4f} acc={tr_acc:.3f} \"\n",
    "          f\"| val_loss={val_loss:.4f} acc={val_acc:.3f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b9e80f0",
   "metadata": {
    "papermill": {
     "duration": 0.01509,
     "end_time": "2025-09-24T07:00:19.571408",
     "exception": false,
     "start_time": "2025-09-24T07:00:19.556318",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Evaluation and analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "152bd548",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T07:00:19.601621Z",
     "iopub.status.busy": "2025-09-24T07:00:19.601362Z",
     "iopub.status.idle": "2025-09-24T07:00:19.911551Z",
     "shell.execute_reply": "2025-09-24T07:00:19.910834Z"
    },
    "papermill": {
     "duration": 0.326815,
     "end_time": "2025-09-24T07:00:19.912620",
     "exception": false,
     "start_time": "2025-09-24T07:00:19.585805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Training curves\n",
    "plt.figure(figsize=(8,4))\n",
    "plt.plot(train_losses, label=\"Train loss\")\n",
    "plt.plot(val_losses, label=\"Val loss\")\n",
    "plt.title(\"Loss curves\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8,4))\n",
    "plt.plot(val_accs, label=\"Val accuracy\")\n",
    "plt.plot(train_accs, label=\"Train Accuracy\")\n",
    "plt.title(\"Validation accuracy\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "43136294",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T07:00:19.947356Z",
     "iopub.status.busy": "2025-09-24T07:00:19.947150Z",
     "iopub.status.idle": "2025-09-24T07:00:23.035600Z",
     "shell.execute_reply": "2025-09-24T07:00:23.034802Z"
    },
    "papermill": {
     "duration": 3.107293,
     "end_time": "2025-09-24T07:00:23.036688",
     "exception": false,
     "start_time": "2025-09-24T07:00:19.929395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss=0.3042, Test acc=0.952\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "   MALAKANIN       0.97      1.00      0.98        30\n",
      "   MALAKATAD       1.00      0.87      0.93        23\n",
      "    MALAUHOG       0.91      0.97      0.94        31\n",
      "\n",
      "    accuracy                           0.95        84\n",
      "   macro avg       0.96      0.95      0.95        84\n",
      "weighted avg       0.95      0.95      0.95        84\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Test performance, confusion matrix, report\n",
    "test_loss, test_acc, y_true_test, y_pred_test = eval_one_epoch(test_loader)\n",
    "print(f\"Test loss={test_loss:.4f}, Test acc={test_acc:.3f}\")\n",
    "\n",
    "cm = confusion_matrix(y_true_test, y_pred_test, labels=list(range(len(labels))))\n",
    "plt.figure(figsize=(6,5))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\",\n",
    "            xticklabels=[id2label[i] for i in range(len(labels))],\n",
    "            yticklabels=[id2label[i] for i in range(len(labels))])\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"True\")\n",
    "plt.title(\"Confusion matrix (test)\")\n",
    "plt.show()\n",
    "\n",
    "print(classification_report(y_true_test, y_pred_test, target_names=[id2label[i] for i in range(len(labels))]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "55042917",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T07:00:23.070966Z",
     "iopub.status.busy": "2025-09-24T07:00:23.070745Z",
     "iopub.status.idle": "2025-09-24T07:00:26.461343Z",
     "shell.execute_reply": "2025-09-24T07:00:26.460371Z"
    },
    "papermill": {
     "duration": 3.409309,
     "end_time": "2025-09-24T07:00:26.462791",
     "exception": false,
     "start_time": "2025-09-24T07:00:23.053482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pydub in /usr/local/lib/python3.11/dist-packages (0.25.1)\r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2348996914.py:40: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32).to(DEVICE)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MALAKANIN [0.86130524 0.0560803  0.08261447]\n"
     ]
    }
   ],
   "source": [
    "!pip install pydub\n",
    "\n",
    "from pydub import AudioSegment\n",
    "import tempfile\n",
    "import os\n",
    "\n",
    "def convert_aac_to_wav(aac_path):\n",
    "    \"\"\"Convert AAC file to temporary WAV file\"\"\"\n",
    "    # Load AAC file\n",
    "    audio = AudioSegment.from_file(aac_path, format=\"aac\")\n",
    "    \n",
    "    # Create temporary WAV file\n",
    "    temp_wav = tempfile.NamedTemporaryFile(suffix='.wav', delete=False)\n",
    "    audio.export(temp_wav.name, format=\"wav\")\n",
    "    return temp_wav.name\n",
    "\n",
    "@torch.no_grad()\n",
    "def predict_file(path: str, n_crops=10):\n",
    "    model.eval()\n",
    "    \n",
    "    # Check if file is AAC and convert if needed\n",
    "    if path.lower().endswith('.aac'):\n",
    "        wav_path = convert_aac_to_wav(path)\n",
    "        try:\n",
    "            x = load_audio(wav_path, sr=SR)\n",
    "        finally:\n",
    "            # Clean up temporary file\n",
    "            os.unlink(wav_path)\n",
    "    else:\n",
    "        x = load_audio(path, sr=SR)\n",
    "        \n",
    "    x = rms_normalize(x)\n",
    "    # Rest of your function remains the same...\n",
    "    probs_list = []\n",
    "    for _ in range(n_crops):\n",
    "        crop = crop_or_pad(x, TARGET_SAMPLES, mode=\"random\")\n",
    "        inputs = Wav2Vec2FeatureExtractor(\n",
    "            feature_size=1, sampling_rate=SR, padding=True, do_normalize=True, return_attention_mask=True\n",
    "        )(crop, sampling_rate=SR, padding=\"do_not_pad\")\n",
    "        input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = torch.ones_like(input_values)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        probs = torch.softmax(outputs.logits, dim=-1).cpu().numpy()[0]\n",
    "        probs_list.append(probs)\n",
    "\n",
    "    mean_probs = np.mean(np.stack(probs_list, axis=0), axis=0)\n",
    "    pred_id = int(np.argmax(mean_probs))\n",
    "    return id2label[pred_id], mean_probs\n",
    "\n",
    "# Example usage:\n",
    "predicted_label, probabilities = predict_file(\"/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin10.wav\")\n",
    "print(predicted_label, probabilities)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acc98832",
   "metadata": {
    "papermill": {
     "duration": 0.016088,
     "end_time": "2025-09-24T07:00:26.497199",
     "exception": false,
     "start_time": "2025-09-24T07:00:26.481111",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Export model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5de97811",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T07:00:26.530947Z",
     "iopub.status.busy": "2025-09-24T07:00:26.530702Z",
     "iopub.status.idle": "2025-09-24T07:00:27.301897Z",
     "shell.execute_reply": "2025-09-24T07:00:27.301249Z"
    },
    "papermill": {
     "duration": 0.789678,
     "end_time": "2025-09-24T07:00:27.303279",
     "exception": false,
     "start_time": "2025-09-24T07:00:26.513601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SAVE_DIR = Path(\"./wav2vec2_coconut_tap_model\")\n",
    "SAVE_DIR.mkdir(exist_ok=True)\n",
    "model.save_pretrained(SAVE_DIR)\n",
    "processor.save_pretrained(SAVE_DIR)\n",
    "with open(SAVE_DIR / \"label_map.json\", \"w\") as f:\n",
    "    json.dump({\"label2id\": label2id, \"id2label\": id2label}, f, indent=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "eeea1141",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-24T07:00:27.337931Z",
     "iopub.status.busy": "2025-09-24T07:00:27.337709Z",
     "iopub.status.idle": "2025-09-24T07:00:45.714077Z",
     "shell.execute_reply": "2025-09-24T07:00:45.713379Z"
    },
    "papermill": {
     "duration": 18.395002,
     "end_time": "2025-09-24T07:00:45.715278",
     "exception": false,
     "start_time": "2025-09-24T07:00:27.320276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/kaggle/working/wav2vec2_coconut_tap_model.zip'"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import shutil\n",
    "\n",
    "shutil.make_archive(\"wav2vec2_coconut_tap_model\", 'zip', SAVE_DIR)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f5a721b",
   "metadata": {
    "papermill": {
     "duration": 0.016141,
     "end_time": "2025-09-24T07:00:45.749505",
     "exception": false,
     "start_time": "2025-09-24T07:00:45.733364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 8194363,
     "sourceId": 12948599,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8273337,
     "sourceId": 13064297,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 947.483872,
   "end_time": "2025-09-24T07:00:49.141335",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-24T06:45:01.657463",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "02902971a682407b89d7694ded65ee53": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_38c3206626b54f789c1709ca09538e27",
       "max": 380204696.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2600a0d2f12f45c694d60aa6000a6bb0",
       "tabbable": null,
       "tooltip": null,
       "value": 380204696.0
      }
     },
     "07ba2058db264003ba00ab1e1a153bcd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0ebef7b16e8944eb86228ba6f9808c87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "10472a0b3d2f45818c9399b077e6474e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_880b454f316c4359ab17219d7ab42490",
       "placeholder": "​",
       "style": "IPY_MODEL_e807542ff9eb44949ecd4d077cb59036",
       "tabbable": null,
       "tooltip": null,
       "value": " 380M/380M [00:01&lt;00:00, 292MB/s]"
      }
     },
     "123704c55d4a431ca0b553963a11be9d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3421697bc94a49bd980ad6e5e6eb5f74",
       "placeholder": "​",
       "style": "IPY_MODEL_5482e8af97e74dfeb3529191956f22bb",
       "tabbable": null,
       "tooltip": null,
       "value": "pytorch_model.bin: 100%"
      }
     },
     "1a505b1ed6024a82a90e61d88b6e3b3b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e8ef10360a2d475f8781c70726962a67",
       "placeholder": "​",
       "style": "IPY_MODEL_23473fa93b024c6d961987f3bd8df1f4",
       "tabbable": null,
       "tooltip": null,
       "value": "vocab.json: 100%"
      }
     },
     "1ca6a4a002ba44d4a79ca88fe3700b35": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_58099f87d9e84fbe913f33872f90349d",
       "placeholder": "​",
       "style": "IPY_MODEL_de1f5d4c56484e099eb733be20624d7c",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "1daf57351b9346449650c1a45021fd7a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1e4c56ddbf1b43e6a3e2b70055e52aaa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_329b8d6e19a74e18af1680521e90f21e",
       "placeholder": "​",
       "style": "IPY_MODEL_8010eea7ae914fed9824bab228419c2a",
       "tabbable": null,
       "tooltip": null,
       "value": "preprocessor_config.json: 100%"
      }
     },
     "2084a1938f144afba6e9da9f0f0860a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_db32c25549a14bdd8f371d5771b9bebf",
       "placeholder": "​",
       "style": "IPY_MODEL_65c0ff9572d44501847c08746c69ef2e",
       "tabbable": null,
       "tooltip": null,
       "value": " 291/291 [00:00&lt;00:00, 41.9kB/s]"
      }
     },
     "23473fa93b024c6d961987f3bd8df1f4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2600a0d2f12f45c694d60aa6000a6bb0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2d78f4b1e7c64da88d4507b570971124": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "329b8d6e19a74e18af1680521e90f21e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3421697bc94a49bd980ad6e5e6eb5f74": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3489efec07b44690b27be18b7c8335b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "38c3206626b54f789c1709ca09538e27": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3e455399b4334955989c654881d6e394": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "3f75639a3be447349f9a881d70ac41de": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "412800223403461bba042cd5a79680f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "41572022f0cb4ba8b714525d63e66e09": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "42ae68f27dc3499eb8a8a74396411e06": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a5c406a961b44d9b94f9b0700b028b61",
       "placeholder": "​",
       "style": "IPY_MODEL_41572022f0cb4ba8b714525d63e66e09",
       "tabbable": null,
       "tooltip": null,
       "value": " 85.0/85.0 [00:00&lt;00:00, 12.3kB/s]"
      }
     },
     "4660af8b903545c6af274569d67f2ca2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a47556eec93042439545b7c62ff49f34",
       "placeholder": "​",
       "style": "IPY_MODEL_07ba2058db264003ba00ab1e1a153bcd",
       "tabbable": null,
       "tooltip": null,
       "value": " 163/163 [00:00&lt;00:00, 20.0kB/s]"
      }
     },
     "47edb36026f7489f8d310ce377055c6d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1ca6a4a002ba44d4a79ca88fe3700b35",
        "IPY_MODEL_02902971a682407b89d7694ded65ee53",
        "IPY_MODEL_10472a0b3d2f45818c9399b077e6474e"
       ],
       "layout": "IPY_MODEL_dc48628e48a7489497c5774c0cd63cbc",
       "tabbable": null,
       "tooltip": null
      }
     },
     "489b203343394fa89699b30125d37051": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_123704c55d4a431ca0b553963a11be9d",
        "IPY_MODEL_b34eb160c44e4e09a15680b86c660fa4",
        "IPY_MODEL_48e9b8e60ab1457481fd9941a74a6562"
       ],
       "layout": "IPY_MODEL_cb95314fb5614c328888faeb1de3a592",
       "tabbable": null,
       "tooltip": null
      }
     },
     "48e9b8e60ab1457481fd9941a74a6562": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_630a2f41d8784be195564fc734492a63",
       "placeholder": "​",
       "style": "IPY_MODEL_bbce11e5633244b9a1b09040061eca07",
       "tabbable": null,
       "tooltip": null,
       "value": " 380M/380M [00:02&lt;00:00, 338MB/s]"
      }
     },
     "51362632671a43638eec233d0eecd801": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5482e8af97e74dfeb3529191956f22bb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "58099f87d9e84fbe913f33872f90349d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "59894e3eaa464a428ee26bdadade7a42": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5b360d1b296d4f29813a3bbfbd2e8daf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f2648ffca93049e8a951b547c61f25ad",
       "max": 159.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_51362632671a43638eec233d0eecd801",
       "tabbable": null,
       "tooltip": null,
       "value": 159.0
      }
     },
     "5cc4c396da1844a5ab2afc2808a76365": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f32f2819939d4332a77dfd215f008841",
       "placeholder": "​",
       "style": "IPY_MODEL_3489efec07b44690b27be18b7c8335b5",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "5fb049e958f245b082069c30d8bcadef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5cc4c396da1844a5ab2afc2808a76365",
        "IPY_MODEL_d3572fc35c3e4012a8166749cfa80d0c",
        "IPY_MODEL_4660af8b903545c6af274569d67f2ca2"
       ],
       "layout": "IPY_MODEL_ec20d9635f6444ddbe9b1c64a8501f54",
       "tabbable": null,
       "tooltip": null
      }
     },
     "630a2f41d8784be195564fc734492a63": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "65c0ff9572d44501847c08746c69ef2e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6818666d4d634e168b72f81cca733b25": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ec8c7a7b8dfd40969b78267f306568e3",
       "max": 85.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ad07ae43c7fe4d51aa550aba0331fcf9",
       "tabbable": null,
       "tooltip": null,
       "value": 85.0
      }
     },
     "6819459cd20b4353a1ed58cee6703946": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7cbd3b3a01c84321928ad7724eb6c378",
       "placeholder": "​",
       "style": "IPY_MODEL_f54e71670d684e08a83b04769be4e9cc",
       "tabbable": null,
       "tooltip": null,
       "value": " 1.84k/? [00:00&lt;00:00, 224kB/s]"
      }
     },
     "68d3bf2ce66b4fdd8f8e2bd5d02d38fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6a008a7679be4d188113a189c812a71d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "71cde716e7bf42c29d6a69874e3ed0b9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "7cbd3b3a01c84321928ad7724eb6c378": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7d2fd01c292646339055b70bbdef6467": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1e4c56ddbf1b43e6a3e2b70055e52aaa",
        "IPY_MODEL_5b360d1b296d4f29813a3bbfbd2e8daf",
        "IPY_MODEL_8384b2be8c4b4cfea2addbe45f740c04"
       ],
       "layout": "IPY_MODEL_59894e3eaa464a428ee26bdadade7a42",
       "tabbable": null,
       "tooltip": null
      }
     },
     "8010eea7ae914fed9824bab228419c2a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8384b2be8c4b4cfea2addbe45f740c04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1daf57351b9346449650c1a45021fd7a",
       "placeholder": "​",
       "style": "IPY_MODEL_d0543ca58b6d4c6284142b12de9a1ad0",
       "tabbable": null,
       "tooltip": null,
       "value": " 159/159 [00:00&lt;00:00, 20.2kB/s]"
      }
     },
     "880b454f316c4359ab17219d7ab42490": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "91e10221f6e5411a8a404772df689c2b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1a505b1ed6024a82a90e61d88b6e3b3b",
        "IPY_MODEL_dd0c5ae6d6c14d6e8ebe1cefd98351e9",
        "IPY_MODEL_2084a1938f144afba6e9da9f0f0860a0"
       ],
       "layout": "IPY_MODEL_3f75639a3be447349f9a881d70ac41de",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a47556eec93042439545b7c62ff49f34": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a5c406a961b44d9b94f9b0700b028b61": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a658aba6a5ee4840af50a0fdd55bfa42": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "aaca2fdee6d34dfe808d7a6bed129dd7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2d78f4b1e7c64da88d4507b570971124",
       "placeholder": "​",
       "style": "IPY_MODEL_0ebef7b16e8944eb86228ba6f9808c87",
       "tabbable": null,
       "tooltip": null,
       "value": "special_tokens_map.json: 100%"
      }
     },
     "ad07ae43c7fe4d51aa550aba0331fcf9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b34eb160c44e4e09a15680b86c660fa4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e9ff3e0b29dc43b4b3a50e5e9226a66b",
       "max": 380267417.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3e455399b4334955989c654881d6e394",
       "tabbable": null,
       "tooltip": null,
       "value": 380267417.0
      }
     },
     "b6743f9c7c4b47c99980ce7dc1d15057": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bbce11e5633244b9a1b09040061eca07": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c2837581618a433c8bf00c2c542daa02": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e6aeb8a2838f41d8ad597367dfeb6535",
        "IPY_MODEL_cdedcd5b45044fecb53224c6236562f5",
        "IPY_MODEL_6819459cd20b4353a1ed58cee6703946"
       ],
       "layout": "IPY_MODEL_b6743f9c7c4b47c99980ce7dc1d15057",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c85b49cfc4e343d0a103a3d829b77317": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cb95314fb5614c328888faeb1de3a592": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cdedcd5b45044fecb53224c6236562f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_71cde716e7bf42c29d6a69874e3ed0b9",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_412800223403461bba042cd5a79680f5",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "d0543ca58b6d4c6284142b12de9a1ad0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d3572fc35c3e4012a8166749cfa80d0c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6a008a7679be4d188113a189c812a71d",
       "max": 163.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a658aba6a5ee4840af50a0fdd55bfa42",
       "tabbable": null,
       "tooltip": null,
       "value": 163.0
      }
     },
     "d559a3fc369840f99d66a0afa390dbaa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "db32c25549a14bdd8f371d5771b9bebf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dc48628e48a7489497c5774c0cd63cbc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dd0c5ae6d6c14d6e8ebe1cefd98351e9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c85b49cfc4e343d0a103a3d829b77317",
       "max": 291.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d559a3fc369840f99d66a0afa390dbaa",
       "tabbable": null,
       "tooltip": null,
       "value": 291.0
      }
     },
     "de1f5d4c56484e099eb733be20624d7c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e264ef86b9e542bab7c973a8bc6a622e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_aaca2fdee6d34dfe808d7a6bed129dd7",
        "IPY_MODEL_6818666d4d634e168b72f81cca733b25",
        "IPY_MODEL_42ae68f27dc3499eb8a8a74396411e06"
       ],
       "layout": "IPY_MODEL_68d3bf2ce66b4fdd8f8e2bd5d02d38fa",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e6aeb8a2838f41d8ad597367dfeb6535": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f9d07d889eca40cfaf037ffebf1488c7",
       "placeholder": "​",
       "style": "IPY_MODEL_faa88b72d5164db1b0ec368e5f6fa727",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: "
      }
     },
     "e807542ff9eb44949ecd4d077cb59036": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e8ef10360a2d475f8781c70726962a67": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e9ff3e0b29dc43b4b3a50e5e9226a66b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ec20d9635f6444ddbe9b1c64a8501f54": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ec8c7a7b8dfd40969b78267f306568e3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f2648ffca93049e8a951b547c61f25ad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f32f2819939d4332a77dfd215f008841": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f54e71670d684e08a83b04769be4e9cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f9d07d889eca40cfaf037ffebf1488c7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "faa88b72d5164db1b0ec368e5f6fa727": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
