{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "09719f99",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-23T10:24:23.917794Z",
     "iopub.status.busy": "2025-09-23T10:24:23.917525Z",
     "iopub.status.idle": "2025-09-23T10:24:28.229490Z",
     "shell.execute_reply": "2025-09-23T10:24:28.228524Z"
    },
    "papermill": {
     "duration": 4.318659,
     "end_time": "2025-09-23T10:24:28.231259",
     "exception": false,
     "start_time": "2025-09-23T10:24:23.912600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/last-test-data/test/malauhog/malauhog22.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/6.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog15.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/76.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog27.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/5.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/79678.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/8.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/sads.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/534.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog1.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog20.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/ghh.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/gfhgf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/vv.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/09f0c820-ede2-479b-b1bc-0238ac8f84ff.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/898ab476-784a-4bbe-9c32-fda35d598ccf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog6.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog14.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/9.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog29.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/aw.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/1.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/asd.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/saw.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog30.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog12.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/7.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog3.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog8.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog18.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/7685678.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog24.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog28.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog16.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog7.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/hdh.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/12312.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/6233ed92-50ea-4950-83b6-63352061fa42.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/fgf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog11.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog13.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog17.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog4.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog10.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/Coconut.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/8721a724-fea1-4caf-bdf0-dcfe884b726a.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/qe.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog2.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog5.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/4.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog23.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog19.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog9.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/3.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog21.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog25.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/34625.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog26.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/2.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin21.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/6.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (2).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin29.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin16.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin11.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin1.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin10.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/5676.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (9).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin27.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin3.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/1312.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin15.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/ghdg.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (6).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin26.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin25.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (7).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/98667.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/23432.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin14.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (8).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin22.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (6).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin17.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin9.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin19.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin12.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin20.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin24.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin18.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin5.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/12.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin2.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin28.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/4234.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/4.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (7).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin4.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/sdfdsf.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin8.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin30.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (2).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin13.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/gfhfh.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin7.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin6.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/2.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin23.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad18.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/images (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad1.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/fresh-young-coconut-fruits-on-260nw-2556716423.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad19.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad24.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/images (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad23.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad13.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad8.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad20.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad12.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/istockphoto-1016116102-612x612.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad21.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad25.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad7.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad16.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad14.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad25.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad19.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad20.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad11.jpeg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad2.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad3.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad11.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/channels4_profile.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad26.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad5.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad17.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad23.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad28.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/images (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/light-green-coconut-water-587.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/green-coconut-kefir-812x609.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/young-coconuts-softer-water-flesh-260nw-2634943223.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad13.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad10.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad22.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad29.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad27.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad30.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad4.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad17.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/istockphoto-481670054-612x612.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/dsf.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/closeup-pile-fresh-green-yellow-260nw-2607704223.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad14.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad27.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/images (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/5gxmcuydcyd.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad15.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad22.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/s-l1200.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/coconut-tropical-fruit-hard-shell-260nw-2623243531.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad9.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad28.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad16.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad6.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad26.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/young-coconut-2.jpg\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog57.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog60.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog43.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog64.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog41.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog151(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog80.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog85.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog71.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog40.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog56.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog150(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog66.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog73.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog86.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog38.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog79.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog146(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog149(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog143(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog44.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog75.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog55.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog152(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog83.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog76.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog61.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog69.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog148(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog53.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog39.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog145(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog68.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog59.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog70.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog62.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog82.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog67.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog147(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog58.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog54.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog63.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog52.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog45.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog16.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog144(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog65.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog78.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog77.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog74.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog42.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog81.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog84.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog72.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog87.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin51.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin38.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin58.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin65.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin62.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin50.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin41.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin83.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin86.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin44.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin69.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin75.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin39.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin61.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin80.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin81.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin85.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin42.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin40.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin52.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin84.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin70.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin46.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin55.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin78.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin66.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin72.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin56.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin60.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin57.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin48.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin79.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin54.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin68.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin49.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin71.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin59.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin87.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin74.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin43.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin16.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin45.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin67.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin64.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin73.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin53.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin77.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin63.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin76.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin47.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin82.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad16.wav\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bf95f96a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:24:28.243563Z",
     "iopub.status.busy": "2025-09-23T10:24:28.243226Z",
     "iopub.status.idle": "2025-09-23T10:33:49.652248Z",
     "shell.execute_reply": "2025-09-23T10:33:49.651266Z"
    },
    "papermill": {
     "duration": 561.415299,
     "end_time": "2025-09-23T10:33:49.653763",
     "exception": false,
     "start_time": "2025-09-23T10:24:28.238464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.1/40.1 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.9/60.9 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.9/89.9 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m37.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m56.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m83.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m76.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m68.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m75.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m80.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m77.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "  \r\n",
      "  \u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\r\n",
      "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "  \u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "  \r\n",
      "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n",
      "  Installing build dependencies ... \u001b[?25l\u001b[?25herror\r\n",
      "\u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "\r\n",
      "\u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\r\n",
      "\u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "\u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "\r\n",
      "\u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n"
     ]
    }
   ],
   "source": [
    "!pip -q install torch torchaudio transformers datasets accelerate soundfile librosa audiomentations --upgrade\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "39beedc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:33:49.668114Z",
     "iopub.status.busy": "2025-09-23T10:33:49.667874Z",
     "iopub.status.idle": "2025-09-23T10:35:04.344395Z",
     "shell.execute_reply": "2025-09-23T10:35:04.343547Z"
    },
    "papermill": {
     "duration": 74.685433,
     "end_time": "2025-09-23T10:35:04.345936",
     "exception": false,
     "start_time": "2025-09-23T10:33:49.660503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/bin/bash: line 1: conda: command not found\r\n",
      "/bin/bash: line 1: conda: command not found\r\n",
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.52.4)\r\n",
      "Collecting transformers\r\n",
      "  Using cached transformers-4.56.2-py3-none-any.whl.metadata (40 kB)\r\n",
      "Requirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (3.6.0)\r\n",
      "Collecting datasets\r\n",
      "  Using cached datasets-4.1.1-py3-none-any.whl.metadata (18 kB)\r\n",
      "Requirement already satisfied: accelerate in /usr/local/lib/python3.11/dist-packages (1.8.1)\r\n",
      "Collecting accelerate\r\n",
      "  Using cached accelerate-1.10.1-py3-none-any.whl.metadata (19 kB)\r\n",
      "Requirement already satisfied: soundfile in /usr/local/lib/python3.11/dist-packages (0.13.1)\r\n",
      "Collecting audiomentations\r\n",
      "  Using cached audiomentations-0.43.1-py3-none-any.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\r\n",
      "Collecting huggingface-hub<1.0,>=0.34.0 (from transformers)\r\n",
      "  Using cached huggingface_hub-0.35.0-py3-none-any.whl.metadata (14 kB)\r\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (25.0)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\r\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\r\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.4)\r\n",
      "Collecting tokenizers<=0.23.0,>=0.22.0 (from transformers)\r\n",
      "  Using cached tokenizers-0.22.1-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)\r\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\r\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\r\n",
      "Collecting pyarrow>=21.0.0 (from datasets)\r\n",
      "  Using cached pyarrow-21.0.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (3.3 kB)\r\n",
      "Requirement already satisfied: dill<0.4.1,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.3.8)\r\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.3)\r\n",
      "Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets) (3.5.0)\r\n",
      "Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.70.16)\r\n",
      "Requirement already satisfied: fsspec<=2025.9.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (2025.5.1)\r\n",
      "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from accelerate) (7.0.0)\r\n",
      "Requirement already satisfied: torch>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from accelerate) (2.6.0+cu124)\r\n",
      "Requirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.11/dist-packages (from soundfile) (1.17.1)\r\n",
      "Collecting numpy-minmax<1,>=0.3.0 (from audiomentations)\r\n",
      "  Using cached numpy_minmax-0.5.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.0 kB)\r\n",
      "Collecting numpy-rms<1,>=0.4.2 (from audiomentations)\r\n",
      "  Using cached numpy_rms-0.6.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.5 kB)\r\n",
      "Requirement already satisfied: librosa!=0.10.0,<0.12.0,>=0.8.0 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (0.11.0)\r\n",
      "Collecting python-stretch<1,>=0.3.1 (from audiomentations)\r\n",
      "  Using cached python_stretch-0.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.7 kB)\r\n",
      "Requirement already satisfied: scipy<2,>=1.4 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (1.15.3)\r\n",
      "Requirement already satisfied: soxr<1.0.0,>=0.3.2 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (0.5.0.post1)\r\n",
      "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.0->soundfile) (2.22)\r\n",
      "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (3.12.13)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (4.14.0)\r\n",
      "Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (1.1.5)\r\n",
      "Requirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (3.0.1)\r\n",
      "Requirement already satisfied: numba>=0.51.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.60.0)\r\n",
      "Requirement already satisfied: scikit-learn>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.2.2)\r\n",
      "Requirement already satisfied: joblib>=1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.5.1)\r\n",
      "Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (4.4.2)\r\n",
      "Requirement already satisfied: pooch>=1.1 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.8.2)\r\n",
      "Requirement already satisfied: lazy_loader>=0.1 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.4)\r\n",
      "Requirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.1.1)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2025.2.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2022.2.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2.4.1)\r\n",
      "Collecting numpy>=1.17 (from transformers)\r\n",
      "  Downloading numpy-2.3.3-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (62 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.1/62.1 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hRequirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.5.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.6.15)\r\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.5)\r\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.1.6)\r\n",
      "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-curand-cu12==10.3.5.147 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (0.6.2)\r\n",
      "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (2.21.5)\r\n",
      "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (12.4.127)\r\n",
      "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.2.0)\r\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (1.13.1)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=2.0.0->accelerate) (1.3.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\r\n",
      "Requirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (2.6.1)\r\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.3.2)\r\n",
      "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (25.3.0)\r\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.7.0)\r\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (6.6.3)\r\n",
      "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (0.3.2)\r\n",
      "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.20.1)\r\n",
      "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.51.0->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.43.0)\r\n",
      "Collecting numpy>=1.17 (from transformers)\r\n",
      "  Using cached numpy-2.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\r\n",
      "Requirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from pooch>=1.1->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (4.3.8)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.1.0->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (3.6.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=2.0.0->accelerate) (3.0.2)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->transformers) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->transformers) (2022.2.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->transformers) (1.4.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->transformers) (2024.2.0)\r\n",
      "INFO: pip is looking at multiple versions of mkl-fft to determine which version is compatible with other requirements. This could take a while.\r\n",
      "Collecting mkl_fft (from numpy>=1.17->transformers)\r\n",
      "  Using cached mkl_fft-2.0.0-22-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (7.1 kB)\r\n",
      "  Using cached mkl_fft-1.3.14-0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.8 kB)\r\n",
      "  Using cached mkl_fft-1.3.13-0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.8 kB)\r\n",
      "  Using cached mkl_fft-1.3.11-81-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.4 kB)\r\n",
      "Collecting scikit-learn>=1.1.0 (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations)\r\n",
      "  Downloading scikit_learn-1.7.2-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is still looking at multiple versions of mkl-fft to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.7.1-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\r\n",
      "  Downloading scikit_learn-1.7.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (17 kB)\r\n",
      "  Downloading scikit_learn-1.6.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "  Downloading scikit_learn-1.6.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "  Downloading scikit_learn-1.5.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\r\n",
      "  Downloading scikit_learn-1.5.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\r\n",
      "  Downloading scikit_learn-1.5.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.4.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.4.1.post1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is looking at multiple versions of scikit-learn to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.4.0-1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is still looking at multiple versions of scikit-learn to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.2.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.2.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\r\n",
      "  Downloading scikit_learn-1.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.1.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (10 kB)\r\n",
      "  Downloading scikit-learn-1.1.2.tar.gz (7.0 MB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.0/7.0 MB\u001b[0m \u001b[31m63.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "  \r\n",
      "  \u001b[31m×\u001b[0m \u001b[32mPreparing metadata \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mpyproject.toml\u001b[0m\u001b[1;32m)\u001b[0m did not run successfully.\r\n",
      "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "  \u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "  \r\n",
      "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25herror\r\n",
      "\u001b[1;31merror\u001b[0m: \u001b[1mmetadata-generation-failed\u001b[0m\r\n",
      "\r\n",
      "\u001b[31m×\u001b[0m Encountered error while generating package metadata.\r\n",
      "\u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "\r\n",
      "\u001b[1;35mnote\u001b[0m: This is an issue with the package mentioned above, not pip.\r\n",
      "\u001b[1;36mhint\u001b[0m: See above for details.\r\n"
     ]
    }
   ],
   "source": [
    "# If you're using conda, try:\n",
    "!conda install -c pytorch torch torchaudio -y\n",
    "!conda install -c conda-forge librosa -y\n",
    "!pip install transformers datasets accelerate soundfile audiomentations --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "22078319",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:35:04.365869Z",
     "iopub.status.busy": "2025-09-23T10:35:04.365584Z",
     "iopub.status.idle": "2025-09-23T10:35:47.800783Z",
     "shell.execute_reply": "2025-09-23T10:35:47.799970Z"
    },
    "papermill": {
     "duration": 43.446806,
     "end_time": "2025-09-23T10:35:47.802239",
     "exception": false,
     "start_time": "2025-09-23T10:35:04.355433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-23 10:35:30.589523: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1758623730.958596      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1758623731.073237      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import random\n",
    "import math\n",
    "import json\n",
    "from pathlib import Path\n",
    "from typing import List, Tuple, Dict\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import librosa\n",
    "import soundfile as sf\n",
    "import torch\n",
    "import torchaudio\n",
    "from torch import nn\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchaudio.transforms import Resample\n",
    "from transformers import Wav2Vec2FeatureExtractor, Wav2Vec2ForSequenceClassification\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ef8b2fd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:35:47.822061Z",
     "iopub.status.busy": "2025-09-23T10:35:47.821599Z",
     "iopub.status.idle": "2025-09-23T10:35:47.834841Z",
     "shell.execute_reply": "2025-09-23T10:35:47.834151Z"
    },
    "papermill": {
     "duration": 0.024132,
     "end_time": "2025-09-23T10:35:47.836053",
     "exception": false,
     "start_time": "2025-09-23T10:35:47.811921",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Reproducibility\n",
    "def set_seed(seed=42):\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    torch.cuda.manual_seed_all(seed)\n",
    "\n",
    "set_seed(42)\n",
    "\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "SR = 16000  # Wav2Vec2 expects 16kHz mono\n",
    "TARGET_SECONDS = 1.5\n",
    "TARGET_SAMPLES = int(SR * TARGET_SECONDS)\n",
    "DATA_DIR = Path(\"/kaggle/input/coco-sound/sounds dataset\") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e0db620",
   "metadata": {
    "papermill": {
     "duration": 0.008648,
     "end_time": "2025-09-23T10:35:47.855216",
     "exception": false,
     "start_time": "2025-09-23T10:35:47.846568",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data and exploratory analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b50dedba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:35:47.874088Z",
     "iopub.status.busy": "2025-09-23T10:35:47.873524Z",
     "iopub.status.idle": "2025-09-23T10:35:47.957248Z",
     "shell.execute_reply": "2025-09-23T10:35:47.956650Z"
    },
    "papermill": {
     "duration": 0.094163,
     "end_time": "2025-09-23T10:35:47.958307",
     "exception": false,
     "start_time": "2025-09-23T10:35:47.864144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total files: 554\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>path</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                path      label\n",
       "0  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "1  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "2  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "3  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "4  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dataset structure loading\n",
    "# Expecting: DATA_DIR / class_a / *.wav, DATA_DIR / class_b / *.wav, DATA_DIR / class_c / *.wav\n",
    "def list_audio_files(root: Path) -> pd.DataFrame:\n",
    "    rows = []\n",
    "    for cls in sorted([d for d in root.iterdir() if d.is_dir()]):\n",
    "        for wav in cls.glob(\"*.wav\"):\n",
    "            rows.append({\"path\": str(wav), \"label\": cls.name})\n",
    "    return pd.DataFrame(rows)\n",
    "\n",
    "df = list_audio_files(DATA_DIR)\n",
    "print(\"Total files:\", len(df))\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d4093a17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:35:47.977710Z",
     "iopub.status.busy": "2025-09-23T10:35:47.977510Z",
     "iopub.status.idle": "2025-09-23T10:35:48.284746Z",
     "shell.execute_reply": "2025-09-23T10:35:48.284051Z"
    },
    "papermill": {
     "duration": 0.318305,
     "end_time": "2025-09-23T10:35:48.286033",
     "exception": false,
     "start_time": "2025-09-23T10:35:47.967728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Class distribution\n",
    "plt.figure(figsize=(6,4))\n",
    "sns.countplot(y=\"label\", data=df, order=df[\"label\"].value_counts().index)\n",
    "plt.title(\"Class counts\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3c2e43e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:35:48.306174Z",
     "iopub.status.busy": "2025-09-23T10:35:48.305917Z",
     "iopub.status.idle": "2025-09-23T10:35:52.723952Z",
     "shell.execute_reply": "2025-09-23T10:35:52.723307Z"
    },
    "papermill": {
     "duration": 4.429301,
     "end_time": "2025-09-23T10:35:52.725209",
     "exception": false,
     "start_time": "2025-09-23T10:35:48.295908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MALAKANIN</th>\n",
       "      <td>200.0</td>\n",
       "      <td>8.469526</td>\n",
       "      <td>1.209916</td>\n",
       "      <td>6.762667</td>\n",
       "      <td>7.226667</td>\n",
       "      <td>8.074667</td>\n",
       "      <td>9.516000</td>\n",
       "      <td>10.584000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALAKATAD</th>\n",
       "      <td>150.0</td>\n",
       "      <td>7.847422</td>\n",
       "      <td>0.972645</td>\n",
       "      <td>6.243265</td>\n",
       "      <td>7.105306</td>\n",
       "      <td>7.366531</td>\n",
       "      <td>8.736508</td>\n",
       "      <td>10.472200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALAUHOG</th>\n",
       "      <td>204.0</td>\n",
       "      <td>8.789975</td>\n",
       "      <td>0.917593</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>8.165333</td>\n",
       "      <td>9.009342</td>\n",
       "      <td>9.404082</td>\n",
       "      <td>10.611519</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           count      mean       std       min       25%       50%       75%  \\\n",
       "label                                                                          \n",
       "MALAKANIN  200.0  8.469526  1.209916  6.762667  7.226667  8.074667  9.516000   \n",
       "MALAKATAD  150.0  7.847422  0.972645  6.243265  7.105306  7.366531  8.736508   \n",
       "MALAUHOG   204.0  8.789975  0.917593  6.400000  8.165333  9.009342  9.404082   \n",
       "\n",
       "                 max  \n",
       "label                 \n",
       "MALAKANIN  10.584000  \n",
       "MALAKATAD  10.472200  \n",
       "MALAUHOG   10.611519  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Duration statistics\n",
    "def get_duration(path):\n",
    "    info = sf.info(path)\n",
    "    return info.duration\n",
    "\n",
    "df[\"duration_s\"] = df[\"path\"].apply(get_duration)\n",
    "df.groupby(\"label\")[\"duration_s\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6d08348c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:35:52.746673Z",
     "iopub.status.busy": "2025-09-23T10:35:52.746408Z",
     "iopub.status.idle": "2025-09-23T10:35:52.982192Z",
     "shell.execute_reply": "2025-09-23T10:35:52.981428Z"
    },
    "papermill": {
     "duration": 0.247441,
     "end_time": "2025-09-23T10:35:52.983314",
     "exception": false,
     "start_time": "2025-09-23T10:35:52.735873",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "sns.histplot(df[\"duration_s\"], bins=30, kde=True)\n",
    "plt.title(\"Audio duration distribution (seconds)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ef01f14b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:35:53.006212Z",
     "iopub.status.busy": "2025-09-23T10:35:53.005967Z",
     "iopub.status.idle": "2025-09-23T10:37:32.593592Z",
     "shell.execute_reply": "2025-09-23T10:37:32.592642Z"
    },
    "papermill": {
     "duration": 99.660487,
     "end_time": "2025-09-23T10:37:32.654754",
     "exception": false,
     "start_time": "2025-09-23T10:35:52.994267",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Quick waveform visualization - CORRECTED VERSION\n",
    "def plot_waveform(path, sr=SR, title=None):\n",
    "    x, file_sr = sf.read(path, always_2d=False)\n",
    "    if file_sr != sr:\n",
    "        x = librosa.resample(x, orig_sr=file_sr, target_sr=sr)  # Fixed line\n",
    "    plt.figure(figsize=(10,3))\n",
    "    plt.plot(x)\n",
    "    plt.title(title or Path(path).name)\n",
    "    plt.xlabel(\"Samples\")\n",
    "    plt.ylabel(\"Amplitude\")\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "sample_paths = df.sample(3, random_state=42)[\"path\"].tolist()\n",
    "for p in sample_paths:\n",
    "    plot_waveform(p, title=f\"Waveform: {Path(p).name}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b90386a0",
   "metadata": {
    "papermill": {
     "duration": 0.01179,
     "end_time": "2025-09-23T10:37:32.678624",
     "exception": false,
     "start_time": "2025-09-23T10:37:32.666834",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing and augmentation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29a0e062",
   "metadata": {
    "papermill": {
     "duration": 0.011751,
     "end_time": "2025-09-23T10:37:32.702421",
     "exception": false,
     "start_time": "2025-09-23T10:37:32.690670",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Resample: All audio to 16 kHz mono.\n",
    "- Normalize: Per-sample RMS normalization.\n",
    "- Crop/pad: Random 1-second segments for training; center crops for validation/test.\n",
    "- Augmentations (subtle, tap-safe):\n",
    "- Time shift: Small circular shift.\n",
    "- Background noise: Low-level Gaussian or mix-of dataset ambient fragments.\n",
    "- Random gain: Mild amplitude scaling.\n",
    "- Avoid strong pitch-shift/time-stretch; taps are brief transients whose cues can be distorted.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dcfbbd75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:37:32.729055Z",
     "iopub.status.busy": "2025-09-23T10:37:32.727965Z",
     "iopub.status.idle": "2025-09-23T10:37:32.738212Z",
     "shell.execute_reply": "2025-09-23T10:37:32.737585Z"
    },
    "papermill": {
     "duration": 0.024427,
     "end_time": "2025-09-23T10:37:32.739328",
     "exception": false,
     "start_time": "2025-09-23T10:37:32.714901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torchaudio.transforms as T\n",
    "import numpy as np\n",
    "import soundfile as sf\n",
    "import librosa\n",
    "from transformers import Wav2Vec2FeatureExtractor\n",
    "\n",
    "# Define all your functions FIRST\n",
    "def load_audio(path, sr=SR):\n",
    "    x, file_sr = sf.read(path, always_2d=False)\n",
    "    if x.ndim > 1:  # stereo to mono\n",
    "        x = np.mean(x, axis=1)\n",
    "    if file_sr != sr:\n",
    "        x = librosa.resample(x, orig_sr=file_sr, target_sr=sr)\n",
    "    return x.astype(np.float32)\n",
    "\n",
    "def rms_normalize(x, eps=1e-8):\n",
    "    rms = np.sqrt(np.mean(x**2))\n",
    "    if rms < eps:\n",
    "        return x\n",
    "    return x / rms\n",
    "\n",
    "def crop_or_pad(x: np.ndarray, n_samples: int, mode=\"random\"):\n",
    "    if len(x) >= n_samples:\n",
    "        if mode == \"random\":\n",
    "            start = np.random.randint(0, len(x) - n_samples + 1)\n",
    "        else:\n",
    "            start = max(0, (len(x) - n_samples) // 2)\n",
    "        return x[start:start + n_samples]\n",
    "    pad_left = (n_samples - len(x)) // 2\n",
    "    pad_right = n_samples - len(x) - pad_left\n",
    "    return np.pad(x, (pad_left, pad_right), mode='constant')\n",
    "\n",
    "def time_shift(x, max_shift=0.1):\n",
    "    shift = int(max_shift * len(x) * np.random.uniform(-1, 1))\n",
    "    if shift > 0:\n",
    "        return np.concatenate([x[shift:], np.zeros(shift)])\n",
    "    elif shift < 0:\n",
    "        return np.concatenate([np.zeros(-shift), x[:shift]])\n",
    "    return x\n",
    "\n",
    "def add_gaussian_noise(x, min_amplitude=0.001, max_amplitude=0.01):\n",
    "    if np.random.random() < 0.3:\n",
    "        amplitude = np.random.uniform(min_amplitude, max_amplitude)\n",
    "        noise = np.random.normal(0, amplitude, x.shape)\n",
    "        return x + noise\n",
    "    return x\n",
    "\n",
    "def gain_augmentation(x, min_gain_db=-3.0, max_gain_db=3.0):\n",
    "    if np.random.random() < 0.3:\n",
    "        gain_db = np.random.uniform(min_gain_db, max_gain_db)\n",
    "        gain_linear = 10 ** (gain_db / 20.0)\n",
    "        return x * gain_linear\n",
    "    return x\n",
    "\n",
    "def train_augment(x):\n",
    "    x = time_shift(x, max_shift=0.1)\n",
    "    x = add_gaussian_noise(x, 0.001, 0.01)\n",
    "    x = gain_augmentation(x, -3.0, 3.0)\n",
    "    return x\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a4e996fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:37:32.765198Z",
     "iopub.status.busy": "2025-09-23T10:37:32.764951Z",
     "iopub.status.idle": "2025-09-23T10:37:32.802514Z",
     "shell.execute_reply": "2025-09-23T10:37:32.801974Z"
    },
    "papermill": {
     "duration": 0.052191,
     "end_time": "2025-09-23T10:37:32.803777",
     "exception": false,
     "start_time": "2025-09-23T10:37:32.751586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(387, 83, 84, ['MALAKANIN', 'MALAKATAD', 'MALAUHOG'])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dataset class and split\n",
    "from sklearn.model_selection import StratifiedGroupKFold, train_test_split\n",
    "\n",
    "labels = sorted(df[\"label\"].unique())\n",
    "label2id = {l:i for i,l in enumerate(labels)}\n",
    "id2label = {i:l for l,i in label2id.items()}\n",
    "\n",
    "df[\"label_id\"] = df[\"label\"].map(label2id)\n",
    "\n",
    "train_df, temp_df = train_test_split(df, test_size=0.3, stratify=df[\"label_id\"], random_state=42)\n",
    "val_df, test_df = train_test_split(temp_df, test_size=0.5, stratify=temp_df[\"label_id\"], random_state=42)\n",
    "\n",
    "class AudioDataset(Dataset):\n",
    "    def __init__(self, dataframe, sr=SR, n_samples=TARGET_SAMPLES, mode=\"train\"):\n",
    "        self.df = dataframe.reset_index(drop=True)\n",
    "        self.sr = sr\n",
    "        self.n_samples = n_samples\n",
    "        self.mode = mode\n",
    "        self.feature_extractor = Wav2Vec2FeatureExtractor(\n",
    "            feature_size=1, sampling_rate=sr, padding=True, do_normalize=True, return_attention_mask=True\n",
    "        )\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        row = self.df.iloc[idx]\n",
    "        x = load_audio(row[\"path\"], sr=self.sr)\n",
    "        x = rms_normalize(x)\n",
    "        crop_mode = \"random\" if self.mode == \"train\" else \"center\"\n",
    "        x = crop_or_pad(x, self.n_samples, mode=crop_mode)\n",
    "        if self.mode == \"train\":\n",
    "            x = train_augment(x)  # Fixed: removed sample_rate parameter\n",
    "\n",
    "        inputs = self.feature_extractor(x, sampling_rate=self.sr, padding=\"do_not_pad\")\n",
    "        input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
    "        attention_mask = torch.ones_like(input_values)\n",
    "\n",
    "        return {\n",
    "            \"input_values\": input_values.squeeze(0),\n",
    "            \"attention_mask\": attention_mask.squeeze(0),\n",
    "            \"labels\": torch.tensor(row[\"label_id\"], dtype=torch.long),\n",
    "            \"path\": row[\"path\"]\n",
    "        }\n",
    "\n",
    "train_ds = AudioDataset(train_df, mode=\"train\")\n",
    "val_ds   = AudioDataset(val_df,   mode=\"val\")\n",
    "test_ds  = AudioDataset(test_df,  mode=\"test\")\n",
    "\n",
    "BATCH_SIZE = 32\n",
    "train_loader = DataLoader(train_ds, batch_size=BATCH_SIZE, shuffle=True, num_workers=2)\n",
    "val_loader   = DataLoader(val_ds, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)\n",
    "test_loader  = DataLoader(test_ds, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)\n",
    "\n",
    "len(train_ds), len(val_ds), len(test_ds), labels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e011474",
   "metadata": {
    "papermill": {
     "duration": 0.012248,
     "end_time": "2025-09-23T10:37:32.828255",
     "exception": false,
     "start_time": "2025-09-23T10:37:32.816007",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model and training"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12601309",
   "metadata": {
    "papermill": {
     "duration": 0.012161,
     "end_time": "2025-09-23T10:37:32.852603",
     "exception": false,
     "start_time": "2025-09-23T10:37:32.840442",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Base: facebook/wav2vec2-base\n",
    "- Head: New classification head with 3 outputs\n",
    "- Optimization: AdamW + linear scheduler\n",
    "- Class imbalance: Optional class weights\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b6d6c20b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:37:32.878683Z",
     "iopub.status.busy": "2025-09-23T10:37:32.878474Z",
     "iopub.status.idle": "2025-09-23T10:39:54.799137Z",
     "shell.execute_reply": "2025-09-23T10:39:54.798114Z"
    },
    "papermill": {
     "duration": 141.935362,
     "end_time": "2025-09-23T10:39:54.800344",
     "exception": false,
     "start_time": "2025-09-23T10:37:32.864982",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7ab2317cb0e1462489ed4aedc897646d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "preprocessor_config.json:   0%|          | 0.00/159 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f697490077c144218459499c86ebc728",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/163 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cb9b7d6cd49148b1bb3fe0fa96c66b80",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/transformers/configuration_utils.py:312: UserWarning: Passing `gradient_checkpointing` to a config initialization is deprecated and will be removed in v5 Transformers. Using `model.gradient_checkpointing_enable()` instead, or if you are using the `Trainer` API, pass `gradient_checkpointing=True` in your `TrainingArguments`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e937620b46eb4287b4cd748535cd054c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.json:   0%|          | 0.00/291 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ab786cb5aa624d00b3b3998b47134aba",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/85.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a896ee0b517f4cc08fb6fdb1b5ae03f9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "pytorch_model.bin:   0%|          | 0.00/380M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a7b67eff995949e9b4ccd7dae56eabf7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/380M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of Wav2Vec2ForSequenceClassification were not initialized from the model checkpoint at facebook/wav2vec2-base and are newly initialized: ['classifier.bias', 'classifier.weight', 'projector.bias', 'projector.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 01 | train_loss=1.0621 acc=0.501 | val_loss=0.9875 acc=0.687\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 02 | train_loss=0.8897 acc=0.736 | val_loss=0.8021 acc=0.759\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 03 | train_loss=0.7078 acc=0.814 | val_loss=0.5952 acc=0.855\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 04 | train_loss=0.5796 acc=0.860 | val_loss=0.5310 acc=0.892\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 05 | train_loss=0.5067 acc=0.871 | val_loss=0.4318 acc=0.880\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 06 | train_loss=0.5037 acc=0.858 | val_loss=0.4687 acc=0.843\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 07 | train_loss=0.4339 acc=0.907 | val_loss=0.3654 acc=0.904\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 08 | train_loss=0.3725 acc=0.922 | val_loss=0.3651 acc=0.916\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 09 | train_loss=0.3562 acc=0.925 | val_loss=0.3690 acc=0.892\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 10 | train_loss=0.3561 acc=0.915 | val_loss=0.3474 acc=0.916\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import numpy as np\n",
    "from transformers import Wav2Vec2ForSequenceClassification, Wav2Vec2Processor\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "# Setup\n",
    "MODEL_NAME = \"facebook/wav2vec2-base\"\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# Load processor and model\n",
    "processor = Wav2Vec2Processor.from_pretrained(MODEL_NAME)\n",
    "model = Wav2Vec2ForSequenceClassification.from_pretrained(\n",
    "    MODEL_NAME,\n",
    "    num_labels=len(labels),\n",
    "    label2id=label2id,\n",
    "    id2label=id2label,\n",
    "    problem_type=\"single_label_classification\",\n",
    "    ignore_mismatched_sizes=True  # suppresses classifier/projector warnings\n",
    ")\n",
    "model.gradient_checkpointing_enable()\n",
    "model.to(DEVICE)\n",
    "\n",
    "# Freeze feature extractor for warmup\n",
    "for param in model.wav2vec2.feature_extractor.parameters():\n",
    "    param.requires_grad = False\n",
    "\n",
    "# Optimizer and scheduler\n",
    "# Training schedule\n",
    "WARMUP_EPOCHS = 5   # only train classifier head\n",
    "FT_EPOCHS = 5       # fine-tune encoder + head\n",
    "\n",
    "LR = 2e-5\n",
    "optimizer = torch.optim.AdamW(model.parameters(), lr=LR)\n",
    "num_training_steps = (WARMUP_EPOCHS+FT_EPOCHS) * len(train_loader)\n",
    "scheduler = torch.optim.lr_scheduler.LinearLR(optimizer, start_factor=1.0, end_factor=0.1, total_iters=num_training_steps)\n",
    "\n",
    "# Class weights\n",
    "class_counts = train_df[\"label_id\"].value_counts().sort_index().values\n",
    "class_weights = torch.tensor((class_counts.max() / class_counts), dtype=torch.float32).to(DEVICE)\n",
    "criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "\n",
    "# Training loop\n",
    "def train_one_epoch(epoch):\n",
    "    model.train()\n",
    "    total_loss, correct, total = 0.0, 0, 0\n",
    "    for batch in train_loader:\n",
    "        optimizer.zero_grad()\n",
    "        input_values = torch.tensor(np.array(batch[\"input_values\"]), dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = batch[\"attention_mask\"].to(DEVICE)\n",
    "        labels = batch[\"labels\"].to(DEVICE)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        loss = criterion(outputs.logits, labels)\n",
    "        loss.backward()\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n",
    "        optimizer.step()\n",
    "        scheduler.step()\n",
    "\n",
    "        total_loss += loss.item() * input_values.size(0)\n",
    "        preds = outputs.logits.argmax(dim=1)\n",
    "        correct += (preds == labels).sum().item()\n",
    "        total += input_values.size(0)\n",
    "\n",
    "    return total_loss / total, correct / total\n",
    "\n",
    "# Evaluation loop\n",
    "@torch.no_grad()\n",
    "def eval_one_epoch(loader):\n",
    "    model.eval()\n",
    "    total_loss, correct, total = 0.0, 0, 0\n",
    "    all_labels, all_preds = [], []\n",
    "    for batch in loader:\n",
    "        input_values = torch.tensor(np.array(batch[\"input_values\"]), dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = batch[\"attention_mask\"].to(DEVICE)\n",
    "        labels = batch[\"labels\"].to(DEVICE)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        loss = criterion(outputs.logits, labels)\n",
    "\n",
    "        total_loss += loss.item() * input_values.size(0)\n",
    "        preds = outputs.logits.argmax(dim=1)\n",
    "        correct += (preds == labels).sum().item()\n",
    "        total += input_values.size(0)\n",
    "\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "\n",
    "    return total_loss / total, correct / total, np.array(all_labels), np.array(all_preds)\n",
    "\n",
    "# Training loop\n",
    "train_losses, val_losses, val_accs, train_accs = [], [], [], []\n",
    "\n",
    "\n",
    "for epoch in range(1, WARMUP_EPOCHS + 1):\n",
    "    tr_loss, tr_acc = train_one_epoch(epoch)\n",
    "    val_loss, val_acc, y_true, y_pred = eval_one_epoch(val_loader)\n",
    "\n",
    "    train_losses.append(tr_loss)\n",
    "    val_losses.append(val_loss)\n",
    "    val_accs.append(val_acc)\n",
    "    train_accs.append(tr_acc)\n",
    "    print(f\"[Warmup] Epoch {epoch:02d} | train_loss={tr_loss:.4f} acc={tr_acc:.3f} \"\n",
    "          f\"| val_loss={val_loss:.4f} acc={val_acc:.3f}\")\n",
    "\n",
    "\n",
    "# Unfreeze feature extractor for fine-tuning\n",
    "for param in model.wav2vec2.feature_extractor.parameters():\n",
    "    param.requires_grad = True\n",
    "\n",
    "# Differential learning rates: smaller for encoder, larger for classifier\n",
    "\n",
    "optimizer = torch.optim.AdamW([\n",
    "    {\"params\": model.wav2vec2.parameters(), \"lr\": 1e-5},\n",
    "    {\"params\": model.classifier.parameters(), \"lr\": 2e-5},\n",
    "], weight_decay=0.01)\n",
    "\n",
    "for epoch in range(WARMUP_EPOCHS + 1, WARMUP_EPOCHS + FT_EPOCHS + 1):\n",
    "    tr_loss, tr_acc = train_one_epoch(epoch)\n",
    "    val_loss, val_acc, y_true, y_pred = eval_one_epoch(val_loader)\n",
    "    train_losses.append(tr_loss)\n",
    "    val_losses.append(val_loss)\n",
    "    val_accs.append(val_acc)\n",
    "    train_accs.append(tr_acc)\n",
    "    print(f\"[Warmup] Epoch {epoch:02d} | train_loss={tr_loss:.4f} acc={tr_acc:.3f} \"\n",
    "          f\"| val_loss={val_loss:.4f} acc={val_acc:.3f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d90fecef",
   "metadata": {
    "papermill": {
     "duration": 0.014596,
     "end_time": "2025-09-23T10:39:54.830885",
     "exception": false,
     "start_time": "2025-09-23T10:39:54.816289",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Evaluation and analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "92d2cf7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:39:54.863562Z",
     "iopub.status.busy": "2025-09-23T10:39:54.862752Z",
     "iopub.status.idle": "2025-09-23T10:39:55.175462Z",
     "shell.execute_reply": "2025-09-23T10:39:55.174797Z"
    },
    "papermill": {
     "duration": 0.330907,
     "end_time": "2025-09-23T10:39:55.176657",
     "exception": false,
     "start_time": "2025-09-23T10:39:54.845750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Training curves\n",
    "plt.figure(figsize=(8,4))\n",
    "plt.plot(train_losses, label=\"Train loss\")\n",
    "plt.plot(val_losses, label=\"Val loss\")\n",
    "plt.title(\"Loss curves\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8,4))\n",
    "plt.plot(val_accs, label=\"Val accuracy\")\n",
    "plt.plot(train_accs, label=\"Train Accuracy\")\n",
    "plt.title(\"Validation accuracy\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f78ca9b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:39:55.210772Z",
     "iopub.status.busy": "2025-09-23T10:39:55.210278Z",
     "iopub.status.idle": "2025-09-23T10:39:58.090185Z",
     "shell.execute_reply": "2025-09-23T10:39:58.089249Z"
    },
    "papermill": {
     "duration": 2.897838,
     "end_time": "2025-09-23T10:39:58.091478",
     "exception": false,
     "start_time": "2025-09-23T10:39:55.193640",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss=0.3264, Test acc=0.940\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "   MALAKANIN       1.00      0.97      0.98        30\n",
      "   MALAKATAD       1.00      0.83      0.90        23\n",
      "    MALAUHOG       0.86      1.00      0.93        31\n",
      "\n",
      "    accuracy                           0.94        84\n",
      "   macro avg       0.95      0.93      0.94        84\n",
      "weighted avg       0.95      0.94      0.94        84\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Test performance, confusion matrix, report\n",
    "test_loss, test_acc, y_true_test, y_pred_test = eval_one_epoch(test_loader)\n",
    "print(f\"Test loss={test_loss:.4f}, Test acc={test_acc:.3f}\")\n",
    "\n",
    "cm = confusion_matrix(y_true_test, y_pred_test, labels=list(range(len(labels))))\n",
    "plt.figure(figsize=(6,5))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\",\n",
    "            xticklabels=[id2label[i] for i in range(len(labels))],\n",
    "            yticklabels=[id2label[i] for i in range(len(labels))])\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"True\")\n",
    "plt.title(\"Confusion matrix (test)\")\n",
    "plt.show()\n",
    "\n",
    "print(classification_report(y_true_test, y_pred_test, target_names=[id2label[i] for i in range(len(labels))]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c1a6906a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:39:58.130983Z",
     "iopub.status.busy": "2025-09-23T10:39:58.130304Z",
     "iopub.status.idle": "2025-09-23T10:40:01.628865Z",
     "shell.execute_reply": "2025-09-23T10:40:01.628032Z"
    },
    "papermill": {
     "duration": 3.517771,
     "end_time": "2025-09-23T10:40:01.630079",
     "exception": false,
     "start_time": "2025-09-23T10:39:58.112308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pydub in /usr/local/lib/python3.11/dist-packages (0.25.1)\r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2348996914.py:40: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32).to(DEVICE)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MALAKANIN [0.85253984 0.05976731 0.08769275]\n"
     ]
    }
   ],
   "source": [
    "!pip install pydub\n",
    "\n",
    "from pydub import AudioSegment\n",
    "import tempfile\n",
    "import os\n",
    "\n",
    "def convert_aac_to_wav(aac_path):\n",
    "    \"\"\"Convert AAC file to temporary WAV file\"\"\"\n",
    "    # Load AAC file\n",
    "    audio = AudioSegment.from_file(aac_path, format=\"aac\")\n",
    "    \n",
    "    # Create temporary WAV file\n",
    "    temp_wav = tempfile.NamedTemporaryFile(suffix='.wav', delete=False)\n",
    "    audio.export(temp_wav.name, format=\"wav\")\n",
    "    return temp_wav.name\n",
    "\n",
    "@torch.no_grad()\n",
    "def predict_file(path: str, n_crops=10):\n",
    "    model.eval()\n",
    "    \n",
    "    # Check if file is AAC and convert if needed\n",
    "    if path.lower().endswith('.aac'):\n",
    "        wav_path = convert_aac_to_wav(path)\n",
    "        try:\n",
    "            x = load_audio(wav_path, sr=SR)\n",
    "        finally:\n",
    "            # Clean up temporary file\n",
    "            os.unlink(wav_path)\n",
    "    else:\n",
    "        x = load_audio(path, sr=SR)\n",
    "        \n",
    "    x = rms_normalize(x)\n",
    "    # Rest of your function remains the same...\n",
    "    probs_list = []\n",
    "    for _ in range(n_crops):\n",
    "        crop = crop_or_pad(x, TARGET_SAMPLES, mode=\"random\")\n",
    "        inputs = Wav2Vec2FeatureExtractor(\n",
    "            feature_size=1, sampling_rate=SR, padding=True, do_normalize=True, return_attention_mask=True\n",
    "        )(crop, sampling_rate=SR, padding=\"do_not_pad\")\n",
    "        input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = torch.ones_like(input_values)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        probs = torch.softmax(outputs.logits, dim=-1).cpu().numpy()[0]\n",
    "        probs_list.append(probs)\n",
    "\n",
    "    mean_probs = np.mean(np.stack(probs_list, axis=0), axis=0)\n",
    "    pred_id = int(np.argmax(mean_probs))\n",
    "    return id2label[pred_id], mean_probs\n",
    "\n",
    "# Example usage:\n",
    "predicted_label, probabilities = predict_file(\"/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin10.wav\")\n",
    "print(predicted_label, probabilities)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ac08fc9",
   "metadata": {
    "papermill": {
     "duration": 0.016333,
     "end_time": "2025-09-23T10:40:01.663659",
     "exception": false,
     "start_time": "2025-09-23T10:40:01.647326",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Export model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e7009e87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:40:01.697645Z",
     "iopub.status.busy": "2025-09-23T10:40:01.697401Z",
     "iopub.status.idle": "2025-09-23T10:40:02.480323Z",
     "shell.execute_reply": "2025-09-23T10:40:02.479688Z"
    },
    "papermill": {
     "duration": 0.801309,
     "end_time": "2025-09-23T10:40:02.481600",
     "exception": false,
     "start_time": "2025-09-23T10:40:01.680291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SAVE_DIR = Path(\"./wav2vec2_coconut_tap_model\")\n",
    "SAVE_DIR.mkdir(exist_ok=True)\n",
    "model.save_pretrained(SAVE_DIR)\n",
    "with open(SAVE_DIR / \"label_map.json\", \"w\") as f:\n",
    "    json.dump({\"label2id\": label2id, \"id2label\": id2label}, f, indent=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bac3b7a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-23T10:40:02.516880Z",
     "iopub.status.busy": "2025-09-23T10:40:02.516634Z",
     "iopub.status.idle": "2025-09-23T10:40:21.198058Z",
     "shell.execute_reply": "2025-09-23T10:40:21.197403Z"
    },
    "papermill": {
     "duration": 18.699948,
     "end_time": "2025-09-23T10:40:21.199219",
     "exception": false,
     "start_time": "2025-09-23T10:40:02.499271",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/kaggle/working/wav2vec2_coconut_tap_model.zip'"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import shutil\n",
    "\n",
    "shutil.make_archive(\"wav2vec2_coconut_tap_model\", 'zip', SAVE_DIR)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8916038",
   "metadata": {
    "papermill": {
     "duration": 0.016442,
     "end_time": "2025-09-23T10:40:21.233366",
     "exception": false,
     "start_time": "2025-09-23T10:40:21.216924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 8194363,
     "sourceId": 12948599,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8273337,
     "sourceId": 13064297,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 966.569364,
   "end_time": "2025-09-23T10:40:24.311113",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-23T10:24:17.741749",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "032edf70c312403dace8536225bfa467": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "048471339b084a8bb26100cb00fef66f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "06d627de42e3436385166eb77b0a067f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0787c9c8540d4f979f27c30b5dd4d404": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0a2eb7cec4a24d718fc7d3ede8c1099e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_abf27f01ba2f408a93980038fd0a1add",
       "placeholder": "​",
       "style": "IPY_MODEL_06d627de42e3436385166eb77b0a067f",
       "tabbable": null,
       "tooltip": null,
       "value": " 380M/380M [00:01&lt;00:00, 324MB/s]"
      }
     },
     "0b66a576c30f4cfc9f45440d641e1c2b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3e56cff321c147709a5a01ed33291108",
       "placeholder": "​",
       "style": "IPY_MODEL_e0cabd123c3549888602af9c61a50570",
       "tabbable": null,
       "tooltip": null,
       "value": "vocab.json: 100%"
      }
     },
     "0c11ac156d4b4b47bd5aa75ffd82e976": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0787c9c8540d4f979f27c30b5dd4d404",
       "max": 159.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8205687f26284a3a9888941ce6d3d748",
       "tabbable": null,
       "tooltip": null,
       "value": 159.0
      }
     },
     "0cca5247315b479abef8553278c4c9c5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "11a91a745f5b4542b782f850374816b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "17dd9aeec9a544faa9ccdb3c1de10af9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1c5f165212d04a319574e0631050fdc3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e6e092ce61cd4642a751127d73aaf930",
       "placeholder": "​",
       "style": "IPY_MODEL_8f2dd7810b104111a3d50ad69356a2a6",
       "tabbable": null,
       "tooltip": null,
       "value": " 85.0/85.0 [00:00&lt;00:00, 10.3kB/s]"
      }
     },
     "23110b561f604f5d88fe3a8e17bd7650": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7516bf2dbad9469698fb0b21bbb59f75",
       "placeholder": "​",
       "style": "IPY_MODEL_6fc5e78e49724de29e03544277acdb6a",
       "tabbable": null,
       "tooltip": null,
       "value": " 159/159 [00:00&lt;00:00, 18.4kB/s]"
      }
     },
     "2ed85ad380684e3286944c70e88bab10": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "35cdaec1e03d4f2783e6da8038d7c282": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3e56cff321c147709a5a01ed33291108": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "48edb7639a8c4696b0443432d0caeb15": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f977627d9fd74c30a503c3e9eeb937f4",
       "placeholder": "​",
       "style": "IPY_MODEL_b108e478fb7940f8b300092f06b298b1",
       "tabbable": null,
       "tooltip": null,
       "value": "special_tokens_map.json: 100%"
      }
     },
     "4d036bafff1a4a7dae9e98be88c3ce30": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ef38172d456841998a0b107295660106",
       "placeholder": "​",
       "style": "IPY_MODEL_95000107379e4b879584fd955203a034",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "4e1506408c0a43468d9c93a1c609e857": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "56ea8948595c4caf85be2e2ac4e2797a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b87a9192055345b99d754ccd23aea4e0",
       "placeholder": "​",
       "style": "IPY_MODEL_76569f7892334630a9eea4d806ef0857",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "5710ff86d488436081cc9bd49ecf3817": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5a8e936d1f4241019e3fe85c59864bbd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a6d92278de214c73b46c3191ed936896",
       "placeholder": "​",
       "style": "IPY_MODEL_a324f1df8d0a4020acadc72170e6b673",
       "tabbable": null,
       "tooltip": null,
       "value": " 1.84k/? [00:00&lt;00:00, 218kB/s]"
      }
     },
     "5aabd3f998de46acb14369b9b3bd5fd3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "63036e0d64da423b8ad3770ad3ea1394": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c5483f569fbd43f2bfba5c0e28f8876c",
       "placeholder": "​",
       "style": "IPY_MODEL_672661100b944a1f836b4c8eef6d06f3",
       "tabbable": null,
       "tooltip": null,
       "value": " 163/163 [00:00&lt;00:00, 23.4kB/s]"
      }
     },
     "656a6dae3b6349c38c757fe622cf5a24": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "672661100b944a1f836b4c8eef6d06f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "69c807a93c9a4d1c875f0fe5f35824f3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6aab2fd1e8f24f91a94f620486ba4d4e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6e186beb9f54401e81cb3d7e282d4bc8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6fc5e78e49724de29e03544277acdb6a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "700d5e3bb66e4079ac7f272d3a75a424": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9aaabab55eb64a159e0f96acfd6e9b3d",
       "max": 380204696.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a0224518b15d4271bb705d50f28e1b57",
       "tabbable": null,
       "tooltip": null,
       "value": 380204696.0
      }
     },
     "70b0e4c3089d41d68a510ce3db02f03f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_656a6dae3b6349c38c757fe622cf5a24",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_032edf70c312403dace8536225bfa467",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "7516bf2dbad9469698fb0b21bbb59f75": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "76569f7892334630a9eea4d806ef0857": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7ab2317cb0e1462489ed4aedc897646d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a7f41d3b80404434b7dca3d52aea4d4f",
        "IPY_MODEL_0c11ac156d4b4b47bd5aa75ffd82e976",
        "IPY_MODEL_23110b561f604f5d88fe3a8e17bd7650"
       ],
       "layout": "IPY_MODEL_6aab2fd1e8f24f91a94f620486ba4d4e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7e2d5148c80f43e28ec850f21c80f8e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c67c57634af04ecfa7d48bcc6242e467",
       "max": 85.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ab1a3c92f806433eb7a0ce09c7d5ac02",
       "tabbable": null,
       "tooltip": null,
       "value": 85.0
      }
     },
     "8205687f26284a3a9888941ce6d3d748": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "88d521de1f0e44d7a4f9406ad038bfae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b4d70a2833d34fe0a2695813fa71b701",
       "max": 163.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5aabd3f998de46acb14369b9b3bd5fd3",
       "tabbable": null,
       "tooltip": null,
       "value": 163.0
      }
     },
     "8f0c4905e5a3431386a899ef9539c525": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e4a347152f0f4966a77d2c650dea93c8",
       "placeholder": "​",
       "style": "IPY_MODEL_90c4506ac7774b8e8396d8120586b7cb",
       "tabbable": null,
       "tooltip": null,
       "value": "pytorch_model.bin: 100%"
      }
     },
     "8f2dd7810b104111a3d50ad69356a2a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "90c4506ac7774b8e8396d8120586b7cb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9400c69b58884fe3b3232fafeec4ea73": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "95000107379e4b879584fd955203a034": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9aaabab55eb64a159e0f96acfd6e9b3d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9b290a0a9f7e478f82f3b83d8783f563": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9b87509688d1460080c077aa7bcf32bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4e1506408c0a43468d9c93a1c609e857",
       "max": 380267417.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b2045bd28f4a41a08d57bc5c0e102488",
       "tabbable": null,
       "tooltip": null,
       "value": 380267417.0
      }
     },
     "9dd73cc067bf4991b0a1ac9f1fbad991": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a0224518b15d4271bb705d50f28e1b57": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "a324f1df8d0a4020acadc72170e6b673": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a47946045a4b48f6b39d58c8a32dd563": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5710ff86d488436081cc9bd49ecf3817",
       "placeholder": "​",
       "style": "IPY_MODEL_11a91a745f5b4542b782f850374816b2",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: "
      }
     },
     "a6d92278de214c73b46c3191ed936896": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a7b67eff995949e9b4ccd7dae56eabf7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4d036bafff1a4a7dae9e98be88c3ce30",
        "IPY_MODEL_700d5e3bb66e4079ac7f272d3a75a424",
        "IPY_MODEL_0a2eb7cec4a24d718fc7d3ede8c1099e"
       ],
       "layout": "IPY_MODEL_c29556e3f67a49599d62b5f86a45cdbd",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a7f41d3b80404434b7dca3d52aea4d4f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_69c807a93c9a4d1c875f0fe5f35824f3",
       "placeholder": "​",
       "style": "IPY_MODEL_afa11611566f4fdbb6a8fc3f80cbed60",
       "tabbable": null,
       "tooltip": null,
       "value": "preprocessor_config.json: 100%"
      }
     },
     "a896ee0b517f4cc08fb6fdb1b5ae03f9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8f0c4905e5a3431386a899ef9539c525",
        "IPY_MODEL_9b87509688d1460080c077aa7bcf32bc",
        "IPY_MODEL_f0aa733027534e01a0a4dd59cb7b333a"
       ],
       "layout": "IPY_MODEL_17dd9aeec9a544faa9ccdb3c1de10af9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ab1a3c92f806433eb7a0ce09c7d5ac02": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ab786cb5aa624d00b3b3998b47134aba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_48edb7639a8c4696b0443432d0caeb15",
        "IPY_MODEL_7e2d5148c80f43e28ec850f21c80f8e0",
        "IPY_MODEL_1c5f165212d04a319574e0631050fdc3"
       ],
       "layout": "IPY_MODEL_9400c69b58884fe3b3232fafeec4ea73",
       "tabbable": null,
       "tooltip": null
      }
     },
     "abf27f01ba2f408a93980038fd0a1add": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "afa11611566f4fdbb6a8fc3f80cbed60": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b108e478fb7940f8b300092f06b298b1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b2045bd28f4a41a08d57bc5c0e102488": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b4d70a2833d34fe0a2695813fa71b701": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b87a9192055345b99d754ccd23aea4e0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c29556e3f67a49599d62b5f86a45cdbd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c5483f569fbd43f2bfba5c0e28f8876c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c67c57634af04ecfa7d48bcc6242e467": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cb9b7d6cd49148b1bb3fe0fa96c66b80": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a47946045a4b48f6b39d58c8a32dd563",
        "IPY_MODEL_70b0e4c3089d41d68a510ce3db02f03f",
        "IPY_MODEL_5a8e936d1f4241019e3fe85c59864bbd"
       ],
       "layout": "IPY_MODEL_35cdaec1e03d4f2783e6da8038d7c282",
       "tabbable": null,
       "tooltip": null
      }
     },
     "cfa0e8531f434c7eab6b9ec8f210e666": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0cca5247315b479abef8553278c4c9c5",
       "max": 291.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d3ce8f8535d347c99d8063f0461f4183",
       "tabbable": null,
       "tooltip": null,
       "value": 291.0
      }
     },
     "d3ce8f8535d347c99d8063f0461f4183": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e0cabd123c3549888602af9c61a50570": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e4a347152f0f4966a77d2c650dea93c8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e6e092ce61cd4642a751127d73aaf930": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e937620b46eb4287b4cd748535cd054c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_0b66a576c30f4cfc9f45440d641e1c2b",
        "IPY_MODEL_cfa0e8531f434c7eab6b9ec8f210e666",
        "IPY_MODEL_f9e9ac73b2944587b3fae25ac81738f0"
       ],
       "layout": "IPY_MODEL_048471339b084a8bb26100cb00fef66f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ef38172d456841998a0b107295660106": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f0aa733027534e01a0a4dd59cb7b333a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9b290a0a9f7e478f82f3b83d8783f563",
       "placeholder": "​",
       "style": "IPY_MODEL_f1026460dda74ffb867a60c42a17241d",
       "tabbable": null,
       "tooltip": null,
       "value": " 380M/380M [00:02&lt;00:00, 204MB/s]"
      }
     },
     "f1026460dda74ffb867a60c42a17241d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f697490077c144218459499c86ebc728": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_56ea8948595c4caf85be2e2ac4e2797a",
        "IPY_MODEL_88d521de1f0e44d7a4f9406ad038bfae",
        "IPY_MODEL_63036e0d64da423b8ad3770ad3ea1394"
       ],
       "layout": "IPY_MODEL_2ed85ad380684e3286944c70e88bab10",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f977627d9fd74c30a503c3e9eeb937f4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f9e9ac73b2944587b3fae25ac81738f0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6e186beb9f54401e81cb3d7e282d4bc8",
       "placeholder": "​",
       "style": "IPY_MODEL_9dd73cc067bf4991b0a1ac9f1fbad991",
       "tabbable": null,
       "tooltip": null,
       "value": " 291/291 [00:00&lt;00:00, 38.4kB/s]"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
