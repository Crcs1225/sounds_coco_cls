{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eabec2db",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-27T02:14:57.256666Z",
     "iopub.status.busy": "2025-09-27T02:14:57.256403Z",
     "iopub.status.idle": "2025-09-27T02:14:59.507195Z",
     "shell.execute_reply": "2025-09-27T02:14:59.505920Z"
    },
    "papermill": {
     "duration": 2.25794,
     "end_time": "2025-09-27T02:14:59.508636",
     "exception": false,
     "start_time": "2025-09-27T02:14:57.250696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog57.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog60.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog43.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog64.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog41.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog151(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog80.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog85.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog71.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog40.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog56.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog150(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog66.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog73.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog86.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog38.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog79.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog146(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog149(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog143(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog44.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog75.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog55.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog152(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog83.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog76.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog61.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog69.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog148(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog53.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog39.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog145(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog68.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog59.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog70.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog62.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog82.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog67.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog147(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog58.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog54.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog63.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog52.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog45.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog16.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog144(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog65.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog78.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog77.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog74.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog42.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog81.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog84.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog72.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog87.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin51.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin38.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin58.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin65.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin62.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin50.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin41.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin83.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin86.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin44.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin69.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin75.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin39.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin61.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin80.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin81.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin85.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin42.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin40.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin52.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin84.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin70.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin46.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin55.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin78.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin66.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin72.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin56.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin60.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin57.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin48.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin79.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin54.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin68.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin49.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin71.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin59.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin87.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin74.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin43.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin16.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin45.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin67.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin64.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin73.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin53.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin77.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin63.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin76.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin47.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin82.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad16.wav\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog22.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/6.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog15.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/76.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog27.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/5.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/79678.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/8.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/sads.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/534.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog1.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog20.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/ghh.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/gfhgf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/vv.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/09f0c820-ede2-479b-b1bc-0238ac8f84ff.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/898ab476-784a-4bbe-9c32-fda35d598ccf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog6.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog14.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/9.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog29.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/aw.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/1.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/asd.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/saw.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog30.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog12.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/7.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog3.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog8.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog18.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/7685678.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog24.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog28.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog16.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog7.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/hdh.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/12312.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/6233ed92-50ea-4950-83b6-63352061fa42.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/fgf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog11.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog13.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog17.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog4.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog10.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/Coconut.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/8721a724-fea1-4caf-bdf0-dcfe884b726a.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/qe.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog2.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog5.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/4.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog23.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog19.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog9.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/3.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog21.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog25.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/34625.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog26.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/2.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin21.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/6.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (2).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin29.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin16.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin11.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin1.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin10.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/5676.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (9).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin27.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin3.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/1312.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin15.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/ghdg.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (6).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin26.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin25.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (7).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/98667.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/23432.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin14.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (8).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin22.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (6).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin17.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin9.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin19.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin12.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin20.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin24.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin18.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin5.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/12.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin2.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin28.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/4234.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/4.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (7).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin4.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/sdfdsf.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin8.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin30.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (2).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin13.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/gfhfh.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin7.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin6.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/2.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin23.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad18.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/images (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad1.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/fresh-young-coconut-fruits-on-260nw-2556716423.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad19.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad24.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/images (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad23.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad13.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad8.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad20.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad12.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/istockphoto-1016116102-612x612.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad21.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad25.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad7.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad16.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad14.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad25.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad19.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad20.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad11.jpeg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad2.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad3.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad11.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/channels4_profile.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad26.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad5.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad17.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad23.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad28.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/images (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/light-green-coconut-water-587.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/green-coconut-kefir-812x609.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/young-coconuts-softer-water-flesh-260nw-2634943223.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad13.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad10.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad22.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad29.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad27.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad30.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad4.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad17.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/istockphoto-481670054-612x612.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/dsf.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/closeup-pile-fresh-green-yellow-260nw-2607704223.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad14.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad27.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/images (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/5gxmcuydcyd.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad15.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad22.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/s-l1200.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/coconut-tropical-fruit-hard-shell-260nw-2623243531.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad9.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad28.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad16.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad6.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad26.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/young-coconut-2.jpg\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "52d76845",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:14:59.519414Z",
     "iopub.status.busy": "2025-09-27T02:14:59.519112Z",
     "iopub.status.idle": "2025-09-27T02:24:21.429649Z",
     "shell.execute_reply": "2025-09-27T02:24:21.428645Z"
    },
    "papermill": {
     "duration": 561.917163,
     "end_time": "2025-09-27T02:24:21.431151",
     "exception": false,
     "start_time": "2025-09-27T02:14:59.513988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m40.1/40.1 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.9/60.9 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m7.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.9/89.9 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m39.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m64.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m67.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m70.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m88.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m91.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m61.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m73.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "  \r\n",
      "  \u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\r\n",
      "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "  \u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "  \r\n",
      "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n",
      "  Installing build dependencies ... \u001b[?25l\u001b[?25herror\r\n",
      "\u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "\r\n",
      "\u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\r\n",
      "\u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "\u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "\r\n",
      "\u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n"
     ]
    }
   ],
   "source": [
    "!pip -q install torch torchaudio transformers datasets accelerate soundfile librosa audiomentations --upgrade\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "290f7e10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:24:21.445654Z",
     "iopub.status.busy": "2025-09-27T02:24:21.445409Z",
     "iopub.status.idle": "2025-09-27T02:25:37.604126Z",
     "shell.execute_reply": "2025-09-27T02:25:37.603233Z"
    },
    "papermill": {
     "duration": 76.167402,
     "end_time": "2025-09-27T02:25:37.605377",
     "exception": false,
     "start_time": "2025-09-27T02:24:21.437975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/bin/bash: line 1: conda: command not found\r\n",
      "/bin/bash: line 1: conda: command not found\r\n",
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.52.4)\r\n",
      "Collecting transformers\r\n",
      "  Using cached transformers-4.56.2-py3-none-any.whl.metadata (40 kB)\r\n",
      "Requirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (3.6.0)\r\n",
      "Collecting datasets\r\n",
      "  Using cached datasets-4.1.1-py3-none-any.whl.metadata (18 kB)\r\n",
      "Requirement already satisfied: accelerate in /usr/local/lib/python3.11/dist-packages (1.8.1)\r\n",
      "Collecting accelerate\r\n",
      "  Using cached accelerate-1.10.1-py3-none-any.whl.metadata (19 kB)\r\n",
      "Requirement already satisfied: soundfile in /usr/local/lib/python3.11/dist-packages (0.13.1)\r\n",
      "Collecting audiomentations\r\n",
      "  Using cached audiomentations-0.43.1-py3-none-any.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\r\n",
      "Collecting huggingface-hub<1.0,>=0.34.0 (from transformers)\r\n",
      "  Using cached huggingface_hub-0.35.1-py3-none-any.whl.metadata (14 kB)\r\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (25.0)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\r\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\r\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.4)\r\n",
      "Collecting tokenizers<=0.23.0,>=0.22.0 (from transformers)\r\n",
      "  Using cached tokenizers-0.22.1-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)\r\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\r\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\r\n",
      "Collecting pyarrow>=21.0.0 (from datasets)\r\n",
      "  Using cached pyarrow-21.0.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (3.3 kB)\r\n",
      "Requirement already satisfied: dill<0.4.1,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.3.8)\r\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.3)\r\n",
      "Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets) (3.5.0)\r\n",
      "Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.70.16)\r\n",
      "Requirement already satisfied: fsspec<=2025.9.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (2025.5.1)\r\n",
      "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from accelerate) (7.0.0)\r\n",
      "Requirement already satisfied: torch>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from accelerate) (2.6.0+cu124)\r\n",
      "Requirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.11/dist-packages (from soundfile) (1.17.1)\r\n",
      "Collecting numpy-minmax<1,>=0.3.0 (from audiomentations)\r\n",
      "  Using cached numpy_minmax-0.5.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.0 kB)\r\n",
      "Collecting numpy-rms<1,>=0.4.2 (from audiomentations)\r\n",
      "  Using cached numpy_rms-0.6.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.5 kB)\r\n",
      "Requirement already satisfied: librosa!=0.10.0,<0.12.0,>=0.8.0 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (0.11.0)\r\n",
      "Collecting python-stretch<1,>=0.3.1 (from audiomentations)\r\n",
      "  Using cached python_stretch-0.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.7 kB)\r\n",
      "Requirement already satisfied: scipy<2,>=1.4 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (1.15.3)\r\n",
      "Requirement already satisfied: soxr<1.0.0,>=0.3.2 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (0.5.0.post1)\r\n",
      "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.0->soundfile) (2.22)\r\n",
      "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (3.12.13)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (4.14.0)\r\n",
      "Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (1.1.5)\r\n",
      "Requirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (3.0.1)\r\n",
      "Requirement already satisfied: numba>=0.51.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.60.0)\r\n",
      "Requirement already satisfied: scikit-learn>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.2.2)\r\n",
      "Requirement already satisfied: joblib>=1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.5.1)\r\n",
      "Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (4.4.2)\r\n",
      "Requirement already satisfied: pooch>=1.1 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.8.2)\r\n",
      "Requirement already satisfied: lazy_loader>=0.1 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.4)\r\n",
      "Requirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.1.1)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2025.2.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2022.2.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2.4.1)\r\n",
      "Collecting numpy>=1.17 (from transformers)\r\n",
      "  Downloading numpy-2.3.3-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (62 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.1/62.1 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hRequirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.5.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.6.15)\r\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.5)\r\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.1.6)\r\n",
      "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-curand-cu12==10.3.5.147 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (0.6.2)\r\n",
      "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (2.21.5)\r\n",
      "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (12.4.127)\r\n",
      "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.2.0)\r\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (1.13.1)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=2.0.0->accelerate) (1.3.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\r\n",
      "Requirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (2.6.1)\r\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.3.2)\r\n",
      "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (25.3.0)\r\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.7.0)\r\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (6.6.3)\r\n",
      "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (0.3.2)\r\n",
      "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.20.1)\r\n",
      "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.51.0->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.43.0)\r\n",
      "Collecting numpy>=1.17 (from transformers)\r\n",
      "  Using cached numpy-2.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\r\n",
      "Requirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from pooch>=1.1->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (4.3.8)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.1.0->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (3.6.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=2.0.0->accelerate) (3.0.2)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->transformers) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->transformers) (2022.2.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->transformers) (1.4.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->transformers) (2024.2.0)\r\n",
      "INFO: pip is looking at multiple versions of mkl-fft to determine which version is compatible with other requirements. This could take a while.\r\n",
      "Collecting mkl_fft (from numpy>=1.17->transformers)\r\n",
      "  Using cached mkl_fft-2.0.0-22-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (7.1 kB)\r\n",
      "  Using cached mkl_fft-1.3.14-0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.8 kB)\r\n",
      "  Using cached mkl_fft-1.3.13-0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.8 kB)\r\n",
      "  Using cached mkl_fft-1.3.11-81-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.4 kB)\r\n",
      "Collecting scikit-learn>=1.1.0 (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations)\r\n",
      "  Downloading scikit_learn-1.7.2-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is still looking at multiple versions of mkl-fft to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.7.1-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\r\n",
      "  Downloading scikit_learn-1.7.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (17 kB)\r\n",
      "  Downloading scikit_learn-1.6.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "  Downloading scikit_learn-1.6.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "  Downloading scikit_learn-1.5.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\r\n",
      "  Downloading scikit_learn-1.5.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\r\n",
      "  Downloading scikit_learn-1.5.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.4.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.4.1.post1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is looking at multiple versions of scikit-learn to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.4.0-1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is still looking at multiple versions of scikit-learn to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.2.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.2.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\r\n",
      "  Downloading scikit_learn-1.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.1.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (10 kB)\r\n",
      "  Downloading scikit-learn-1.1.2.tar.gz (7.0 MB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.0/7.0 MB\u001b[0m \u001b[31m17.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "  \r\n",
      "  \u001b[31m×\u001b[0m \u001b[32mPreparing metadata \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mpyproject.toml\u001b[0m\u001b[1;32m)\u001b[0m did not run successfully.\r\n",
      "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "  \u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "  \r\n",
      "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25herror\r\n",
      "\u001b[1;31merror\u001b[0m: \u001b[1mmetadata-generation-failed\u001b[0m\r\n",
      "\r\n",
      "\u001b[31m×\u001b[0m Encountered error while generating package metadata.\r\n",
      "\u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "\r\n",
      "\u001b[1;35mnote\u001b[0m: This is an issue with the package mentioned above, not pip.\r\n",
      "\u001b[1;36mhint\u001b[0m: See above for details.\r\n"
     ]
    }
   ],
   "source": [
    "# If you're using conda, try:\n",
    "!conda install -c pytorch torch torchaudio -y\n",
    "!conda install -c conda-forge librosa -y\n",
    "!pip install transformers datasets accelerate soundfile audiomentations --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff7874d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:25:37.626202Z",
     "iopub.status.busy": "2025-09-27T02:25:37.625653Z",
     "iopub.status.idle": "2025-09-27T02:26:07.154842Z",
     "shell.execute_reply": "2025-09-27T02:26:07.153926Z"
    },
    "papermill": {
     "duration": 29.541269,
     "end_time": "2025-09-27T02:26:07.156559",
     "exception": false,
     "start_time": "2025-09-27T02:25:37.615290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-27 02:25:54.422409: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1758939954.656775      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1758939954.722206      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import random\n",
    "import math\n",
    "import json\n",
    "from pathlib import Path\n",
    "from typing import List, Tuple, Dict\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import librosa\n",
    "import soundfile as sf\n",
    "import torch\n",
    "import torchaudio\n",
    "from torch import nn\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchaudio.transforms import Resample\n",
    "from transformers import Wav2Vec2FeatureExtractor, Wav2Vec2ForSequenceClassification\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2cdb2a88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:26:07.181225Z",
     "iopub.status.busy": "2025-09-27T02:26:07.180704Z",
     "iopub.status.idle": "2025-09-27T02:26:07.189922Z",
     "shell.execute_reply": "2025-09-27T02:26:07.189311Z"
    },
    "papermill": {
     "duration": 0.022615,
     "end_time": "2025-09-27T02:26:07.191139",
     "exception": false,
     "start_time": "2025-09-27T02:26:07.168524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Reproducibility\n",
    "def set_seed(seed=42):\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    torch.cuda.manual_seed_all(seed)\n",
    "\n",
    "set_seed(42)\n",
    "\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "SR = 16000  # Wav2Vec2 expects 16kHz mono\n",
    "TARGET_SECONDS = 1.5\n",
    "TARGET_SAMPLES = int(SR * TARGET_SECONDS)\n",
    "DATA_DIR = Path(\"/kaggle/input/coco-sound/sounds dataset\") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b8824d9",
   "metadata": {
    "papermill": {
     "duration": 0.011055,
     "end_time": "2025-09-27T02:26:07.213742",
     "exception": false,
     "start_time": "2025-09-27T02:26:07.202687",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data and exploratory analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bac8ac6f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:26:07.237563Z",
     "iopub.status.busy": "2025-09-27T02:26:07.237318Z",
     "iopub.status.idle": "2025-09-27T02:26:07.280498Z",
     "shell.execute_reply": "2025-09-27T02:26:07.279690Z"
    },
    "papermill": {
     "duration": 0.056498,
     "end_time": "2025-09-27T02:26:07.281652",
     "exception": false,
     "start_time": "2025-09-27T02:26:07.225154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total files: 554\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>path</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/kaggle/input/coco-sound/sounds dataset/MALAKA...</td>\n",
       "      <td>MALAKANIN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                path      label\n",
       "0  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "1  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "2  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "3  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN\n",
       "4  /kaggle/input/coco-sound/sounds dataset/MALAKA...  MALAKANIN"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dataset structure loading\n",
    "# Expecting: DATA_DIR / class_a / *.wav, DATA_DIR / class_b / *.wav, DATA_DIR / class_c / *.wav\n",
    "def list_audio_files(root: Path) -> pd.DataFrame:\n",
    "    rows = []\n",
    "    for cls in sorted([d for d in root.iterdir() if d.is_dir()]):\n",
    "        for wav in cls.glob(\"*.wav\"):\n",
    "            rows.append({\"path\": str(wav), \"label\": cls.name})\n",
    "    return pd.DataFrame(rows)\n",
    "\n",
    "df = list_audio_files(DATA_DIR)\n",
    "print(\"Total files:\", len(df))\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a6284b42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:26:07.305083Z",
     "iopub.status.busy": "2025-09-27T02:26:07.304787Z",
     "iopub.status.idle": "2025-09-27T02:26:07.532586Z",
     "shell.execute_reply": "2025-09-27T02:26:07.531704Z"
    },
    "papermill": {
     "duration": 0.241261,
     "end_time": "2025-09-27T02:26:07.534051",
     "exception": false,
     "start_time": "2025-09-27T02:26:07.292790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Class distribution\n",
    "plt.figure(figsize=(6,4))\n",
    "sns.countplot(y=\"label\", data=df, order=df[\"label\"].value_counts().index)\n",
    "plt.title(\"Class counts\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c0b1dea0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:26:07.558977Z",
     "iopub.status.busy": "2025-09-27T02:26:07.558681Z",
     "iopub.status.idle": "2025-09-27T02:26:09.291971Z",
     "shell.execute_reply": "2025-09-27T02:26:09.291185Z"
    },
    "papermill": {
     "duration": 1.746827,
     "end_time": "2025-09-27T02:26:09.293229",
     "exception": false,
     "start_time": "2025-09-27T02:26:07.546402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MALAKANIN</th>\n",
       "      <td>200.0</td>\n",
       "      <td>8.469526</td>\n",
       "      <td>1.209916</td>\n",
       "      <td>6.762667</td>\n",
       "      <td>7.226667</td>\n",
       "      <td>8.074667</td>\n",
       "      <td>9.516000</td>\n",
       "      <td>10.584000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALAKATAD</th>\n",
       "      <td>150.0</td>\n",
       "      <td>7.847422</td>\n",
       "      <td>0.972645</td>\n",
       "      <td>6.243265</td>\n",
       "      <td>7.105306</td>\n",
       "      <td>7.366531</td>\n",
       "      <td>8.736508</td>\n",
       "      <td>10.472200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MALAUHOG</th>\n",
       "      <td>204.0</td>\n",
       "      <td>8.789975</td>\n",
       "      <td>0.917593</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>8.165333</td>\n",
       "      <td>9.009342</td>\n",
       "      <td>9.404082</td>\n",
       "      <td>10.611519</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           count      mean       std       min       25%       50%       75%  \\\n",
       "label                                                                          \n",
       "MALAKANIN  200.0  8.469526  1.209916  6.762667  7.226667  8.074667  9.516000   \n",
       "MALAKATAD  150.0  7.847422  0.972645  6.243265  7.105306  7.366531  8.736508   \n",
       "MALAUHOG   204.0  8.789975  0.917593  6.400000  8.165333  9.009342  9.404082   \n",
       "\n",
       "                 max  \n",
       "label                 \n",
       "MALAKANIN  10.584000  \n",
       "MALAKATAD  10.472200  \n",
       "MALAUHOG   10.611519  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Duration statistics\n",
    "def get_duration(path):\n",
    "    info = sf.info(path)\n",
    "    return info.duration\n",
    "\n",
    "df[\"duration_s\"] = df[\"path\"].apply(get_duration)\n",
    "df.groupby(\"label\")[\"duration_s\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e9770832",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:26:09.319988Z",
     "iopub.status.busy": "2025-09-27T02:26:09.319686Z",
     "iopub.status.idle": "2025-09-27T02:26:09.566424Z",
     "shell.execute_reply": "2025-09-27T02:26:09.565580Z"
    },
    "papermill": {
     "duration": 0.261065,
     "end_time": "2025-09-27T02:26:09.567573",
     "exception": false,
     "start_time": "2025-09-27T02:26:09.306508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "sns.histplot(df[\"duration_s\"], bins=30, kde=True)\n",
    "plt.title(\"Audio duration distribution (seconds)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3b707efa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:26:09.592146Z",
     "iopub.status.busy": "2025-09-27T02:26:09.591919Z",
     "iopub.status.idle": "2025-09-27T02:27:52.339101Z",
     "shell.execute_reply": "2025-09-27T02:27:52.338275Z"
    },
    "papermill": {
     "duration": 102.820659,
     "end_time": "2025-09-27T02:27:52.400223",
     "exception": false,
     "start_time": "2025-09-27T02:26:09.579564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Quick waveform visualization - CORRECTED VERSION\n",
    "def plot_waveform(path, sr=SR, title=None):\n",
    "    x, file_sr = sf.read(path, always_2d=False)\n",
    "    if file_sr != sr:\n",
    "        x = librosa.resample(x, orig_sr=file_sr, target_sr=sr)  # Fixed line\n",
    "    plt.figure(figsize=(10,3))\n",
    "    plt.plot(x)\n",
    "    plt.title(title or Path(path).name)\n",
    "    plt.xlabel(\"Samples\")\n",
    "    plt.ylabel(\"Amplitude\")\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "sample_paths = df.sample(3, random_state=42)[\"path\"].tolist()\n",
    "for p in sample_paths:\n",
    "    plot_waveform(p, title=f\"Waveform: {Path(p).name}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06262111",
   "metadata": {
    "papermill": {
     "duration": 0.012498,
     "end_time": "2025-09-27T02:27:52.425275",
     "exception": false,
     "start_time": "2025-09-27T02:27:52.412777",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing and augmentation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e55c9fac",
   "metadata": {
    "papermill": {
     "duration": 0.012129,
     "end_time": "2025-09-27T02:27:52.449796",
     "exception": false,
     "start_time": "2025-09-27T02:27:52.437667",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Resample: All audio to 16 kHz mono.\n",
    "- Normalize: Per-sample RMS normalization.\n",
    "- Crop/pad: Random 1-second segments for training; center crops for validation/test.\n",
    "- Augmentations (subtle, tap-safe):\n",
    "- Time shift: Small circular shift.\n",
    "- Background noise: Low-level Gaussian or mix-of dataset ambient fragments.\n",
    "- Random gain: Mild amplitude scaling.\n",
    "- Avoid strong pitch-shift/time-stretch; taps are brief transients whose cues can be distorted.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ea0234ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:27:52.476737Z",
     "iopub.status.busy": "2025-09-27T02:27:52.475774Z",
     "iopub.status.idle": "2025-09-27T02:27:52.485939Z",
     "shell.execute_reply": "2025-09-27T02:27:52.485348Z"
    },
    "papermill": {
     "duration": 0.024659,
     "end_time": "2025-09-27T02:27:52.486992",
     "exception": false,
     "start_time": "2025-09-27T02:27:52.462333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torchaudio.transforms as T\n",
    "import numpy as np\n",
    "import soundfile as sf\n",
    "import librosa\n",
    "from transformers import Wav2Vec2FeatureExtractor\n",
    "\n",
    "# Define all your functions FIRST\n",
    "def load_audio(path, sr=SR):\n",
    "    x, file_sr = sf.read(path, always_2d=False)\n",
    "    if x.ndim > 1:  # stereo to mono\n",
    "        x = np.mean(x, axis=1)\n",
    "    if file_sr != sr:\n",
    "        x = librosa.resample(x, orig_sr=file_sr, target_sr=sr)\n",
    "    return x.astype(np.float32)\n",
    "\n",
    "def rms_normalize(x, eps=1e-8):\n",
    "    rms = np.sqrt(np.mean(x**2))\n",
    "    if rms < eps:\n",
    "        return x\n",
    "    return x / rms\n",
    "\n",
    "def crop_or_pad(x: np.ndarray, n_samples: int, mode=\"random\"):\n",
    "    if len(x) >= n_samples:\n",
    "        if mode == \"random\":\n",
    "            start = np.random.randint(0, len(x) - n_samples + 1)\n",
    "        else:\n",
    "            start = max(0, (len(x) - n_samples) // 2)\n",
    "        return x[start:start + n_samples]\n",
    "    pad_left = (n_samples - len(x)) // 2\n",
    "    pad_right = n_samples - len(x) - pad_left\n",
    "    return np.pad(x, (pad_left, pad_right), mode='constant')\n",
    "\n",
    "def time_shift(x, max_shift=0.1):\n",
    "    shift = int(max_shift * len(x) * np.random.uniform(-1, 1))\n",
    "    if shift > 0:\n",
    "        return np.concatenate([x[shift:], np.zeros(shift)])\n",
    "    elif shift < 0:\n",
    "        return np.concatenate([np.zeros(-shift), x[:shift]])\n",
    "    return x\n",
    "\n",
    "def add_gaussian_noise(x, min_amplitude=0.001, max_amplitude=0.01):\n",
    "    if np.random.random() < 0.3:\n",
    "        amplitude = np.random.uniform(min_amplitude, max_amplitude)\n",
    "        noise = np.random.normal(0, amplitude, x.shape)\n",
    "        return x + noise\n",
    "    return x\n",
    "\n",
    "def gain_augmentation(x, min_gain_db=-3.0, max_gain_db=3.0):\n",
    "    if np.random.random() < 0.3:\n",
    "        gain_db = np.random.uniform(min_gain_db, max_gain_db)\n",
    "        gain_linear = 10 ** (gain_db / 20.0)\n",
    "        return x * gain_linear\n",
    "    return x\n",
    "\n",
    "def train_augment(x):\n",
    "    x = time_shift(x, max_shift=0.1)\n",
    "    x = add_gaussian_noise(x, 0.001, 0.01)\n",
    "    x = gain_augmentation(x, -3.0, 3.0)\n",
    "    return x\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6010acac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:27:52.513095Z",
     "iopub.status.busy": "2025-09-27T02:27:52.512832Z",
     "iopub.status.idle": "2025-09-27T02:27:52.544534Z",
     "shell.execute_reply": "2025-09-27T02:27:52.543808Z"
    },
    "papermill": {
     "duration": 0.046425,
     "end_time": "2025-09-27T02:27:52.545684",
     "exception": false,
     "start_time": "2025-09-27T02:27:52.499259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(387, 83, 84, ['MALAKANIN', 'MALAKATAD', 'MALAUHOG'])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dataset class and split\n",
    "from sklearn.model_selection import StratifiedGroupKFold, train_test_split\n",
    "\n",
    "labels = sorted(df[\"label\"].unique())\n",
    "label2id = {l:i for i,l in enumerate(labels)}\n",
    "id2label = {i:l for l,i in label2id.items()}\n",
    "\n",
    "df[\"label_id\"] = df[\"label\"].map(label2id)\n",
    "\n",
    "train_df, temp_df = train_test_split(df, test_size=0.3, stratify=df[\"label_id\"], random_state=42)\n",
    "val_df, test_df = train_test_split(temp_df, test_size=0.5, stratify=temp_df[\"label_id\"], random_state=42)\n",
    "\n",
    "class AudioDataset(Dataset):\n",
    "    def __init__(self, dataframe, sr=SR, n_samples=TARGET_SAMPLES, mode=\"train\"):\n",
    "        self.df = dataframe.reset_index(drop=True)\n",
    "        self.sr = sr\n",
    "        self.n_samples = n_samples\n",
    "        self.mode = mode\n",
    "        self.feature_extractor = Wav2Vec2FeatureExtractor(\n",
    "            feature_size=1, sampling_rate=sr, padding=True, do_normalize=True, return_attention_mask=True\n",
    "        )\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        row = self.df.iloc[idx]\n",
    "        x = load_audio(row[\"path\"], sr=self.sr)\n",
    "        x = rms_normalize(x)\n",
    "        crop_mode = \"random\" if self.mode == \"train\" else \"center\"\n",
    "        x = crop_or_pad(x, self.n_samples, mode=crop_mode)\n",
    "        if self.mode == \"train\":\n",
    "            x = train_augment(x)  # Fixed: removed sample_rate parameter\n",
    "\n",
    "        inputs = self.feature_extractor(x, sampling_rate=self.sr, padding=\"do_not_pad\")\n",
    "        input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
    "        attention_mask = torch.ones_like(input_values)\n",
    "\n",
    "        return {\n",
    "            \"input_values\": input_values.squeeze(0),\n",
    "            \"attention_mask\": attention_mask.squeeze(0),\n",
    "            \"labels\": torch.tensor(row[\"label_id\"], dtype=torch.long),\n",
    "            \"path\": row[\"path\"]\n",
    "        }\n",
    "\n",
    "train_ds = AudioDataset(train_df, mode=\"train\")\n",
    "val_ds   = AudioDataset(val_df,   mode=\"val\")\n",
    "test_ds  = AudioDataset(test_df,  mode=\"test\")\n",
    "\n",
    "BATCH_SIZE = 32\n",
    "train_loader = DataLoader(train_ds, batch_size=BATCH_SIZE, shuffle=True, num_workers=2)\n",
    "val_loader   = DataLoader(val_ds, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)\n",
    "test_loader  = DataLoader(test_ds, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)\n",
    "\n",
    "len(train_ds), len(val_ds), len(test_ds), labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9cd4139d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:27:52.573957Z",
     "iopub.status.busy": "2025-09-27T02:27:52.573704Z",
     "iopub.status.idle": "2025-09-27T02:28:01.126022Z",
     "shell.execute_reply": "2025-09-27T02:28:01.125199Z"
    },
    "papermill": {
     "duration": 8.568371,
     "end_time": "2025-09-27T02:28:01.127199",
     "exception": false,
     "start_time": "2025-09-27T02:27:52.558828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 84/84 [00:01<00:00, 55.08it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Test audio files copied into test_data/\n",
      "✅ Zipped test data into test_data.zip\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import shutil\n",
    "import zipfile\n",
    "from tqdm import tqdm\n",
    "\n",
    "# Output folder for test data\n",
    "output_dir = \"test_data\"\n",
    "if os.path.exists(output_dir):\n",
    "    shutil.rmtree(output_dir)\n",
    "os.makedirs(output_dir, exist_ok=True)\n",
    "\n",
    "# Copy test files into class-based folders\n",
    "for i in tqdm(range(len(test_ds))):\n",
    "    row = test_ds.df.iloc[i]\n",
    "    filepath = row[\"path\"]\n",
    "    label = row[\"label\"]\n",
    "    \n",
    "    # Create class subfolder\n",
    "    class_dir = os.path.join(output_dir, str(label))\n",
    "    os.makedirs(class_dir, exist_ok=True)\n",
    "    \n",
    "    # Copy file\n",
    "    shutil.copy(filepath, class_dir)\n",
    "\n",
    "print(f\"✅ Test audio files copied into {output_dir}/\")\n",
    "\n",
    "# Zip the folder\n",
    "zip_filename = \"test_data.zip\"\n",
    "with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:\n",
    "    for root, _, files in os.walk(output_dir):\n",
    "        for file in files:\n",
    "            file_path = os.path.join(root, file)\n",
    "            arcname = os.path.relpath(file_path, output_dir)\n",
    "            zipf.write(file_path, arcname)\n",
    "\n",
    "print(f\"✅ Zipped test data into {zip_filename}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cddfec8",
   "metadata": {
    "papermill": {
     "duration": 0.013206,
     "end_time": "2025-09-27T02:28:01.154460",
     "exception": false,
     "start_time": "2025-09-27T02:28:01.141254",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model and training"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ace65c9d",
   "metadata": {
    "papermill": {
     "duration": 0.012835,
     "end_time": "2025-09-27T02:28:01.180360",
     "exception": false,
     "start_time": "2025-09-27T02:28:01.167525",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Base: facebook/wav2vec2-base\n",
    "- Head: New classification head with 3 outputs\n",
    "- Optimization: AdamW + linear scheduler\n",
    "- Class imbalance: Optional class weights\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2c143202",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:28:01.207597Z",
     "iopub.status.busy": "2025-09-27T02:28:01.207374Z",
     "iopub.status.idle": "2025-09-27T02:30:17.576102Z",
     "shell.execute_reply": "2025-09-27T02:30:17.575069Z"
    },
    "papermill": {
     "duration": 136.400924,
     "end_time": "2025-09-27T02:30:17.594415",
     "exception": false,
     "start_time": "2025-09-27T02:28:01.193491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dfad9ebf76a041508e3cdf387bad9303",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "preprocessor_config.json:   0%|          | 0.00/159 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5350e0dd3088442f94ee2e16cac70430",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/163 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7c2c796210964cb49fffec447ee068ac",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/transformers/configuration_utils.py:312: UserWarning: Passing `gradient_checkpointing` to a config initialization is deprecated and will be removed in v5 Transformers. Using `model.gradient_checkpointing_enable()` instead, or if you are using the `Trainer` API, pass `gradient_checkpointing=True` in your `TrainingArguments`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c89f21b25fae42b8abaf9222f6678df4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.json:   0%|          | 0.00/291 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ae0e7430a7624bbeb1b3e7e167e266dd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/85.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "26490cbd1dfd4dc8ab3c00121d39428b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "pytorch_model.bin:   0%|          | 0.00/380M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of Wav2Vec2ForSequenceClassification were not initialized from the model checkpoint at facebook/wav2vec2-base and are newly initialized: ['classifier.bias', 'classifier.weight', 'projector.bias', 'projector.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dbfa8c5711824e1f91ed7a3967bb6ad8",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/380M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 01 | train_loss=1.0618 acc=0.499 | val_loss=0.9809 acc=0.675\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 02 | train_loss=0.8850 acc=0.713 | val_loss=0.7547 acc=0.771\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 03 | train_loss=0.7069 acc=0.811 | val_loss=0.6063 acc=0.843\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 04 | train_loss=0.5724 acc=0.876 | val_loss=0.5085 acc=0.904\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 05 | train_loss=0.4709 acc=0.899 | val_loss=0.4460 acc=0.904\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 06 | train_loss=0.4455 acc=0.889 | val_loss=0.5422 acc=0.843\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 07 | train_loss=0.4187 acc=0.897 | val_loss=0.3842 acc=0.904\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 08 | train_loss=0.3460 acc=0.935 | val_loss=0.3487 acc=0.904\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 09 | train_loss=0.3224 acc=0.946 | val_loss=0.3104 acc=0.928\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 10 | train_loss=0.3026 acc=0.941 | val_loss=0.3395 acc=0.928\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import numpy as np\n",
    "from transformers import Wav2Vec2ForSequenceClassification, Wav2Vec2Processor\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "# Setup\n",
    "MODEL_NAME = \"facebook/wav2vec2-base\"\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# Load processor and model\n",
    "processor = Wav2Vec2Processor.from_pretrained(MODEL_NAME)\n",
    "model = Wav2Vec2ForSequenceClassification.from_pretrained(\n",
    "    MODEL_NAME,\n",
    "    num_labels=len(labels),\n",
    "    label2id=label2id,\n",
    "    id2label=id2label,\n",
    "    problem_type=\"single_label_classification\",\n",
    "    ignore_mismatched_sizes=True  # suppresses classifier/projector warnings\n",
    ")\n",
    "model.gradient_checkpointing_enable()\n",
    "model.to(DEVICE)\n",
    "\n",
    "# Freeze feature extractor for warmup\n",
    "for param in model.wav2vec2.feature_extractor.parameters():\n",
    "    param.requires_grad = False\n",
    "\n",
    "# Optimizer and scheduler\n",
    "# Training schedule\n",
    "WARMUP_EPOCHS = 5   # only train classifier head\n",
    "FT_EPOCHS = 5       # fine-tune encoder + head\n",
    "\n",
    "LR = 2e-5\n",
    "optimizer = torch.optim.AdamW(model.parameters(), lr=LR)\n",
    "num_training_steps = (WARMUP_EPOCHS+FT_EPOCHS) * len(train_loader)\n",
    "scheduler = torch.optim.lr_scheduler.LinearLR(optimizer, start_factor=1.0, end_factor=0.1, total_iters=num_training_steps)\n",
    "\n",
    "# Class weights\n",
    "class_counts = train_df[\"label_id\"].value_counts().sort_index().values\n",
    "class_weights = torch.tensor((class_counts.max() / class_counts), dtype=torch.float32).to(DEVICE)\n",
    "criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "\n",
    "# Training loop\n",
    "def train_one_epoch(epoch):\n",
    "    model.train()\n",
    "    total_loss, correct, total = 0.0, 0, 0\n",
    "    for batch in train_loader:\n",
    "        optimizer.zero_grad()\n",
    "        input_values = torch.tensor(np.array(batch[\"input_values\"]), dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = batch[\"attention_mask\"].to(DEVICE)\n",
    "        labels = batch[\"labels\"].to(DEVICE)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        loss = criterion(outputs.logits, labels)\n",
    "        loss.backward()\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n",
    "        optimizer.step()\n",
    "        scheduler.step()\n",
    "\n",
    "        total_loss += loss.item() * input_values.size(0)\n",
    "        preds = outputs.logits.argmax(dim=1)\n",
    "        correct += (preds == labels).sum().item()\n",
    "        total += input_values.size(0)\n",
    "\n",
    "    return total_loss / total, correct / total\n",
    "\n",
    "# Evaluation loop\n",
    "@torch.no_grad()\n",
    "def eval_one_epoch(loader):\n",
    "    model.eval()\n",
    "    total_loss, correct, total = 0.0, 0, 0\n",
    "    all_labels, all_preds = [], []\n",
    "    for batch in loader:\n",
    "        input_values = torch.tensor(np.array(batch[\"input_values\"]), dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = batch[\"attention_mask\"].to(DEVICE)\n",
    "        labels = batch[\"labels\"].to(DEVICE)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        loss = criterion(outputs.logits, labels)\n",
    "\n",
    "        total_loss += loss.item() * input_values.size(0)\n",
    "        preds = outputs.logits.argmax(dim=1)\n",
    "        correct += (preds == labels).sum().item()\n",
    "        total += input_values.size(0)\n",
    "\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "\n",
    "    return total_loss / total, correct / total, np.array(all_labels), np.array(all_preds)\n",
    "\n",
    "# Training loop\n",
    "train_losses, val_losses, val_accs, train_accs = [], [], [], []\n",
    "\n",
    "\n",
    "for epoch in range(1, WARMUP_EPOCHS + 1):\n",
    "    tr_loss, tr_acc = train_one_epoch(epoch)\n",
    "    val_loss, val_acc, y_true, y_pred = eval_one_epoch(val_loader)\n",
    "\n",
    "    train_losses.append(tr_loss)\n",
    "    val_losses.append(val_loss)\n",
    "    val_accs.append(val_acc)\n",
    "    train_accs.append(tr_acc)\n",
    "    print(f\"[Warmup] Epoch {epoch:02d} | train_loss={tr_loss:.4f} acc={tr_acc:.3f} \"\n",
    "          f\"| val_loss={val_loss:.4f} acc={val_acc:.3f}\")\n",
    "\n",
    "\n",
    "# Unfreeze feature extractor for fine-tuning\n",
    "for param in model.wav2vec2.feature_extractor.parameters():\n",
    "    param.requires_grad = True\n",
    "\n",
    "# Differential learning rates: smaller for encoder, larger for classifier\n",
    "\n",
    "optimizer = torch.optim.AdamW([\n",
    "    {\"params\": model.wav2vec2.parameters(), \"lr\": 1e-5},\n",
    "    {\"params\": model.classifier.parameters(), \"lr\": 2e-5},\n",
    "], weight_decay=0.01)\n",
    "\n",
    "for epoch in range(WARMUP_EPOCHS + 1, WARMUP_EPOCHS + FT_EPOCHS + 1):\n",
    "    tr_loss, tr_acc = train_one_epoch(epoch)\n",
    "    val_loss, val_acc, y_true, y_pred = eval_one_epoch(val_loader)\n",
    "    train_losses.append(tr_loss)\n",
    "    val_losses.append(val_loss)\n",
    "    val_accs.append(val_acc)\n",
    "    train_accs.append(tr_acc)\n",
    "    print(f\"[Warmup] Epoch {epoch:02d} | train_loss={tr_loss:.4f} acc={tr_acc:.3f} \"\n",
    "          f\"| val_loss={val_loss:.4f} acc={val_acc:.3f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfdaf85c",
   "metadata": {
    "papermill": {
     "duration": 0.015657,
     "end_time": "2025-09-27T02:30:17.626198",
     "exception": false,
     "start_time": "2025-09-27T02:30:17.610541",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Evaluation and analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5c574a3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:30:17.659171Z",
     "iopub.status.busy": "2025-09-27T02:30:17.658492Z",
     "iopub.status.idle": "2025-09-27T02:30:17.980587Z",
     "shell.execute_reply": "2025-09-27T02:30:17.979913Z"
    },
    "papermill": {
     "duration": 0.339888,
     "end_time": "2025-09-27T02:30:17.981801",
     "exception": false,
     "start_time": "2025-09-27T02:30:17.641913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Training curves\n",
    "plt.figure(figsize=(8,4))\n",
    "plt.plot(train_losses, label=\"Train loss\")\n",
    "plt.plot(val_losses, label=\"Val loss\")\n",
    "plt.title(\"Loss curves\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8,4))\n",
    "plt.plot(val_accs, label=\"Val accuracy\")\n",
    "plt.plot(train_accs, label=\"Train Accuracy\")\n",
    "plt.title(\"Validation accuracy\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3e1a07d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:30:18.018126Z",
     "iopub.status.busy": "2025-09-27T02:30:18.017517Z",
     "iopub.status.idle": "2025-09-27T02:30:19.772283Z",
     "shell.execute_reply": "2025-09-27T02:30:19.771333Z"
    },
    "papermill": {
     "duration": 1.773569,
     "end_time": "2025-09-27T02:30:19.773444",
     "exception": false,
     "start_time": "2025-09-27T02:30:17.999875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss=0.3376, Test acc=0.929\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "   MALAKANIN       0.94      1.00      0.97        30\n",
      "   MALAKATAD       1.00      0.83      0.90        23\n",
      "    MALAUHOG       0.88      0.94      0.91        31\n",
      "\n",
      "    accuracy                           0.93        84\n",
      "   macro avg       0.94      0.92      0.93        84\n",
      "weighted avg       0.93      0.93      0.93        84\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Test performance, confusion matrix, report\n",
    "test_loss, test_acc, y_true_test, y_pred_test = eval_one_epoch(test_loader)\n",
    "print(f\"Test loss={test_loss:.4f}, Test acc={test_acc:.3f}\")\n",
    "\n",
    "cm = confusion_matrix(y_true_test, y_pred_test, labels=list(range(len(labels))))\n",
    "plt.figure(figsize=(6,5))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\",\n",
    "            xticklabels=[id2label[i] for i in range(len(labels))],\n",
    "            yticklabels=[id2label[i] for i in range(len(labels))])\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"True\")\n",
    "plt.title(\"Confusion matrix (test)\")\n",
    "plt.show()\n",
    "\n",
    "print(classification_report(y_true_test, y_pred_test, target_names=[id2label[i] for i in range(len(labels))]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4bbea1d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:30:19.810860Z",
     "iopub.status.busy": "2025-09-27T02:30:19.810610Z",
     "iopub.status.idle": "2025-09-27T02:30:23.216229Z",
     "shell.execute_reply": "2025-09-27T02:30:23.215174Z"
    },
    "papermill": {
     "duration": 3.425808,
     "end_time": "2025-09-27T02:30:23.217438",
     "exception": false,
     "start_time": "2025-09-27T02:30:19.791630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pydub in /usr/local/lib/python3.11/dist-packages (0.25.1)\r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2348996914.py:40: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32).to(DEVICE)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MALAKANIN [0.8623419  0.05846433 0.07919376]\n"
     ]
    }
   ],
   "source": [
    "!pip install pydub\n",
    "\n",
    "from pydub import AudioSegment\n",
    "import tempfile\n",
    "import os\n",
    "\n",
    "def convert_aac_to_wav(aac_path):\n",
    "    \"\"\"Convert AAC file to temporary WAV file\"\"\"\n",
    "    # Load AAC file\n",
    "    audio = AudioSegment.from_file(aac_path, format=\"aac\")\n",
    "    \n",
    "    # Create temporary WAV file\n",
    "    temp_wav = tempfile.NamedTemporaryFile(suffix='.wav', delete=False)\n",
    "    audio.export(temp_wav.name, format=\"wav\")\n",
    "    return temp_wav.name\n",
    "\n",
    "@torch.no_grad()\n",
    "def predict_file(path: str, n_crops=10):\n",
    "    model.eval()\n",
    "    \n",
    "    # Check if file is AAC and convert if needed\n",
    "    if path.lower().endswith('.aac'):\n",
    "        wav_path = convert_aac_to_wav(path)\n",
    "        try:\n",
    "            x = load_audio(wav_path, sr=SR)\n",
    "        finally:\n",
    "            # Clean up temporary file\n",
    "            os.unlink(wav_path)\n",
    "    else:\n",
    "        x = load_audio(path, sr=SR)\n",
    "        \n",
    "    x = rms_normalize(x)\n",
    "    # Rest of your function remains the same...\n",
    "    probs_list = []\n",
    "    for _ in range(n_crops):\n",
    "        crop = crop_or_pad(x, TARGET_SAMPLES, mode=\"random\")\n",
    "        inputs = Wav2Vec2FeatureExtractor(\n",
    "            feature_size=1, sampling_rate=SR, padding=True, do_normalize=True, return_attention_mask=True\n",
    "        )(crop, sampling_rate=SR, padding=\"do_not_pad\")\n",
    "        input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = torch.ones_like(input_values)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        probs = torch.softmax(outputs.logits, dim=-1).cpu().numpy()[0]\n",
    "        probs_list.append(probs)\n",
    "\n",
    "    mean_probs = np.mean(np.stack(probs_list, axis=0), axis=0)\n",
    "    pred_id = int(np.argmax(mean_probs))\n",
    "    return id2label[pred_id], mean_probs\n",
    "\n",
    "# Example usage:\n",
    "predicted_label, probabilities = predict_file(\"/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin10.wav\")\n",
    "print(predicted_label, probabilities)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa123ea8",
   "metadata": {
    "papermill": {
     "duration": 0.017541,
     "end_time": "2025-09-27T02:30:23.253379",
     "exception": false,
     "start_time": "2025-09-27T02:30:23.235838",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Export model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c32c136f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:30:23.290111Z",
     "iopub.status.busy": "2025-09-27T02:30:23.289326Z",
     "iopub.status.idle": "2025-09-27T02:30:24.086328Z",
     "shell.execute_reply": "2025-09-27T02:30:24.085748Z"
    },
    "papermill": {
     "duration": 0.816597,
     "end_time": "2025-09-27T02:30:24.087759",
     "exception": false,
     "start_time": "2025-09-27T02:30:23.271162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SAVE_DIR = Path(\"./wav2vec2_coconut_tap_model\")\n",
    "SAVE_DIR.mkdir(exist_ok=True)\n",
    "model.save_pretrained(SAVE_DIR)\n",
    "processor.save_pretrained(SAVE_DIR)\n",
    "with open(SAVE_DIR / \"label_map.json\", \"w\") as f:\n",
    "    json.dump({\"label2id\": label2id, \"id2label\": id2label}, f, indent=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f91bdf52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-27T02:30:24.125808Z",
     "iopub.status.busy": "2025-09-27T02:30:24.125296Z",
     "iopub.status.idle": "2025-09-27T02:30:42.668693Z",
     "shell.execute_reply": "2025-09-27T02:30:42.668012Z"
    },
    "papermill": {
     "duration": 18.562855,
     "end_time": "2025-09-27T02:30:42.669886",
     "exception": false,
     "start_time": "2025-09-27T02:30:24.107031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/kaggle/working/wav2vec2_coconut_tap_model.zip'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import shutil\n",
    "\n",
    "shutil.make_archive(\"wav2vec2_coconut_tap_model\", 'zip', SAVE_DIR)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41894d87",
   "metadata": {
    "papermill": {
     "duration": 0.018554,
     "end_time": "2025-09-27T02:30:42.706984",
     "exception": false,
     "start_time": "2025-09-27T02:30:42.688430",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 8194363,
     "sourceId": 12948599,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8273337,
     "sourceId": 13064297,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 952.725501,
   "end_time": "2025-09-27T02:30:45.724768",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-27T02:14:52.999267",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "014e0f6b7f264f6b9d2e87aec2f531d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_35b1c7a23fad4a1abc5c456b60ad0d8a",
       "placeholder": "​",
       "style": "IPY_MODEL_91b498b8d4e448108ef65d36093bf0f9",
       "tabbable": null,
       "tooltip": null,
       "value": "vocab.json: 100%"
      }
     },
     "040b34b594cc45b68d8e6c9dd7af18d2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "04c9e6545a56439698a3f57c211ceb26": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0555b9257f564fa39774bb4a80a8ff19": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "06091450a2404a7eaa11856eddc52a98": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_af91c55353d94185b045ad889ef3cd32",
       "placeholder": "​",
       "style": "IPY_MODEL_2f928e4b19bf4ade833a3b7b36f6e22f",
       "tabbable": null,
       "tooltip": null,
       "value": "preprocessor_config.json: 100%"
      }
     },
     "06fa243f04a64526938bc7904453d349": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "081dc2bc0f544742859deb24a8717ad3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0b479d6c088a46a19d1a10e2393394d7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e13d8702d83745c39aa829b4576dc590",
       "placeholder": "​",
       "style": "IPY_MODEL_0ea8037076c745d8aa3defc30940b16f",
       "tabbable": null,
       "tooltip": null,
       "value": " 380M/380M [00:02&lt;00:00, 443MB/s]"
      }
     },
     "0ea8037076c745d8aa3defc30940b16f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1b94118168d2433c922597328c7c5035": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1d50028e126a47bdbc339c7555f1453a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_de5d5315f2a6436eaea42f65122cb1fb",
       "max": 159.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_25cb92152a44481ebf69d216bdb243ea",
       "tabbable": null,
       "tooltip": null,
       "value": 159.0
      }
     },
     "1f46c8fa41f14a4ab1a3e6c505bd7c5f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "23ce2c1f149045c6a7c58fc8135bcead": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_91288e22d394448fa20507b66b900ff5",
       "max": 163.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_06fa243f04a64526938bc7904453d349",
       "tabbable": null,
       "tooltip": null,
       "value": 163.0
      }
     },
     "25cb92152a44481ebf69d216bdb243ea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "26490cbd1dfd4dc8ab3c00121d39428b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9e6e971fb2ac4504af119f62d0be1547",
        "IPY_MODEL_d188db6349de4867841187e27d8d9be8",
        "IPY_MODEL_0b479d6c088a46a19d1a10e2393394d7"
       ],
       "layout": "IPY_MODEL_2c356bfd75a94cf3b7b7d7a12d348a3d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2852ed1e08114cfbbf841a075b090b53": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "28e37c08735b4f5ead79074f4326e878": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2c356bfd75a94cf3b7b7d7a12d348a3d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2f928e4b19bf4ade833a3b7b36f6e22f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "35b1c7a23fad4a1abc5c456b60ad0d8a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3685ae129a8043ce8372f548795d6b2a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_081dc2bc0f544742859deb24a8717ad3",
       "max": 291.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_830564ef3b834f6592ff4d4ee3edc18d",
       "tabbable": null,
       "tooltip": null,
       "value": 291.0
      }
     },
     "36af5f85ab1a43e5a870d1f90125be5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3b7c24cc4b364bdbb0739dc676525e5e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3cac96d64a4e492bb0fc806fc71bcf01": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ddfddb3c521742a0abeccf78d771059d",
       "placeholder": "​",
       "style": "IPY_MODEL_57b9216f823848fea8784aefb46da641",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: "
      }
     },
     "41dc2d3eb63d48d58a0e13f7eacce224": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "42f8188d72f74a6f9fbe50d5cd31de19": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b5e9ea494fe64e53bc759b9514f2ddb9",
       "placeholder": "​",
       "style": "IPY_MODEL_1b94118168d2433c922597328c7c5035",
       "tabbable": null,
       "tooltip": null,
       "value": " 163/163 [00:00&lt;00:00, 24.2kB/s]"
      }
     },
     "44bcf0858d5f410eac8e5b63cdd5d5d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1f46c8fa41f14a4ab1a3e6c505bd7c5f",
       "placeholder": "​",
       "style": "IPY_MODEL_040b34b594cc45b68d8e6c9dd7af18d2",
       "tabbable": null,
       "tooltip": null,
       "value": " 85.0/85.0 [00:00&lt;00:00, 11.1kB/s]"
      }
     },
     "44f16c9b1a99431f9bc70469f6619a95": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2852ed1e08114cfbbf841a075b090b53",
       "max": 85.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c2a39fc7e6f24b53aef27bdc9978e043",
       "tabbable": null,
       "tooltip": null,
       "value": 85.0
      }
     },
     "4bb81741ae4548bd98129effbb0bb7c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7b95553ac7574e0b901175cfdac3ecfe",
       "placeholder": "​",
       "style": "IPY_MODEL_58832ab0ee1640919be7abfbd6d987c6",
       "tabbable": null,
       "tooltip": null,
       "value": " 291/291 [00:00&lt;00:00, 39.2kB/s]"
      }
     },
     "5350e0dd3088442f94ee2e16cac70430": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_767a231371064c48b9425e28ce721b04",
        "IPY_MODEL_23ce2c1f149045c6a7c58fc8135bcead",
        "IPY_MODEL_42f8188d72f74a6f9fbe50d5cd31de19"
       ],
       "layout": "IPY_MODEL_0555b9257f564fa39774bb4a80a8ff19",
       "tabbable": null,
       "tooltip": null
      }
     },
     "553a06fb6dea48dc9f47338a25732316": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "57b9216f823848fea8784aefb46da641": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "58832ab0ee1640919be7abfbd6d987c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5bed3a6a6c74411a87546bfd251708f3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "63c62f881e1a4361a8434298f28b41a8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "64d3cd8e320740959d77fb6c6290cca9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6afe6f9103f340c3bae7920acad2d11e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_553a06fb6dea48dc9f47338a25732316",
       "placeholder": "​",
       "style": "IPY_MODEL_cd3a3d0ef93e41d7ad51e6653c548c55",
       "tabbable": null,
       "tooltip": null,
       "value": "special_tokens_map.json: 100%"
      }
     },
     "73dd6d6c9257433e88639132833eabf4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "767a231371064c48b9425e28ce721b04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_36af5f85ab1a43e5a870d1f90125be5d",
       "placeholder": "​",
       "style": "IPY_MODEL_73dd6d6c9257433e88639132833eabf4",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "7b95553ac7574e0b901175cfdac3ecfe": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7c2c796210964cb49fffec447ee068ac": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3cac96d64a4e492bb0fc806fc71bcf01",
        "IPY_MODEL_c9329213b9184af79f2a0a8f54e5db28",
        "IPY_MODEL_fe176807561b4606a693081851a2eabe"
       ],
       "layout": "IPY_MODEL_3b7c24cc4b364bdbb0739dc676525e5e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7f642f9803684458bc617f228b95f78f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "830564ef3b834f6592ff4d4ee3edc18d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "884c50446f3b46b0b13c7732a22a26ad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "91288e22d394448fa20507b66b900ff5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "91b498b8d4e448108ef65d36093bf0f9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "95c4b02253164eacb9bfb834deebbbda": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9704cc239a324a20bce4d631c76b04ef": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9e20d347e8cf4d83aeec814b24a5fc1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_04c9e6545a56439698a3f57c211ceb26",
       "placeholder": "​",
       "style": "IPY_MODEL_afa4a554e8c440aca2b00c1a99c1eb41",
       "tabbable": null,
       "tooltip": null,
       "value": " 159/159 [00:00&lt;00:00, 16.6kB/s]"
      }
     },
     "9e6e971fb2ac4504af119f62d0be1547": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fd710e7e6e11470abe5336a29c29dcd9",
       "placeholder": "​",
       "style": "IPY_MODEL_a71ec333497f4501a18b5f1cf8b84cd1",
       "tabbable": null,
       "tooltip": null,
       "value": "pytorch_model.bin: 100%"
      }
     },
     "a71ec333497f4501a18b5f1cf8b84cd1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ab06cffb3aa94a4d857906ea9b2c3d67": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ae0e7430a7624bbeb1b3e7e167e266dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6afe6f9103f340c3bae7920acad2d11e",
        "IPY_MODEL_44f16c9b1a99431f9bc70469f6619a95",
        "IPY_MODEL_44bcf0858d5f410eac8e5b63cdd5d5d5"
       ],
       "layout": "IPY_MODEL_7f642f9803684458bc617f228b95f78f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "af91c55353d94185b045ad889ef3cd32": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "afa4a554e8c440aca2b00c1a99c1eb41": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b527fa5a5a204e5b9dcc67ccf75acd72": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_884c50446f3b46b0b13c7732a22a26ad",
       "max": 380204696.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ab06cffb3aa94a4d857906ea9b2c3d67",
       "tabbable": null,
       "tooltip": null,
       "value": 380204696.0
      }
     },
     "b5e9ea494fe64e53bc759b9514f2ddb9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b7ef133378954c41a5880a623e4febbe": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "be812fc555414022b84c971e6059a701": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_63c62f881e1a4361a8434298f28b41a8",
       "placeholder": "​",
       "style": "IPY_MODEL_64d3cd8e320740959d77fb6c6290cca9",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "c2a39fc7e6f24b53aef27bdc9978e043": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c4c57e4efc4842c99efde448300d139c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c89f21b25fae42b8abaf9222f6678df4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_014e0f6b7f264f6b9d2e87aec2f531d4",
        "IPY_MODEL_3685ae129a8043ce8372f548795d6b2a",
        "IPY_MODEL_4bb81741ae4548bd98129effbb0bb7c6"
       ],
       "layout": "IPY_MODEL_9704cc239a324a20bce4d631c76b04ef",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c9329213b9184af79f2a0a8f54e5db28": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f2da20c851344cdeb483065de46c9212",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_41dc2d3eb63d48d58a0e13f7eacce224",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "cd3a3d0ef93e41d7ad51e6653c548c55": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d188db6349de4867841187e27d8d9be8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c4c57e4efc4842c99efde448300d139c",
       "max": 380267417.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ff673b5f74484e84aaa634a180c71358",
       "tabbable": null,
       "tooltip": null,
       "value": 380267417.0
      }
     },
     "dbfa8c5711824e1f91ed7a3967bb6ad8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_be812fc555414022b84c971e6059a701",
        "IPY_MODEL_b527fa5a5a204e5b9dcc67ccf75acd72",
        "IPY_MODEL_e0031aa0f341400d8cc5450a430515fb"
       ],
       "layout": "IPY_MODEL_5bed3a6a6c74411a87546bfd251708f3",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ddfddb3c521742a0abeccf78d771059d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "de5d5315f2a6436eaea42f65122cb1fb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dfad9ebf76a041508e3cdf387bad9303": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_06091450a2404a7eaa11856eddc52a98",
        "IPY_MODEL_1d50028e126a47bdbc339c7555f1453a",
        "IPY_MODEL_9e20d347e8cf4d83aeec814b24a5fc1c"
       ],
       "layout": "IPY_MODEL_f39556fd516d47808648c7fe64d4a6a2",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e0031aa0f341400d8cc5450a430515fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_28e37c08735b4f5ead79074f4326e878",
       "placeholder": "​",
       "style": "IPY_MODEL_f93089d3eca141c1b77c28730f57b549",
       "tabbable": null,
       "tooltip": null,
       "value": " 380M/380M [00:01&lt;00:00, 386MB/s]"
      }
     },
     "e13d8702d83745c39aa829b4576dc590": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f2da20c851344cdeb483065de46c9212": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "f39556fd516d47808648c7fe64d4a6a2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f93089d3eca141c1b77c28730f57b549": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fd710e7e6e11470abe5336a29c29dcd9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fe176807561b4606a693081851a2eabe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b7ef133378954c41a5880a623e4febbe",
       "placeholder": "​",
       "style": "IPY_MODEL_95c4b02253164eacb9bfb834deebbbda",
       "tabbable": null,
       "tooltip": null,
       "value": " 1.84k/? [00:00&lt;00:00, 237kB/s]"
      }
     },
     "ff673b5f74484e84aaa634a180c71358": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
