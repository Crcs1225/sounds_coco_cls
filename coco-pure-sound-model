{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "46ffd9c1",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-05T13:12:05.531978Z",
     "iopub.status.busy": "2025-10-05T13:12:05.531672Z",
     "iopub.status.idle": "2025-10-05T13:12:10.729735Z",
     "shell.execute_reply": "2025-10-05T13:12:10.728628Z"
    },
    "papermill": {
     "duration": 5.206135,
     "end_time": "2025-10-05T13:12:10.731453",
     "exception": false,
     "start_time": "2025-10-05T13:12:05.525318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog128.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog57.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog60.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog123.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog156.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog2.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog27.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog105.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog43.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog99.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog64.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog10.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog129.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog3.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog41.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog151(1).wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog80.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog181.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog25.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog85.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog172.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog120.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog89.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog71.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog143.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog157.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog32.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog162.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog200.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog20.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog40.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog88.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog171.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog141.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog174.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog146.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog194.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog56.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog170.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog9.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog164.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog150(1).wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog193.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog66.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog73.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog86.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog179.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog38.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog79.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog146(1).wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog149(1).wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog97.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog125.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog13.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog152.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog143(1).wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog44.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog26.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog30.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog93.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog7.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog75.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog147.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog168.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog180.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog135.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog55.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog4.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog155.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog12.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog90.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog199.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog152(1).wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog83.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog112.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog76.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog197.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog61.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog35.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog133.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog11.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog154.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog188.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog119.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog109.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog33.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog142.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog69.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog148(1).wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog98.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog108.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog113.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog191.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog53.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog184.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog92.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog39.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog145(1).wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog68.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog121.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog127.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog160.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog59.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog8.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog177.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog107.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog185.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog95.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog94.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog70.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog151.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog62.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog82.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog24.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog67.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog102.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog147(1).wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog139.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog91.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog140.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog137.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog122.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog118.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog104.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog192.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog130.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog114.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog58.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog165.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog23.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog96.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog31.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog54.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog1.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog124.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog144.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog187.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog37.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog15.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog176.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog132.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog103.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog126.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog63.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog150.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog106.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog18.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog14.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog158.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog178.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog6.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog153.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog117.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog17.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog195.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog52.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog189.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog149.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog115.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog116.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog196.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog29.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog34.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog45.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog16.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog144(1).wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog111.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog190.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog19.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog28.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog163.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog134.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog65.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog78.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog100.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog166.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog169.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog173.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog136.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog77.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog167.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog138.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog74.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog22.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog182.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog101.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog42.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog186.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog198.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog159.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog21.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog161.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog131.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog5.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog145.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog81.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog84.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog72.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog148.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog110.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog36.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog87.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog175.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malauhog/malauhog183.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin51.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin33.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin38.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin58.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin65.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin62.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin183.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin7.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin96.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin50.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin41.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin184.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin91.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin139.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin161.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin149.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin125.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin83.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin86.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin164.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin105.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin26.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin44.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin170.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin179.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin129.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin123.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin10.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin69.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin75.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin39.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin61.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin25.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin32.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin167.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin80.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin126.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin136.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin112.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin18.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin9.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin108.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin17.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin182.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin189.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin158.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin174.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin119.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin90.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin110.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin81.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin145.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin178.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin85.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin24.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin89.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin42.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin40.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin148.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin12.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin104.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin52.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin106.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin196.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin194.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin84.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin13.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin70.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin46.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin121.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin103.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin55.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin113.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin130.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin147.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin175.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin137.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin193.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin169.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin200.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin36.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin78.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin124.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin156.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin20.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin5.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin128.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin66.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin98.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin99.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin28.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin102.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin195.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin37.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin135.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin142.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin72.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin132.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin56.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin19.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin143.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin131.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin60.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin95.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin15.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin14.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin173.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin57.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin48.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin21.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin138.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin116.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin79.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin54.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin181.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin197.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin185.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin68.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin140.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin109.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin49.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin29.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin117.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin111.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin31.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin150.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin1.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin187.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin162.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin94.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin71.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin192.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin59.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin163.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin160.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin87.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin30.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin6.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin144.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin74.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin141.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin43.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin153.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin172.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin198.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin16.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin146.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin34.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin188.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin93.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin115.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin45.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin88.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin67.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin134.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin120.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin151.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin159.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin122.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin92.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin114.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin101.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin2.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin64.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin4.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin73.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin53.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin77.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin35.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin63.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin22.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin76.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin118.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin11.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin107.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin180.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin190.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin166.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin152.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin3.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin100.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin47.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin97.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin186.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin154.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin157.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin133.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin176.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin177.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin171.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin27.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin199.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin168.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin191.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin165.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin155.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin23.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin82.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin127.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakanin/malakanin8.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad139.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad126.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad20.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad189.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad116.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad128.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad104.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad174.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad197.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad14.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad100.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad90.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad7.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad2.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad97.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad158.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad19.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad25.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad88.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad98.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad153.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad154.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad196.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad22.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad31.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad159.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad27.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad112.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad26.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad163.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad167.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad121.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad111.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad187.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad136.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad180.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad15.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad120.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad96.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad134.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad186.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad103.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad199.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad184.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad35.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad9.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad32.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad132.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad146.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad200.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad107.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad140.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad194.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad198.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad119.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad181.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad141.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad122.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad105.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad191.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad157.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad28.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad160.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad150.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad183.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad1.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad8.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad185.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad110.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad115.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad92.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad123.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad144.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad130.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad106.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad169.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad148.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad99.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad124.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad127.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad173.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad21.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad117.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad145.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad171.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad165.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad195.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad101.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad152.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad113.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad129.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad151.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad161.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad137.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad18.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad91.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad147.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad109.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad3.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad164.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad4.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad179.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad30.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad162.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad108.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad24.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad125.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad176.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad190.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad168.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad166.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad193.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad178.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad37.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad177.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad36.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad156.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad142.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad29.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad34.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad192.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad89.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad135.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad175.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad102.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad17.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad138.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad6.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad12.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad94.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad133.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad118.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad170.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad114.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad95.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad182.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad188.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad172.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad23.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad33.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad13.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad93.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad155.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad11.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad10.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad5.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad149.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad143.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad131.wav\n",
      "/kaggle/input/s-coco-dataset/sounds dataset/malakatad/malakatad16.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog57.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog60.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog43.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog64.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog41.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog151(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog80.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog85.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog71.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog40.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog56.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog150(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog66.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog73.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog86.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog38.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog79.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog146(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog149(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog143(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog44.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog75.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog55.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog152(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog83.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog76.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog61.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog69.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog148(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog53.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog39.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog145(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog68.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog59.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog70.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog62.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog82.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog67.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog147(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog58.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog54.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog63.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog52.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog45.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog16.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog144(1).wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog65.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog78.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog77.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog74.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog42.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog81.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog84.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog72.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog87.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAUHOG/malauhog183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin51.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin38.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin58.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin65.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin62.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin50.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin41.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin83.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin86.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin44.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin69.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin75.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin39.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin61.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin80.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin81.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin85.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin42.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin40.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin52.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin84.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin70.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin46.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin55.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin78.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin66.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin72.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin56.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin60.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin57.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin48.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin79.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin54.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin68.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin49.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin71.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin59.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin87.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin74.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin43.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin16.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin45.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin67.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin64.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin73.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin53.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin77.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin63.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin76.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin47.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin82.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad139.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad126.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad20.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad189.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad116.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad128.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad104.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad174.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad197.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad14.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad100.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad90.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad7.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad2.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad97.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad158.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad19.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad25.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad88.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad98.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad153.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad154.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad196.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad22.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad31.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad159.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad27.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad112.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad26.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad163.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad167.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad121.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad111.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad187.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad136.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad180.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad15.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad120.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad96.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad134.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad186.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad103.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad199.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad184.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad35.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad9.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad32.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad132.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad146.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad200.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad107.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad140.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad194.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad198.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad119.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad181.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad141.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad122.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad105.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad191.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad157.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad28.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad160.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad150.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad183.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad1.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad8.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad185.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad110.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad115.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad92.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad123.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad144.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad130.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad106.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad169.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad148.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad99.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad124.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad127.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad173.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad21.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad117.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad145.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad171.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad165.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad195.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad101.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad152.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad113.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad129.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad151.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad161.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad137.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad18.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad91.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad147.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad109.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad3.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad164.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad4.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad179.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad30.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad162.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad108.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad24.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad125.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad176.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad190.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad168.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad166.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad193.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad178.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad37.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad177.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad36.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad156.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad142.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad29.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad34.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad192.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad89.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad135.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad175.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad102.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad17.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad138.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad6.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad12.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad94.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad133.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad118.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad170.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad114.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad95.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad182.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad188.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad172.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad23.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad33.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad13.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad93.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad155.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad11.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad10.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad5.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad149.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad143.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad131.wav\n",
      "/kaggle/input/coco-sound/sounds dataset/MALAKATAD/malakatad16.wav\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog22.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/6.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog15.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/76.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog27.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/5.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/79678.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/8.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/sads.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/534.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog1.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog20.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/ghh.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/gfhgf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/vv.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/09f0c820-ede2-479b-b1bc-0238ac8f84ff.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/898ab476-784a-4bbe-9c32-fda35d598ccf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog6.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog14.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/9.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog29.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/aw.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/1.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/asd.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/saw.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog30.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog12.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/7.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog3.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog8.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog18.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/7685678.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog24.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog28.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog16.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog7.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/hdh.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/12312.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/6233ed92-50ea-4950-83b6-63352061fa42.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/fgf.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog11.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog13.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog17.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog4.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog10.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/Coconut.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/8721a724-fea1-4caf-bdf0-dcfe884b726a.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/qe.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog2.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog5.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/4.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog23.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog19.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog9.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/3.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog21.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog25.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/34625.jpg\n",
      "/kaggle/input/last-test-data/test/malauhog/malauhog26.aac\n",
      "/kaggle/input/last-test-data/test/malauhog/2.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin21.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/6.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (2).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin29.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin16.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin11.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin1.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin10.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/5676.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (9).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin27.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin3.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/1312.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin15.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/ghdg.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (6).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin26.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin25.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (7).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/98667.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/23432.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin14.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (8).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin22.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (6).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin17.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin9.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin19.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin12.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin20.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin24.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin18.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin5.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/12.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin2.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin28.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/4234.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/4.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/images (7).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin4.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/sdfdsf.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin8.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin30.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/download (2).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin13.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/gfhfh.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/download.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin7.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin6.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/2.jpg\n",
      "/kaggle/input/last-test-data/test/malakanin/malakanin23.aac\n",
      "/kaggle/input/last-test-data/test/malakanin/images.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad18.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/images (4).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad1.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/fresh-young-coconut-fruits-on-260nw-2556716423.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad19.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad24.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/images (5).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad23.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad13.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad8.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad20.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad12.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/istockphoto-1016116102-612x612.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad21.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad25.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad7.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad16.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad14.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad25.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad19.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad20.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad11.jpeg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad2.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad3.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad11.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/channels4_profile.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad26.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad5.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad17.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad23.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad28.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/images (1).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/light-green-coconut-water-587.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/green-coconut-kefir-812x609.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/young-coconuts-softer-water-flesh-260nw-2634943223.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad13.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad10.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad22.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad29.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad27.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad30.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad4.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad17.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/istockphoto-481670054-612x612.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/dsf.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/closeup-pile-fresh-green-yellow-260nw-2607704223.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad14.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad27.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/images (3).jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/5gxmcuydcyd.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad15.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad22.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/s-l1200.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/coconut-tropical-fruit-hard-shell-260nw-2623243531.webp\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad9.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad28.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad16.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad6.aac\n",
      "/kaggle/input/last-test-data/test/malakatad/malakatad26.jpg\n",
      "/kaggle/input/last-test-data/test/malakatad/young-coconut-2.jpg\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da3c9e76",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:12:10.746773Z",
     "iopub.status.busy": "2025-10-05T13:12:10.746356Z",
     "iopub.status.idle": "2025-10-05T13:22:01.595362Z",
     "shell.execute_reply": "2025-10-05T13:22:01.594332Z"
    },
    "papermill": {
     "duration": 590.858355,
     "end_time": "2025-10-05T13:22:01.597067",
     "exception": false,
     "start_time": "2025-10-05T13:12:10.738712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.4/41.4 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.9/60.9 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.2/91.2 kB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.9/89.9 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m52.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m78.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m83.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m82.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.9/4.9 MB\u001b[0m \u001b[31m82.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m77.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m74.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.7/4.7 MB\u001b[0m \u001b[31m66.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "  \r\n",
      "  \u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\r\n",
      "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "  \u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "  \r\n",
      "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n",
      "  Installing build dependencies ... \u001b[?25l\u001b[?25herror\r\n",
      "\u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "\r\n",
      "\u001b[31m×\u001b[0m \u001b[32mpip subprocess to install build dependencies\u001b[0m did not run successfully.\r\n",
      "\u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "\u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "\r\n",
      "\u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n"
     ]
    }
   ],
   "source": [
    "!pip -q install torch torchaudio transformers datasets accelerate soundfile librosa audiomentations --upgrade\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "95204983",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:22:01.614483Z",
     "iopub.status.busy": "2025-10-05T13:22:01.614198Z",
     "iopub.status.idle": "2025-10-05T13:23:22.567934Z",
     "shell.execute_reply": "2025-10-05T13:23:22.567079Z"
    },
    "papermill": {
     "duration": 80.964304,
     "end_time": "2025-10-05T13:23:22.569659",
     "exception": false,
     "start_time": "2025-10-05T13:22:01.605355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/bin/bash: line 1: conda: command not found\r\n",
      "/bin/bash: line 1: conda: command not found\r\n",
      "Requirement already satisfied: transformers in /usr/local/lib/python3.11/dist-packages (4.52.4)\r\n",
      "Collecting transformers\r\n",
      "  Using cached transformers-4.57.0-py3-none-any.whl.metadata (41 kB)\r\n",
      "Requirement already satisfied: datasets in /usr/local/lib/python3.11/dist-packages (3.6.0)\r\n",
      "Collecting datasets\r\n",
      "  Using cached datasets-4.1.1-py3-none-any.whl.metadata (18 kB)\r\n",
      "Requirement already satisfied: accelerate in /usr/local/lib/python3.11/dist-packages (1.8.1)\r\n",
      "Collecting accelerate\r\n",
      "  Using cached accelerate-1.10.1-py3-none-any.whl.metadata (19 kB)\r\n",
      "Requirement already satisfied: soundfile in /usr/local/lib/python3.11/dist-packages (0.13.1)\r\n",
      "Collecting audiomentations\r\n",
      "  Using cached audiomentations-0.43.1-py3-none-any.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers) (3.18.0)\r\n",
      "Collecting huggingface-hub<1.0,>=0.34.0 (from transformers)\r\n",
      "  Using cached huggingface_hub-0.35.3-py3-none-any.whl.metadata (14 kB)\r\n",
      "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers) (25.0)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers) (6.0.2)\r\n",
      "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers) (2024.11.6)\r\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers) (2.32.4)\r\n",
      "Collecting tokenizers<=0.23.0,>=0.22.0 (from transformers)\r\n",
      "  Using cached tokenizers-0.22.1-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)\r\n",
      "Requirement already satisfied: safetensors>=0.4.3 in /usr/local/lib/python3.11/dist-packages (from transformers) (0.5.3)\r\n",
      "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers) (4.67.1)\r\n",
      "Collecting pyarrow>=21.0.0 (from datasets)\r\n",
      "  Using cached pyarrow-21.0.0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (3.3 kB)\r\n",
      "Requirement already satisfied: dill<0.4.1,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.3.8)\r\n",
      "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from datasets) (2.2.3)\r\n",
      "Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets) (3.5.0)\r\n",
      "Requirement already satisfied: multiprocess<0.70.17 in /usr/local/lib/python3.11/dist-packages (from datasets) (0.70.16)\r\n",
      "Requirement already satisfied: fsspec<=2025.9.0,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (2025.5.1)\r\n",
      "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from accelerate) (7.0.0)\r\n",
      "Requirement already satisfied: torch>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from accelerate) (2.6.0+cu124)\r\n",
      "Requirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.11/dist-packages (from soundfile) (1.17.1)\r\n",
      "Collecting numpy-minmax<1,>=0.3.0 (from audiomentations)\r\n",
      "  Using cached numpy_minmax-0.5.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.0 kB)\r\n",
      "Collecting numpy-rms<1,>=0.4.2 (from audiomentations)\r\n",
      "  Using cached numpy_rms-0.6.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.5 kB)\r\n",
      "Requirement already satisfied: librosa!=0.10.0,<0.12.0,>=0.8.0 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (0.11.0)\r\n",
      "Collecting python-stretch<1,>=0.3.1 (from audiomentations)\r\n",
      "  Using cached python_stretch-0.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.7 kB)\r\n",
      "Requirement already satisfied: scipy<2,>=1.4 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (1.15.3)\r\n",
      "Requirement already satisfied: soxr<1.0.0,>=0.3.2 in /usr/local/lib/python3.11/dist-packages (from audiomentations) (0.5.0.post1)\r\n",
      "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.0->soundfile) (2.22)\r\n",
      "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (3.12.13)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (4.14.0)\r\n",
      "Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.34.0->transformers) (1.1.5)\r\n",
      "Requirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (3.0.1)\r\n",
      "Requirement already satisfied: numba>=0.51.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.60.0)\r\n",
      "Requirement already satisfied: scikit-learn>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.2.2)\r\n",
      "Requirement already satisfied: joblib>=1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.5.1)\r\n",
      "Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (4.4.2)\r\n",
      "Requirement already satisfied: pooch>=1.1 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.8.2)\r\n",
      "Requirement already satisfied: lazy_loader>=0.1 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.4)\r\n",
      "Requirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.11/dist-packages (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (1.1.1)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2025.2.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2022.2.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->transformers) (2.4.1)\r\n",
      "Collecting numpy>=1.17 (from transformers)\r\n",
      "  Downloading numpy-2.3.3-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (62 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.1/62.1 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hRequirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.4.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (3.10)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2.5.0)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers) (2025.6.15)\r\n",
      "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.5)\r\n",
      "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.1.6)\r\n",
      "Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cublas-cu12==12.4.5.8 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cufft-cu12==11.2.1.3 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-curand-cu12==10.3.5.147 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\r\n",
      "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (0.6.2)\r\n",
      "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (2.21.5)\r\n",
      "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (12.4.127)\r\n",
      "Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch>=2.0.0->accelerate)\r\n",
      "  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\r\n",
      "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (3.2.0)\r\n",
      "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->accelerate) (1.13.1)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=2.0.0->accelerate) (1.3.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->datasets) (2025.2)\r\n",
      "Requirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (2.6.1)\r\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.3.2)\r\n",
      "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (25.3.0)\r\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.7.0)\r\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (6.6.3)\r\n",
      "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (0.3.2)\r\n",
      "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]<=2025.9.0,>=2023.1.0->datasets) (1.20.1)\r\n",
      "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.51.0->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (0.43.0)\r\n",
      "Collecting numpy>=1.17 (from transformers)\r\n",
      "  Using cached numpy-2.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\r\n",
      "Requirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from pooch>=1.1->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (4.3.8)\r\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.1.0->librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations) (3.6.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=2.0.0->accelerate) (3.0.2)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->transformers) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->transformers) (2022.2.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->transformers) (1.4.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->transformers) (2024.2.0)\r\n",
      "INFO: pip is looking at multiple versions of mkl-fft to determine which version is compatible with other requirements. This could take a while.\r\n",
      "Collecting mkl_fft (from numpy>=1.17->transformers)\r\n",
      "  Using cached mkl_fft-2.0.0-22-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (7.1 kB)\r\n",
      "  Using cached mkl_fft-1.3.14-0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.8 kB)\r\n",
      "  Using cached mkl_fft-1.3.13-0-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.8 kB)\r\n",
      "  Using cached mkl_fft-1.3.11-81-cp311-cp311-manylinux_2_28_x86_64.whl.metadata (4.4 kB)\r\n",
      "Collecting scikit-learn>=1.1.0 (from librosa!=0.10.0,<0.12.0,>=0.8.0->audiomentations)\r\n",
      "  Downloading scikit_learn-1.7.2-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is still looking at multiple versions of mkl-fft to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.7.1-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\r\n",
      "  Downloading scikit_learn-1.7.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (17 kB)\r\n",
      "  Downloading scikit_learn-1.6.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "  Downloading scikit_learn-1.6.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "  Downloading scikit_learn-1.5.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\r\n",
      "  Downloading scikit_learn-1.5.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\r\n",
      "  Downloading scikit_learn-1.5.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.4.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.4.1.post1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is looking at multiple versions of scikit-learn to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.4.0-1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: pip is still looking at multiple versions of scikit-learn to determine which version is compatible with other requirements. This could take a while.\r\n",
      "  Downloading scikit_learn-1.2.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.2.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "INFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\r\n",
      "  Downloading scikit_learn-1.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "  Downloading scikit_learn-1.1.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (10 kB)\r\n",
      "  Downloading scikit-learn-1.1.2.tar.gz (7.0 MB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.0/7.0 MB\u001b[0m \u001b[31m67.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\r\n",
      "  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\r\n",
      "  \r\n",
      "  \u001b[31m×\u001b[0m \u001b[32mPreparing metadata \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mpyproject.toml\u001b[0m\u001b[1;32m)\u001b[0m did not run successfully.\r\n",
      "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\r\n",
      "  \u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "  \r\n",
      "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\r\n",
      "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25herror\r\n",
      "\u001b[1;31merror\u001b[0m: \u001b[1mmetadata-generation-failed\u001b[0m\r\n",
      "\r\n",
      "\u001b[31m×\u001b[0m Encountered error while generating package metadata.\r\n",
      "\u001b[31m╰─>\u001b[0m See above for output.\r\n",
      "\r\n",
      "\u001b[1;35mnote\u001b[0m: This is an issue with the package mentioned above, not pip.\r\n",
      "\u001b[1;36mhint\u001b[0m: See above for details.\r\n"
     ]
    }
   ],
   "source": [
    "# If you're using conda, try:\n",
    "!conda install -c pytorch torch torchaudio -y\n",
    "!conda install -c conda-forge librosa -y\n",
    "!pip install transformers datasets accelerate soundfile audiomentations --upgrade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0c49d25e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:23:22.592565Z",
     "iopub.status.busy": "2025-10-05T13:23:22.592263Z",
     "iopub.status.idle": "2025-10-05T13:24:07.004777Z",
     "shell.execute_reply": "2025-10-05T13:24:07.004149Z"
    },
    "papermill": {
     "duration": 44.42559,
     "end_time": "2025-10-05T13:24:07.006284",
     "exception": false,
     "start_time": "2025-10-05T13:23:22.580694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-05 13:23:48.975925: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1759670629.366652      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1759670629.473078      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import random\n",
    "import math\n",
    "import json\n",
    "from pathlib import Path\n",
    "from typing import List, Tuple, Dict\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import librosa\n",
    "import soundfile as sf\n",
    "import torch\n",
    "import torchaudio\n",
    "from torch import nn\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchaudio.transforms import Resample\n",
    "from transformers import Wav2Vec2FeatureExtractor, Wav2Vec2ForSequenceClassification\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2aa69b15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:24:07.028813Z",
     "iopub.status.busy": "2025-10-05T13:24:07.028353Z",
     "iopub.status.idle": "2025-10-05T13:24:07.040941Z",
     "shell.execute_reply": "2025-10-05T13:24:07.040366Z"
    },
    "papermill": {
     "duration": 0.024803,
     "end_time": "2025-10-05T13:24:07.042127",
     "exception": false,
     "start_time": "2025-10-05T13:24:07.017324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Reproducibility\n",
    "def set_seed(seed=42):\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.manual_seed(seed)\n",
    "    torch.cuda.manual_seed_all(seed)\n",
    "\n",
    "set_seed(42)\n",
    "\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "SR = 16000  # Wav2Vec2 expects 16kHz mono\n",
    "TARGET_SECONDS = 1.5\n",
    "TARGET_SAMPLES = int(SR * TARGET_SECONDS)\n",
    "DATA_DIR = Path(\"/kaggle/input/s-coco-dataset/sounds dataset\") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71549196",
   "metadata": {
    "papermill": {
     "duration": 0.009961,
     "end_time": "2025-10-05T13:24:07.062922",
     "exception": false,
     "start_time": "2025-10-05T13:24:07.052961",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data and exploratory analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "63bd0352",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:24:07.084216Z",
     "iopub.status.busy": "2025-10-05T13:24:07.083984Z",
     "iopub.status.idle": "2025-10-05T13:24:07.139633Z",
     "shell.execute_reply": "2025-10-05T13:24:07.138869Z"
    },
    "papermill": {
     "duration": 0.067681,
     "end_time": "2025-10-05T13:24:07.140763",
     "exception": false,
     "start_time": "2025-10-05T13:24:07.073082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total files: 554\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>path</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/kaggle/input/s-coco-dataset/sounds dataset/ma...</td>\n",
       "      <td>malakanin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/kaggle/input/s-coco-dataset/sounds dataset/ma...</td>\n",
       "      <td>malakanin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/kaggle/input/s-coco-dataset/sounds dataset/ma...</td>\n",
       "      <td>malakanin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/kaggle/input/s-coco-dataset/sounds dataset/ma...</td>\n",
       "      <td>malakanin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/kaggle/input/s-coco-dataset/sounds dataset/ma...</td>\n",
       "      <td>malakanin</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                path      label\n",
       "0  /kaggle/input/s-coco-dataset/sounds dataset/ma...  malakanin\n",
       "1  /kaggle/input/s-coco-dataset/sounds dataset/ma...  malakanin\n",
       "2  /kaggle/input/s-coco-dataset/sounds dataset/ma...  malakanin\n",
       "3  /kaggle/input/s-coco-dataset/sounds dataset/ma...  malakanin\n",
       "4  /kaggle/input/s-coco-dataset/sounds dataset/ma...  malakanin"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dataset structure loading\n",
    "# Expecting: DATA_DIR / class_a / *.wav, DATA_DIR / class_b / *.wav, DATA_DIR / class_c / *.wav\n",
    "def list_audio_files(root: Path) -> pd.DataFrame:\n",
    "    rows = []\n",
    "    for cls in sorted([d for d in root.iterdir() if d.is_dir()]):\n",
    "        for wav in cls.glob(\"*.wav\"):\n",
    "            rows.append({\"path\": str(wav), \"label\": cls.name})\n",
    "    return pd.DataFrame(rows)\n",
    "\n",
    "df = list_audio_files(DATA_DIR)\n",
    "print(\"Total files:\", len(df))\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "67c4d387",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:24:07.164499Z",
     "iopub.status.busy": "2025-10-05T13:24:07.164265Z",
     "iopub.status.idle": "2025-10-05T13:24:07.479958Z",
     "shell.execute_reply": "2025-10-05T13:24:07.479216Z"
    },
    "papermill": {
     "duration": 0.328817,
     "end_time": "2025-10-05T13:24:07.481163",
     "exception": false,
     "start_time": "2025-10-05T13:24:07.152346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Class distribution\n",
    "plt.figure(figsize=(6,4))\n",
    "sns.countplot(y=\"label\", data=df, order=df[\"label\"].value_counts().index)\n",
    "plt.title(\"Class counts\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2e98d161",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:24:07.504238Z",
     "iopub.status.busy": "2025-10-05T13:24:07.503988Z",
     "iopub.status.idle": "2025-10-05T13:24:11.257268Z",
     "shell.execute_reply": "2025-10-05T13:24:11.256646Z"
    },
    "papermill": {
     "duration": 3.766408,
     "end_time": "2025-10-05T13:24:11.258816",
     "exception": false,
     "start_time": "2025-10-05T13:24:07.492408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>malakanin</th>\n",
       "      <td>200.0</td>\n",
       "      <td>7.710418</td>\n",
       "      <td>0.245534</td>\n",
       "      <td>7.128526</td>\n",
       "      <td>7.569705</td>\n",
       "      <td>7.674195</td>\n",
       "      <td>7.825125</td>\n",
       "      <td>9.079002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>malakatad</th>\n",
       "      <td>150.0</td>\n",
       "      <td>7.847422</td>\n",
       "      <td>0.972645</td>\n",
       "      <td>6.243265</td>\n",
       "      <td>7.105306</td>\n",
       "      <td>7.366531</td>\n",
       "      <td>8.736508</td>\n",
       "      <td>10.472200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>malauhog</th>\n",
       "      <td>204.0</td>\n",
       "      <td>8.789975</td>\n",
       "      <td>0.917593</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>8.165333</td>\n",
       "      <td>9.009342</td>\n",
       "      <td>9.404082</td>\n",
       "      <td>10.611519</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           count      mean       std       min       25%       50%       75%  \\\n",
       "label                                                                          \n",
       "malakanin  200.0  7.710418  0.245534  7.128526  7.569705  7.674195  7.825125   \n",
       "malakatad  150.0  7.847422  0.972645  6.243265  7.105306  7.366531  8.736508   \n",
       "malauhog   204.0  8.789975  0.917593  6.400000  8.165333  9.009342  9.404082   \n",
       "\n",
       "                 max  \n",
       "label                 \n",
       "malakanin   9.079002  \n",
       "malakatad  10.472200  \n",
       "malauhog   10.611519  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Duration statistics\n",
    "def get_duration(path):\n",
    "    info = sf.info(path)\n",
    "    return info.duration\n",
    "\n",
    "df[\"duration_s\"] = df[\"path\"].apply(get_duration)\n",
    "df.groupby(\"label\")[\"duration_s\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "de8a6755",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:24:11.290993Z",
     "iopub.status.busy": "2025-10-05T13:24:11.290309Z",
     "iopub.status.idle": "2025-10-05T13:24:11.562095Z",
     "shell.execute_reply": "2025-10-05T13:24:11.561303Z"
    },
    "papermill": {
     "duration": 0.285243,
     "end_time": "2025-10-05T13:24:11.563734",
     "exception": false,
     "start_time": "2025-10-05T13:24:11.278491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "sns.histplot(df[\"duration_s\"], bins=30, kde=True)\n",
    "plt.title(\"Audio duration distribution (seconds)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fcdd6072",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:24:11.604576Z",
     "iopub.status.busy": "2025-10-05T13:24:11.604089Z",
     "iopub.status.idle": "2025-10-05T13:27:27.867631Z",
     "shell.execute_reply": "2025-10-05T13:27:27.866811Z"
    },
    "papermill": {
     "duration": 196.305832,
     "end_time": "2025-10-05T13:27:27.883421",
     "exception": false,
     "start_time": "2025-10-05T13:24:11.577589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Quick waveform visualization - CORRECTED VERSION\n",
    "def plot_waveform(path, sr=SR, title=None):\n",
    "    x, file_sr = sf.read(path, always_2d=False)\n",
    "    if file_sr != sr:\n",
    "        x = librosa.resample(x, orig_sr=file_sr, target_sr=sr)  # Fixed line\n",
    "    plt.figure(figsize=(10,3))\n",
    "    plt.plot(x)\n",
    "    plt.title(title or Path(path).name)\n",
    "    plt.xlabel(\"Samples\")\n",
    "    plt.ylabel(\"Amplitude\")\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "sample_paths = df.sample(3, random_state=42)[\"path\"].tolist()\n",
    "for p in sample_paths:\n",
    "    plot_waveform(p, title=f\"Waveform: {Path(p).name}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd9d3eac",
   "metadata": {
    "papermill": {
     "duration": 0.013395,
     "end_time": "2025-10-05T13:27:27.910533",
     "exception": false,
     "start_time": "2025-10-05T13:27:27.897138",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing and augmentation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bcdea6e",
   "metadata": {
    "papermill": {
     "duration": 0.013641,
     "end_time": "2025-10-05T13:27:27.937689",
     "exception": false,
     "start_time": "2025-10-05T13:27:27.924048",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Resample: All audio to 16 kHz mono.\n",
    "- Normalize: Per-sample RMS normalization.\n",
    "- Crop/pad: Random 1-second segments for training; center crops for validation/test.\n",
    "- Augmentations (subtle, tap-safe):\n",
    "- Time shift: Small circular shift.\n",
    "- Background noise: Low-level Gaussian or mix-of dataset ambient fragments.\n",
    "- Random gain: Mild amplitude scaling.\n",
    "- Avoid strong pitch-shift/time-stretch; taps are brief transients whose cues can be distorted.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "48be5f2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:27:27.967782Z",
     "iopub.status.busy": "2025-10-05T13:27:27.966846Z",
     "iopub.status.idle": "2025-10-05T13:27:27.977529Z",
     "shell.execute_reply": "2025-10-05T13:27:27.976683Z"
    },
    "papermill": {
     "duration": 0.027386,
     "end_time": "2025-10-05T13:27:27.978787",
     "exception": false,
     "start_time": "2025-10-05T13:27:27.951401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torchaudio.transforms as T\n",
    "import numpy as np\n",
    "import soundfile as sf\n",
    "import librosa\n",
    "from transformers import Wav2Vec2FeatureExtractor\n",
    "\n",
    "# Define all your functions FIRST\n",
    "def load_audio(path, sr=SR):\n",
    "    x, file_sr = sf.read(path, always_2d=False)\n",
    "    if x.ndim > 1:  # stereo to mono\n",
    "        x = np.mean(x, axis=1)\n",
    "    if file_sr != sr:\n",
    "        x = librosa.resample(x, orig_sr=file_sr, target_sr=sr)\n",
    "    return x.astype(np.float32)\n",
    "\n",
    "def rms_normalize(x, eps=1e-8):\n",
    "    rms = np.sqrt(np.mean(x**2))\n",
    "    if rms < eps:\n",
    "        return x\n",
    "    return x / rms\n",
    "\n",
    "def crop_or_pad(x: np.ndarray, n_samples: int, mode=\"random\"):\n",
    "    if len(x) >= n_samples:\n",
    "        if mode == \"random\":\n",
    "            start = np.random.randint(0, len(x) - n_samples + 1)\n",
    "        else:\n",
    "            start = max(0, (len(x) - n_samples) // 2)\n",
    "        return x[start:start + n_samples]\n",
    "    pad_left = (n_samples - len(x)) // 2\n",
    "    pad_right = n_samples - len(x) - pad_left\n",
    "    return np.pad(x, (pad_left, pad_right), mode='constant')\n",
    "\n",
    "def time_shift(x, max_shift=0.1):\n",
    "    shift = int(max_shift * len(x) * np.random.uniform(-1, 1))\n",
    "    if shift > 0:\n",
    "        return np.concatenate([x[shift:], np.zeros(shift)])\n",
    "    elif shift < 0:\n",
    "        return np.concatenate([np.zeros(-shift), x[:shift]])\n",
    "    return x\n",
    "\n",
    "def add_gaussian_noise(x, min_amplitude=0.001, max_amplitude=0.01):\n",
    "    if np.random.random() < 0.3:\n",
    "        amplitude = np.random.uniform(min_amplitude, max_amplitude)\n",
    "        noise = np.random.normal(0, amplitude, x.shape)\n",
    "        return x + noise\n",
    "    return x\n",
    "\n",
    "def gain_augmentation(x, min_gain_db=-3.0, max_gain_db=3.0):\n",
    "    if np.random.random() < 0.3:\n",
    "        gain_db = np.random.uniform(min_gain_db, max_gain_db)\n",
    "        gain_linear = 10 ** (gain_db / 20.0)\n",
    "        return x * gain_linear\n",
    "    return x\n",
    "\n",
    "def train_augment(x):\n",
    "    x = time_shift(x, max_shift=0.1)\n",
    "    x = add_gaussian_noise(x, 0.001, 0.01)\n",
    "    x = gain_augmentation(x, -3.0, 3.0)\n",
    "    return x\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b411ce84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:27:28.008283Z",
     "iopub.status.busy": "2025-10-05T13:27:28.007644Z",
     "iopub.status.idle": "2025-10-05T13:27:28.049099Z",
     "shell.execute_reply": "2025-10-05T13:27:28.048315Z"
    },
    "papermill": {
     "duration": 0.05775,
     "end_time": "2025-10-05T13:27:28.050365",
     "exception": false,
     "start_time": "2025-10-05T13:27:27.992615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(387, 83, 84, ['malakanin', 'malakatad', 'malauhog'])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dataset class and split\n",
    "from sklearn.model_selection import StratifiedGroupKFold, train_test_split\n",
    "\n",
    "labels = sorted(df[\"label\"].unique())\n",
    "label2id = {l:i for i,l in enumerate(labels)}\n",
    "id2label = {i:l for l,i in label2id.items()}\n",
    "\n",
    "df[\"label_id\"] = df[\"label\"].map(label2id)\n",
    "\n",
    "train_df, temp_df = train_test_split(df, test_size=0.3, stratify=df[\"label_id\"], random_state=42)\n",
    "val_df, test_df = train_test_split(temp_df, test_size=0.5, stratify=temp_df[\"label_id\"], random_state=42)\n",
    "\n",
    "class AudioDataset(Dataset):\n",
    "    def __init__(self, dataframe, sr=SR, n_samples=TARGET_SAMPLES, mode=\"train\"):\n",
    "        self.df = dataframe.reset_index(drop=True)\n",
    "        self.sr = sr\n",
    "        self.n_samples = n_samples\n",
    "        self.mode = mode\n",
    "        self.feature_extractor = Wav2Vec2FeatureExtractor(\n",
    "            feature_size=1, sampling_rate=sr, padding=True, do_normalize=True, return_attention_mask=True\n",
    "        )\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.df)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        row = self.df.iloc[idx]\n",
    "        x = load_audio(row[\"path\"], sr=self.sr)\n",
    "        x = rms_normalize(x)\n",
    "        crop_mode = \"random\" if self.mode == \"train\" else \"center\"\n",
    "        x = crop_or_pad(x, self.n_samples, mode=crop_mode)\n",
    "        if self.mode == \"train\":\n",
    "            x = train_augment(x)  # Fixed: removed sample_rate parameter\n",
    "\n",
    "        inputs = self.feature_extractor(x, sampling_rate=self.sr, padding=\"do_not_pad\")\n",
    "        input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
    "        attention_mask = torch.ones_like(input_values)\n",
    "\n",
    "        return {\n",
    "            \"input_values\": input_values.squeeze(0),\n",
    "            \"attention_mask\": attention_mask.squeeze(0),\n",
    "            \"labels\": torch.tensor(row[\"label_id\"], dtype=torch.long),\n",
    "            \"path\": row[\"path\"]\n",
    "        }\n",
    "\n",
    "train_ds = AudioDataset(train_df, mode=\"train\")\n",
    "val_ds   = AudioDataset(val_df,   mode=\"val\")\n",
    "test_ds  = AudioDataset(test_df,  mode=\"test\")\n",
    "\n",
    "BATCH_SIZE = 32\n",
    "train_loader = DataLoader(train_ds, batch_size=BATCH_SIZE, shuffle=True, num_workers=2)\n",
    "val_loader   = DataLoader(val_ds, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)\n",
    "test_loader  = DataLoader(test_ds, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)\n",
    "\n",
    "len(train_ds), len(val_ds), len(test_ds), labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "55ff4638",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:27:28.079416Z",
     "iopub.status.busy": "2025-10-05T13:27:28.079158Z",
     "iopub.status.idle": "2025-10-05T13:27:37.232298Z",
     "shell.execute_reply": "2025-10-05T13:27:37.231375Z"
    },
    "papermill": {
     "duration": 9.16914,
     "end_time": "2025-10-05T13:27:37.233675",
     "exception": false,
     "start_time": "2025-10-05T13:27:28.064535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 84/84 [00:02<00:00, 36.67it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Test audio files copied into test_data/\n",
      "✅ Zipped test data into test_data.zip\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import shutil\n",
    "import zipfile\n",
    "from tqdm import tqdm\n",
    "\n",
    "# Output folder for test data\n",
    "output_dir = \"test_data\"\n",
    "if os.path.exists(output_dir):\n",
    "    shutil.rmtree(output_dir)\n",
    "os.makedirs(output_dir, exist_ok=True)\n",
    "\n",
    "# Copy test files into class-based folders\n",
    "for i in tqdm(range(len(test_ds))):\n",
    "    row = test_ds.df.iloc[i]\n",
    "    filepath = row[\"path\"]\n",
    "    label = row[\"label\"]\n",
    "    \n",
    "    # Create class subfolder\n",
    "    class_dir = os.path.join(output_dir, str(label))\n",
    "    os.makedirs(class_dir, exist_ok=True)\n",
    "    \n",
    "    # Copy file\n",
    "    shutil.copy(filepath, class_dir)\n",
    "\n",
    "print(f\"✅ Test audio files copied into {output_dir}/\")\n",
    "\n",
    "# Zip the folder\n",
    "zip_filename = \"test_data.zip\"\n",
    "with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:\n",
    "    for root, _, files in os.walk(output_dir):\n",
    "        for file in files:\n",
    "            file_path = os.path.join(root, file)\n",
    "            arcname = os.path.relpath(file_path, output_dir)\n",
    "            zipf.write(file_path, arcname)\n",
    "\n",
    "print(f\"✅ Zipped test data into {zip_filename}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "922064cf",
   "metadata": {
    "papermill": {
     "duration": 0.013708,
     "end_time": "2025-10-05T13:27:37.262175",
     "exception": false,
     "start_time": "2025-10-05T13:27:37.248467",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Model and training"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72152d2b",
   "metadata": {
    "papermill": {
     "duration": 0.013891,
     "end_time": "2025-10-05T13:27:37.289963",
     "exception": false,
     "start_time": "2025-10-05T13:27:37.276072",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Base: facebook/wav2vec2-base\n",
    "- Head: New classification head with 3 outputs\n",
    "- Optimization: AdamW + linear scheduler\n",
    "- Class imbalance: Optional class weights\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "172b88b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:27:37.319250Z",
     "iopub.status.busy": "2025-10-05T13:27:37.318975Z",
     "iopub.status.idle": "2025-10-05T13:29:48.049846Z",
     "shell.execute_reply": "2025-10-05T13:29:48.048882Z"
    },
    "papermill": {
     "duration": 130.747347,
     "end_time": "2025-10-05T13:29:48.051389",
     "exception": false,
     "start_time": "2025-10-05T13:27:37.304042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "701a448a91e941099bea1bc5e7594f5b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "preprocessor_config.json:   0%|          | 0.00/159 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d790ad3be95e4a708f6e689921437747",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/163 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c1c77c78ee864d1081177a3242ebb9ef",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/transformers/configuration_utils.py:312: UserWarning: Passing `gradient_checkpointing` to a config initialization is deprecated and will be removed in v5 Transformers. Using `model.gradient_checkpointing_enable()` instead, or if you are using the `Trainer` API, pass `gradient_checkpointing=True` in your `TrainingArguments`.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dfb694eb8434415d81f7ae2d4bdef7d6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.json:   0%|          | 0.00/291 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "edcdc7fbe3c74ceb8aa5155502eba4c6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/85.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ca805858ef2449539194aa237d68c150",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "pytorch_model.bin:   0%|          | 0.00/380M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "822397450491434ea6baf152b0544ab5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/380M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Some weights of Wav2Vec2ForSequenceClassification were not initialized from the model checkpoint at facebook/wav2vec2-base and are newly initialized: ['classifier.bias', 'classifier.weight', 'projector.bias', 'projector.weight']\n",
      "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 01 | train_loss=1.0457 acc=0.548 | val_loss=0.9471 acc=0.651\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 02 | train_loss=0.8411 acc=0.695 | val_loss=0.7019 acc=0.771\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 03 | train_loss=0.6423 acc=0.832 | val_loss=0.5410 acc=0.904\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 04 | train_loss=0.4835 acc=0.925 | val_loss=0.4322 acc=0.940\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 05 | train_loss=0.3876 acc=0.951 | val_loss=0.3716 acc=0.940\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 06 | train_loss=0.3895 acc=0.912 | val_loss=0.3238 acc=0.964\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 07 | train_loss=0.3468 acc=0.930 | val_loss=0.2972 acc=0.964\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 08 | train_loss=0.2927 acc=0.961 | val_loss=0.2883 acc=0.952\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 09 | train_loss=0.2617 acc=0.964 | val_loss=0.2688 acc=0.964\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warmup] Epoch 10 | train_loss=0.2398 acc=0.974 | val_loss=0.2581 acc=0.964\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import numpy as np\n",
    "from transformers import Wav2Vec2ForSequenceClassification, Wav2Vec2Processor\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "# Setup\n",
    "MODEL_NAME = \"facebook/wav2vec2-base\"\n",
    "DEVICE = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# Load processor and model\n",
    "processor = Wav2Vec2Processor.from_pretrained(MODEL_NAME)\n",
    "model = Wav2Vec2ForSequenceClassification.from_pretrained(\n",
    "    MODEL_NAME,\n",
    "    num_labels=len(labels),\n",
    "    label2id=label2id,\n",
    "    id2label=id2label,\n",
    "    problem_type=\"single_label_classification\",\n",
    "    ignore_mismatched_sizes=True  # suppresses classifier/projector warnings\n",
    ")\n",
    "model.gradient_checkpointing_enable()\n",
    "model.to(DEVICE)\n",
    "\n",
    "# Freeze feature extractor for warmup\n",
    "for param in model.wav2vec2.feature_extractor.parameters():\n",
    "    param.requires_grad = False\n",
    "\n",
    "# Optimizer and scheduler\n",
    "# Training schedule\n",
    "WARMUP_EPOCHS = 5   # only train classifier head\n",
    "FT_EPOCHS = 5       # fine-tune encoder + head\n",
    "\n",
    "LR = 2e-5\n",
    "optimizer = torch.optim.AdamW(model.parameters(), lr=LR)\n",
    "num_training_steps = (WARMUP_EPOCHS+FT_EPOCHS) * len(train_loader)\n",
    "scheduler = torch.optim.lr_scheduler.LinearLR(optimizer, start_factor=1.0, end_factor=0.1, total_iters=num_training_steps)\n",
    "\n",
    "# Class weights\n",
    "class_counts = train_df[\"label_id\"].value_counts().sort_index().values\n",
    "class_weights = torch.tensor((class_counts.max() / class_counts), dtype=torch.float32).to(DEVICE)\n",
    "criterion = nn.CrossEntropyLoss(weight=class_weights)\n",
    "\n",
    "# Training loop\n",
    "def train_one_epoch(epoch):\n",
    "    model.train()\n",
    "    total_loss, correct, total = 0.0, 0, 0\n",
    "    for batch in train_loader:\n",
    "        optimizer.zero_grad()\n",
    "        input_values = torch.tensor(np.array(batch[\"input_values\"]), dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = batch[\"attention_mask\"].to(DEVICE)\n",
    "        labels = batch[\"labels\"].to(DEVICE)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        loss = criterion(outputs.logits, labels)\n",
    "        loss.backward()\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n",
    "        optimizer.step()\n",
    "        scheduler.step()\n",
    "\n",
    "        total_loss += loss.item() * input_values.size(0)\n",
    "        preds = outputs.logits.argmax(dim=1)\n",
    "        correct += (preds == labels).sum().item()\n",
    "        total += input_values.size(0)\n",
    "\n",
    "    return total_loss / total, correct / total\n",
    "\n",
    "# Evaluation loop\n",
    "@torch.no_grad()\n",
    "def eval_one_epoch(loader):\n",
    "    model.eval()\n",
    "    total_loss, correct, total = 0.0, 0, 0\n",
    "    all_labels, all_preds = [], []\n",
    "    for batch in loader:\n",
    "        input_values = torch.tensor(np.array(batch[\"input_values\"]), dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = batch[\"attention_mask\"].to(DEVICE)\n",
    "        labels = batch[\"labels\"].to(DEVICE)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        loss = criterion(outputs.logits, labels)\n",
    "\n",
    "        total_loss += loss.item() * input_values.size(0)\n",
    "        preds = outputs.logits.argmax(dim=1)\n",
    "        correct += (preds == labels).sum().item()\n",
    "        total += input_values.size(0)\n",
    "\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "\n",
    "    return total_loss / total, correct / total, np.array(all_labels), np.array(all_preds)\n",
    "\n",
    "# Training loop\n",
    "train_losses, val_losses, val_accs, train_accs = [], [], [], []\n",
    "\n",
    "\n",
    "for epoch in range(1, WARMUP_EPOCHS + 1):\n",
    "    tr_loss, tr_acc = train_one_epoch(epoch)\n",
    "    val_loss, val_acc, y_true, y_pred = eval_one_epoch(val_loader)\n",
    "\n",
    "    train_losses.append(tr_loss)\n",
    "    val_losses.append(val_loss)\n",
    "    val_accs.append(val_acc)\n",
    "    train_accs.append(tr_acc)\n",
    "    print(f\"[Warmup] Epoch {epoch:02d} | train_loss={tr_loss:.4f} acc={tr_acc:.3f} \"\n",
    "          f\"| val_loss={val_loss:.4f} acc={val_acc:.3f}\")\n",
    "\n",
    "\n",
    "# Unfreeze feature extractor for fine-tuning\n",
    "for param in model.wav2vec2.feature_extractor.parameters():\n",
    "    param.requires_grad = True\n",
    "\n",
    "# Differential learning rates: smaller for encoder, larger for classifier\n",
    "\n",
    "optimizer = torch.optim.AdamW([\n",
    "    {\"params\": model.wav2vec2.parameters(), \"lr\": 1e-5},\n",
    "    {\"params\": model.classifier.parameters(), \"lr\": 2e-5},\n",
    "], weight_decay=0.01)\n",
    "\n",
    "for epoch in range(WARMUP_EPOCHS + 1, WARMUP_EPOCHS + FT_EPOCHS + 1):\n",
    "    tr_loss, tr_acc = train_one_epoch(epoch)\n",
    "    val_loss, val_acc, y_true, y_pred = eval_one_epoch(val_loader)\n",
    "    train_losses.append(tr_loss)\n",
    "    val_losses.append(val_loss)\n",
    "    val_accs.append(val_acc)\n",
    "    train_accs.append(tr_acc)\n",
    "    print(f\"[Warmup] Epoch {epoch:02d} | train_loss={tr_loss:.4f} acc={tr_acc:.3f} \"\n",
    "          f\"| val_loss={val_loss:.4f} acc={val_acc:.3f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "795f8082",
   "metadata": {
    "papermill": {
     "duration": 0.017009,
     "end_time": "2025-10-05T13:29:48.088050",
     "exception": false,
     "start_time": "2025-10-05T13:29:48.071041",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Evaluation and analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dd29d755",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:29:48.123170Z",
     "iopub.status.busy": "2025-10-05T13:29:48.122805Z",
     "iopub.status.idle": "2025-10-05T13:29:48.475269Z",
     "shell.execute_reply": "2025-10-05T13:29:48.474445Z"
    },
    "papermill": {
     "duration": 0.371733,
     "end_time": "2025-10-05T13:29:48.476555",
     "exception": false,
     "start_time": "2025-10-05T13:29:48.104822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Training curves\n",
    "plt.figure(figsize=(8,4))\n",
    "plt.plot(train_losses, label=\"Train loss\")\n",
    "plt.plot(val_losses, label=\"Val loss\")\n",
    "plt.title(\"Loss curves\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plt.figure(figsize=(8,4))\n",
    "plt.plot(val_accs, label=\"Val accuracy\")\n",
    "plt.plot(train_accs, label=\"Train Accuracy\")\n",
    "plt.title(\"Validation accuracy\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ce8cb1ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:29:48.518364Z",
     "iopub.status.busy": "2025-10-05T13:29:48.518013Z",
     "iopub.status.idle": "2025-10-05T13:29:50.231042Z",
     "shell.execute_reply": "2025-10-05T13:29:50.230164Z"
    },
    "papermill": {
     "duration": 1.735691,
     "end_time": "2025-10-05T13:29:50.232267",
     "exception": false,
     "start_time": "2025-10-05T13:29:48.496576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n",
      "/tmp/ipykernel_19/2923886625.py:36: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss=0.2068, Test acc=0.976\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "   malakanin       1.00      1.00      1.00        30\n",
      "   malakatad       1.00      0.91      0.95        23\n",
      "    malauhog       0.94      1.00      0.97        31\n",
      "\n",
      "    accuracy                           0.98        84\n",
      "   macro avg       0.98      0.97      0.97        84\n",
      "weighted avg       0.98      0.98      0.98        84\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Test performance, confusion matrix, report\n",
    "test_loss, test_acc, y_true_test, y_pred_test = eval_one_epoch(test_loader)\n",
    "print(f\"Test loss={test_loss:.4f}, Test acc={test_acc:.3f}\")\n",
    "\n",
    "cm = confusion_matrix(y_true_test, y_pred_test, labels=list(range(len(labels))))\n",
    "plt.figure(figsize=(6,5))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\",\n",
    "            xticklabels=[id2label[i] for i in range(len(labels))],\n",
    "            yticklabels=[id2label[i] for i in range(len(labels))])\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"True\")\n",
    "plt.title(\"Confusion matrix (test)\")\n",
    "plt.show()\n",
    "\n",
    "print(classification_report(y_true_test, y_pred_test, target_names=[id2label[i] for i in range(len(labels))]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6d35f984",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:29:50.277171Z",
     "iopub.status.busy": "2025-10-05T13:29:50.276916Z",
     "iopub.status.idle": "2025-10-05T13:29:53.896186Z",
     "shell.execute_reply": "2025-10-05T13:29:53.895186Z"
    },
    "papermill": {
     "duration": 3.64249,
     "end_time": "2025-10-05T13:29:53.897680",
     "exception": false,
     "start_time": "2025-10-05T13:29:50.255190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pydub in /usr/local/lib/python3.11/dist-packages (0.25.1)\r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19/2348996914.py:40: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /pytorch/torch/csrc/utils/tensor_new.cpp:254.)\n",
      "  input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32).to(DEVICE)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "malakatad [0.05732619 0.58310986 0.35956398]\n"
     ]
    }
   ],
   "source": [
    "!pip install pydub\n",
    "\n",
    "from pydub import AudioSegment\n",
    "import tempfile\n",
    "import os\n",
    "\n",
    "def convert_aac_to_wav(aac_path):\n",
    "    \"\"\"Convert AAC file to temporary WAV file\"\"\"\n",
    "    # Load AAC file\n",
    "    audio = AudioSegment.from_file(aac_path, format=\"aac\")\n",
    "    \n",
    "    # Create temporary WAV file\n",
    "    temp_wav = tempfile.NamedTemporaryFile(suffix='.wav', delete=False)\n",
    "    audio.export(temp_wav.name, format=\"wav\")\n",
    "    return temp_wav.name\n",
    "\n",
    "@torch.no_grad()\n",
    "def predict_file(path: str, n_crops=10):\n",
    "    model.eval()\n",
    "    \n",
    "    # Check if file is AAC and convert if needed\n",
    "    if path.lower().endswith('.aac'):\n",
    "        wav_path = convert_aac_to_wav(path)\n",
    "        try:\n",
    "            x = load_audio(wav_path, sr=SR)\n",
    "        finally:\n",
    "            # Clean up temporary file\n",
    "            os.unlink(wav_path)\n",
    "    else:\n",
    "        x = load_audio(path, sr=SR)\n",
    "        \n",
    "    x = rms_normalize(x)\n",
    "    # Rest of your function remains the same...\n",
    "    probs_list = []\n",
    "    for _ in range(n_crops):\n",
    "        crop = crop_or_pad(x, TARGET_SAMPLES, mode=\"random\")\n",
    "        inputs = Wav2Vec2FeatureExtractor(\n",
    "            feature_size=1, sampling_rate=SR, padding=True, do_normalize=True, return_attention_mask=True\n",
    "        )(crop, sampling_rate=SR, padding=\"do_not_pad\")\n",
    "        input_values = torch.tensor(inputs[\"input_values\"], dtype=torch.float32).to(DEVICE)\n",
    "        attention_mask = torch.ones_like(input_values)\n",
    "\n",
    "        outputs = model(input_values=input_values, attention_mask=attention_mask)\n",
    "        probs = torch.softmax(outputs.logits, dim=-1).cpu().numpy()[0]\n",
    "        probs_list.append(probs)\n",
    "\n",
    "    mean_probs = np.mean(np.stack(probs_list, axis=0), axis=0)\n",
    "    pred_id = int(np.argmax(mean_probs))\n",
    "    return id2label[pred_id], mean_probs\n",
    "\n",
    "# Example usage:\n",
    "predicted_label, probabilities = predict_file(\"/kaggle/input/coco-sound/sounds dataset/MALAKANIN/malakanin10.wav\")\n",
    "print(predicted_label, probabilities)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3877e160",
   "metadata": {
    "papermill": {
     "duration": 0.019615,
     "end_time": "2025-10-05T13:29:53.939281",
     "exception": false,
     "start_time": "2025-10-05T13:29:53.919666",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Export model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1d6a3888",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:29:53.976680Z",
     "iopub.status.busy": "2025-10-05T13:29:53.976443Z",
     "iopub.status.idle": "2025-10-05T13:29:54.757313Z",
     "shell.execute_reply": "2025-10-05T13:29:54.756665Z"
    },
    "papermill": {
     "duration": 0.80123,
     "end_time": "2025-10-05T13:29:54.758710",
     "exception": false,
     "start_time": "2025-10-05T13:29:53.957480",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SAVE_DIR = Path(\"./wav2vec2_coconut_tap_model\")\n",
    "SAVE_DIR.mkdir(exist_ok=True)\n",
    "model.save_pretrained(SAVE_DIR)\n",
    "processor.save_pretrained(SAVE_DIR)\n",
    "with open(SAVE_DIR / \"label_map.json\", \"w\") as f:\n",
    "    json.dump({\"label2id\": label2id, \"id2label\": id2label}, f, indent=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6f372d95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-05T13:29:54.797586Z",
     "iopub.status.busy": "2025-10-05T13:29:54.797319Z",
     "iopub.status.idle": "2025-10-05T13:30:14.070691Z",
     "shell.execute_reply": "2025-10-05T13:30:14.069956Z"
    },
    "papermill": {
     "duration": 19.293744,
     "end_time": "2025-10-05T13:30:14.072090",
     "exception": false,
     "start_time": "2025-10-05T13:29:54.778346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/kaggle/working/wav2vec2_coconut_tap_model.zip'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import shutil\n",
    "\n",
    "shutil.make_archive(\"wav2vec2_coconut_tap_model\", 'zip', SAVE_DIR)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb59715a",
   "metadata": {
    "papermill": {
     "duration": 0.018942,
     "end_time": "2025-10-05T13:30:14.112694",
     "exception": false,
     "start_time": "2025-10-05T13:30:14.093752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 8194363,
     "sourceId": 12948599,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8273337,
     "sourceId": 13064297,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 8408556,
     "sourceId": 13268820,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1097.654866,
   "end_time": "2025-10-05T13:30:17.265787",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-05T13:11:59.610921",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0277c07adf9c469cbc1bcea3c75dcc99": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "06a610946478479091d020c867830935": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "07db21e49d0940fda5395681132a2188": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "08699b7e4d21444db97eb1b5ac13045c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e8155a3773e645bbbdde74b8ce437125",
       "placeholder": "​",
       "style": "IPY_MODEL_cf9f4d35c3554a7f8f27907b2a14dd75",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "09f0af8aae36454d86aed1f8cd89876e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0a413725c18646e9a0341c61616cea28": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0c81c63065d24d24ac371c769c5c966b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_31ae32f156474df29ddd032f5335ede5",
       "max": 85.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9ba4c5499c734e5b872b72dd83b7cd96",
       "tabbable": null,
       "tooltip": null,
       "value": 85.0
      }
     },
     "10bbe28686974e9187b03d188831a5b8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1490ff053fd042a2bd73ec8b4fafd0be": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "15d6f29248f9484182e88975631f6891": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "18b0a07ba30642189043a304593c7d0d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "19130197b3684c4a93c3ae235724ade9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d53c6320e26f419eb998cde08689c934",
       "placeholder": "​",
       "style": "IPY_MODEL_528b6f0825544bc69f2e2a5b233522c5",
       "tabbable": null,
       "tooltip": null,
       "value": " 159/159 [00:00&lt;00:00, 15.3kB/s]"
      }
     },
     "1a87179b661c434489e571e042c95a7b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "219b78487d144930bf6f5fe6907ed3a5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "22dd54d9ed2e498aa02938e1c3d2d463": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "310b9a378c6c46e984e805c566993b4c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "31ae32f156474df29ddd032f5335ede5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "342baf56000843829909a9417e519ef3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "375612988dc140fda14bd36e8faac261": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_469cbe7548b14faea05ee2da071d935f",
       "placeholder": "​",
       "style": "IPY_MODEL_468ddd1a0245410bad9b078a1a00e14c",
       "tabbable": null,
       "tooltip": null,
       "value": " 380M/380M [00:02&lt;00:00, 258MB/s]"
      }
     },
     "37b38dc414ba44faa05c5f33d1183fb7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3868f3f7cf0c45e699740c91373b21fd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "393bc28cce6e481590893dd01ab6814d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3a1584c1b45a4b268497bfedd9a110fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "40896b71e6dc4c6287169493a6e9a6c1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "466e45ff5d564cc29c94e91a6f203f36": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "468ddd1a0245410bad9b078a1a00e14c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "469cbe7548b14faea05ee2da071d935f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4d2d5e809eea47a4847ebff93289af4d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9ac386a30a7a4977bc632c3a3bf2f3b8",
       "max": 380204696.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5a86e6de155f4149b32e5e1149caf844",
       "tabbable": null,
       "tooltip": null,
       "value": 380204696.0
      }
     },
     "52699aa7590a4a4191836b34ac6d6865": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9c807580e2bf44948ea499acb8731e79",
       "placeholder": "​",
       "style": "IPY_MODEL_393bc28cce6e481590893dd01ab6814d",
       "tabbable": null,
       "tooltip": null,
       "value": " 380M/380M [00:01&lt;00:00, 314MB/s]"
      }
     },
     "528b6f0825544bc69f2e2a5b233522c5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5a86e6de155f4149b32e5e1149caf844": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "62fc25e383fd4a51ad2c2b32f8fdf98a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9726a9843b104cad85077f098326c328",
       "max": 163.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9f45437e6a9241b2842fcbd47d8a7d54",
       "tabbable": null,
       "tooltip": null,
       "value": 163.0
      }
     },
     "6691a066c6a847bb93aa048aeda58fd8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bb41b25bbc2a46919d0457ded6b64eb8",
       "placeholder": "​",
       "style": "IPY_MODEL_81a0e067cb324983a0a58bd3bd88b677",
       "tabbable": null,
       "tooltip": null,
       "value": " 85.0/85.0 [00:00&lt;00:00, 12.2kB/s]"
      }
     },
     "6a373e817618490aa41bf36c6caeead0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6b4154fbd2bc435ab174c15469fd8be0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0277c07adf9c469cbc1bcea3c75dcc99",
       "placeholder": "​",
       "style": "IPY_MODEL_3a1584c1b45a4b268497bfedd9a110fd",
       "tabbable": null,
       "tooltip": null,
       "value": "special_tokens_map.json: 100%"
      }
     },
     "6f61f7cb58a84aa1a5efd8005f2608b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "701a448a91e941099bea1bc5e7594f5b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cb0a03ec08554f3eabc059e9de626083",
        "IPY_MODEL_a01a44cd4905499cb9265a1978a5aaaa",
        "IPY_MODEL_19130197b3684c4a93c3ae235724ade9"
       ],
       "layout": "IPY_MODEL_40896b71e6dc4c6287169493a6e9a6c1",
       "tabbable": null,
       "tooltip": null
      }
     },
     "726725e0d0544f26b31e61aeaabf2a2a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "80a311d92c244c6a8c98a692dde60995": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "81a0e067cb324983a0a58bd3bd88b677": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "81aa5d07dbf94211be7b0d8f678a2a45": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_94cde3b54b28491dbd64171194600095",
       "max": 291.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_acbbc72f836541908d568d40e463f271",
       "tabbable": null,
       "tooltip": null,
       "value": 291.0
      }
     },
     "822397450491434ea6baf152b0544ab5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_08699b7e4d21444db97eb1b5ac13045c",
        "IPY_MODEL_4d2d5e809eea47a4847ebff93289af4d",
        "IPY_MODEL_52699aa7590a4a4191836b34ac6d6865"
       ],
       "layout": "IPY_MODEL_18b0a07ba30642189043a304593c7d0d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "8bb7addee865487cb3a33d29b1d68102": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "94cde3b54b28491dbd64171194600095": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9726a9843b104cad85077f098326c328": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9ac386a30a7a4977bc632c3a3bf2f3b8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9ba4c5499c734e5b872b72dd83b7cd96": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9c807580e2bf44948ea499acb8731e79": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9f45437e6a9241b2842fcbd47d8a7d54": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "a01a44cd4905499cb9265a1978a5aaaa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c2df95c2af6a4c749905e343ae947606",
       "max": 159.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_fb219993aae244fd9bd4128ae64c2dfa",
       "tabbable": null,
       "tooltip": null,
       "value": 159.0
      }
     },
     "acbbc72f836541908d568d40e463f271": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b002169a664547d39198f7186aa13a6f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e7edabea70514118bb47b18eed8e6149",
       "placeholder": "​",
       "style": "IPY_MODEL_b22b6974b31346c29144b7a64b237f89",
       "tabbable": null,
       "tooltip": null,
       "value": " 1.84k/? [00:00&lt;00:00, 185kB/s]"
      }
     },
     "b22b6974b31346c29144b7a64b237f89": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bb41b25bbc2a46919d0457ded6b64eb8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bc60a0604dc04c04b3a63ebbb410a597": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f3127e482d2748ddbda25570785d4371",
       "placeholder": "​",
       "style": "IPY_MODEL_8bb7addee865487cb3a33d29b1d68102",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "bd96b841de534d60bae94fcdc0946a3f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_10bbe28686974e9187b03d188831a5b8",
       "placeholder": "​",
       "style": "IPY_MODEL_1490ff053fd042a2bd73ec8b4fafd0be",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: "
      }
     },
     "c1c77c78ee864d1081177a3242ebb9ef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_bd96b841de534d60bae94fcdc0946a3f",
        "IPY_MODEL_fefcd48c88be4332bc1f1cc82073f75a",
        "IPY_MODEL_b002169a664547d39198f7186aa13a6f"
       ],
       "layout": "IPY_MODEL_0a413725c18646e9a0341c61616cea28",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c2df95c2af6a4c749905e343ae947606": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c51a5ea7c35a425ca0eae1d25c7167f1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_06a610946478479091d020c867830935",
       "max": 380267417.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_726725e0d0544f26b31e61aeaabf2a2a",
       "tabbable": null,
       "tooltip": null,
       "value": 380267417.0
      }
     },
     "c903ffedcea6461abc906fef06c57ad3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_09f0af8aae36454d86aed1f8cd89876e",
       "placeholder": "​",
       "style": "IPY_MODEL_6f61f7cb58a84aa1a5efd8005f2608b5",
       "tabbable": null,
       "tooltip": null,
       "value": " 291/291 [00:00&lt;00:00, 33.1kB/s]"
      }
     },
     "ca805858ef2449539194aa237d68c150": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_eb0cd951bb034a0ab9935cf5397835d1",
        "IPY_MODEL_c51a5ea7c35a425ca0eae1d25c7167f1",
        "IPY_MODEL_375612988dc140fda14bd36e8faac261"
       ],
       "layout": "IPY_MODEL_219b78487d144930bf6f5fe6907ed3a5",
       "tabbable": null,
       "tooltip": null
      }
     },
     "cb0a03ec08554f3eabc059e9de626083": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1a87179b661c434489e571e042c95a7b",
       "placeholder": "​",
       "style": "IPY_MODEL_07db21e49d0940fda5395681132a2188",
       "tabbable": null,
       "tooltip": null,
       "value": "preprocessor_config.json: 100%"
      }
     },
     "cf9f4d35c3554a7f8f27907b2a14dd75": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d1808902f7ca4f27bfcfc158822f85c7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3868f3f7cf0c45e699740c91373b21fd",
       "placeholder": "​",
       "style": "IPY_MODEL_f34d133eb1c64f74806635d0af2fef22",
       "tabbable": null,
       "tooltip": null,
       "value": "vocab.json: 100%"
      }
     },
     "d53c6320e26f419eb998cde08689c934": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d790ad3be95e4a708f6e689921437747": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_bc60a0604dc04c04b3a63ebbb410a597",
        "IPY_MODEL_62fc25e383fd4a51ad2c2b32f8fdf98a",
        "IPY_MODEL_f9517589adef4c1bb5300fd1a8f1b95a"
       ],
       "layout": "IPY_MODEL_eb6815210c7d46e4aeff92059feeb167",
       "tabbable": null,
       "tooltip": null
      }
     },
     "dfb694eb8434415d81f7ae2d4bdef7d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d1808902f7ca4f27bfcfc158822f85c7",
        "IPY_MODEL_81aa5d07dbf94211be7b0d8f678a2a45",
        "IPY_MODEL_c903ffedcea6461abc906fef06c57ad3"
       ],
       "layout": "IPY_MODEL_37b38dc414ba44faa05c5f33d1183fb7",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e7edabea70514118bb47b18eed8e6149": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e8155a3773e645bbbdde74b8ce437125": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eb0cd951bb034a0ab9935cf5397835d1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_22dd54d9ed2e498aa02938e1c3d2d463",
       "placeholder": "​",
       "style": "IPY_MODEL_15d6f29248f9484182e88975631f6891",
       "tabbable": null,
       "tooltip": null,
       "value": "pytorch_model.bin: 100%"
      }
     },
     "eb6815210c7d46e4aeff92059feeb167": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "edcdc7fbe3c74ceb8aa5155502eba4c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6b4154fbd2bc435ab174c15469fd8be0",
        "IPY_MODEL_0c81c63065d24d24ac371c769c5c966b",
        "IPY_MODEL_6691a066c6a847bb93aa048aeda58fd8"
       ],
       "layout": "IPY_MODEL_6a373e817618490aa41bf36c6caeead0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f3127e482d2748ddbda25570785d4371": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f34d133eb1c64f74806635d0af2fef22": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f9517589adef4c1bb5300fd1a8f1b95a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_80a311d92c244c6a8c98a692dde60995",
       "placeholder": "​",
       "style": "IPY_MODEL_342baf56000843829909a9417e519ef3",
       "tabbable": null,
       "tooltip": null,
       "value": " 163/163 [00:00&lt;00:00, 21.5kB/s]"
      }
     },
     "fb219993aae244fd9bd4128ae64c2dfa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "fefcd48c88be4332bc1f1cc82073f75a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_466e45ff5d564cc29c94e91a6f203f36",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_310b9a378c6c46e984e805c566993b4c",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
